{
  "hash": "e552a014bc79e3ae08236daaa7336bcb",
  "result": {
    "markdown": "---\ntitle: 'Tutorial: Solving Linear Programs with JuMP'\nexecute:\n  error: true\n  warning: true\n---\n\n\n\n## Overview\n\nThis tutorial will demonstrate how to use the `JuMP` package in Julia to solve linear optimization problems. It draws heavily from [this tutorial](https://github.com/east-winds/power-systems-optimization/blob/master/Notebooks/02-Anatomy-of-a-Model.ipynb) by Jesse D. Jenkins and Michael R. Davidson.\n\n[JuMP](https://jump.dev/) (\"**Ju**lia for **M**athematical **P**rogramming\") is an open-source Julia package that adds functionality for formulating and solving a variety of optimization problems. One advantage of JuMP is that its syntax matches the typical mathematical formalism used to specify optimization problems. We will use JuMP in this class for our optimization work.\n\n\\note{Make sure that you take a look at the [`JuMP` documentation](https://jump.dev/JuMP.jl/stable/) whenever you have a question or want to find out how to do something that we don't discuss in any of our notebooks (or how to do it better!).}\n\n## Setup\n\nHere we will outline the basic steps for configuring JuMP, though you can also refer to the official [Installation Guide](https://jump.dev/JuMP.jl/stable/installation/#Installation-Guide).\n\nIf `JuMP` is not already in your environment (it will be for any of your assignments, but may not be if you're doing something independently), you will need to install it. You will also need to [select a solver and install the relevant package](https://jump.dev/JuMP.jl/stable/installation/#Supported-solvers). Some of these are commercial, while others are open source. Solvers are also not typically universal, as different types of optimization problems use different algorithms, so be aware of what problem you're trying to solve instead of just blindly copying code from one task to another.\n\nFor example, for the linear programming example, we will use the Clp ([COIN-OR Linear Programming](https://github.com/coin-or/Clp)) solver via the [`Clp`](https://github.com/jump-dev/Clp.jl) package. As seen on the solver table, Clp is open source (via the EPL, or [Eclipse Public License](https://opensource.org/licenses/EPL-1.0)) and can solve linear programs (LP). For the mixed-integer linear programming example, we will instead of the Cbc ([COIN-OR Branch and Cut](https://github.com/coin-or/Cbc)) solver via the [`Cbc`](https://github.com/jump-dev/Cbc.jl) package. This is also open-source (it comes from the same group as Clp) and can solve mixed-integer or binary linear programs.\n\n## Linear Programming Example: How Many Widgets Should A Factory Produce?\n\n### Defining The Problem\n\nSuppose we own a factory that can produce two types of widgets:\n\n* Widget A generates a profit of $p_A = \\$100$ per widget; and\n* Widget B generates a profit of $p_B = \\$75$ per widget.\nLet $x$ be the number of units of widget A that we want to produce, and $y$ the number of units of widget B. Our goal is to *maximize* our total profit $p_Ax + p_By$. This is the **objective function**. We express this objective using the equation $$\\max 100x + 75y.$$\n\nFurther, we cannot build a negative number of either type of widget. This is known as a *non-negativity constraint*, and can be expressed as\n\\begin{align}\nx &\\geq 0\\\\\ny &\\geq 0\n\\end{align}\n\nThis isn't a very interesting problem yet! We would simply build as much of both widgets as we could, because there are no constraints on our ability to produce. To make this more realistic, let's suppose that both widgets are produced using the same raw material $M$, of which we can only procure 300 units. Then, if:\n\n* Widget A requires 40 units of $M$ per widget, and\n* Widget B requires 20 units of $M$ per widget,\nwe arrive at the following material **constraint**:\n$$40x + 20y \\leq 300.$$\n\nBut we might have another constraint: time! Each widget may take a different amount of labor to produce. For example, let's say that\n\n* Widget A takes 6 hours to produce and\n* Widget B takes 12 hours to produce.\nFurther, there are only 80 hours per work that can be allocated to widget production. This becomes the time constraint\n$$6x + 12y \\leq 80.$$\n\nConsolidating equations (1)--(4) gives us the following **constrained optimization problem**:\n\\begin{align}\n& &\\max 100x + 75y\\\\\n&\\text{subject to} & \\\\\n& & x \\geq 0\\\\\n& & y \\geq 0 \\\\\n& & 40x + 20y \\leq 300\\\\\n& & 6x + 12y \\leq 80\n\\end{align}\n\n### Visualizing the Problem\n\nLet's do some plotting to examine the geometry of our optimization problem. We can do this using the [`Plots`](https://docs.juliaplots.org/latest/) package in Julia.\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n# set up objective function parameters and variables\npa = 100\npb = 75\na = range(0, 8, step=0.25)\nb = range(0, 8, step=0.25)\n\n# define objective function\nf(a, b) = pa * a + pb * b\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nf (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n# start plotting\nusing Plots\nplotlyjs()\n\ncontour(a,b,(a,b)->f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a[a.<=11], (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a[a.<=8], (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div style=\"padding: 1em; background-color: #f8d6da; border: 1px solid #f5c6cb; font-weight: bold;\">\n<p>The WebIO Jupyter extension was not detected. See the\n<a href=\"https://juliagizmos.github.io/WebIO.jl/latest/providers/ijulia/\" target=\"_blank\">\n    WebIO Jupyter integration documentation\n</a>\nfor more information.\n</div>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](tutorial_files/figure-html/cell-4-output-2.svg){}\n:::\n:::\n\n\nWe can see exactly where the solution will be, at the intersection of the feasible regions imposed by the two constraints (note how this is related to the gradient of the objective function)!  Let's now use JuMP to identify the location of this point (though we could also solve for it using linear algebra).\n\n### Solving This Problem Using JuMP\n\n#### Setting Up the Model and Solver\n\nFirst, we should load `JuMP` and `Clp`.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nusing JuMP\nusing Clp\n```\n:::\n\n\nTo solve our problem, first we need to **define the model**. The *model object* has lots of attributes, including the variables, constraints, solver options, etc. We create a new model using the `Model()` function. Since we are using the `Clp` solver, we need to tell JuMP to use the `Clp.Optimizer` solver function.\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nfactory_model = Model(Clp.Optimizer)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Clp\n```\n:::\n:::\n\n\nThere are a bunch of attributes and options that we could set, but we won't in this example. If needed, look at the `Clp.jl` [documentation](https://github.com/jump-dev/Clp.jl).\n\n\n#### Define Variables\nDecision variables ($x$ and $y$ in this case) in JuMP are defined using the `@variable` macro. The first argument passed to `@variable()` is the model object, in this case, `factory_model`, and the second argument are bounds on that variable, created using `>=` and `<=`. JuMP will interpret the bound specification to obtain the variable name. In this case, our only bounds directly on the variables are the non-negativity constraints.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n@variable(factory_model, x >= 0);\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n@variable(factory_model, y >= 0);\n```\n:::\n\n\nIf we had a free (or unbounded) variable $z$, we could declare that variable using `@variable(model, z)`. JuMP also requires unique names for each variable, or it will throw an error. This is one place where it's nice that Julia lets us use sub- and superscripts in variable names!\n\nIf we did want to modify the bounds after defining the variable, we could do so using the `set_lower_bound` and `set_upper_bound` functions, or we could remove them using `delete_lower_bound` and `delete_upper_bound`.\n\nFinally, if we want to see all of the variables associated with a model, we can use the `all_variables` function to obtain an array.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nall_variables(factory_model)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n2-element Vector{VariableRef}:\n x\n y\n```\n:::\n:::\n\n\n#### Define Constraints\nWhen defining variables, we were able to declare constraints on their values by specifying upper and lower bounds. However, we also have other constraints, which involve multiple decision variables. These are specified using the `@constraint` macro. Unlike variables, we also need to pass names for each constraint. We will use `time` for the time constraint and `materials` for the materials constraint. These names must be unique.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\n@constraint(factory_model, time, 6x + 12y <= 80) # specify the time constraint\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\ntime : 6 x + 12 y â‰¤ 80.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n@constraint(factory_model, materials, 40x + 20y <= 300) # materials constraint\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nmaterials : 40 x + 20 y â‰¤ 300.0\n```\n:::\n:::\n\n\n#### Define Objective Function\nSo far, we've defined the feasible region of the decision-variable domain by setting the constraints. But we need to specify our objective function to know what we are trying to minimize or maximize over this region. We define the objective function using the `@objective` macro. In addition to specifying the model objective and the function, we need to tell JuMP whether we want to minimize or maximize.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\n@objective(factory_model, Max, 100x + 75y)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n$$ 100 x + 75 y $$\n:::\n:::\n\n\nNow, let's look at the model specification. \n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nprint(factory_model)\n```\n\n::: {.cell-output .cell-output-display}\n$$ \\begin{aligned}\n\\max\\quad & 100 x + 75 y\\\\\n\\text{Subject to} \\quad & 6 x + 12 y \\leq 80.0\\\\\n & 40 x + 20 y \\leq 300.0\\\\\n & x \\geq 0.0\\\\\n & y \\geq 0.0\\\\\n\\end{aligned} $$\n:::\n:::\n\n\nWe can also get a nicely styled LaTeX version, which might be useful.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nlatex_formulation(factory_model)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n$$ \\begin{aligned}\n\\max\\quad & 100 x + 75 y\\\\\n\\text{Subject to} \\quad & 6 x + 12 y \\leq 80.0\\\\\n & 40 x + 20 y \\leq 300.0\\\\\n & x \\geq 0.0\\\\\n & y \\geq 0.0\\\\\n\\end{aligned} $$\n:::\n:::\n\n\nWe won't go into detail here, but there are other ways to define the model, which are detailed in the [JuMP documentation](https://jump.dev/JuMP.jl/stable/). For example, we can specify multiple variables using [`@variables`](https://jump.dev/JuMP.jl/stable/manual/variables/#variables). Similarly, we can use [`@constraints`](https://jump.dev/JuMP.jl/stable/manual/constraints/#The-@constraints-macro) to define multiple constraints at once. Or we can use [loops](https://jump.dev/JuMP.jl/stable/tutorials/Getting%20started/variables_constraints_objective/#Constraints-in-a-loop) to define multiple constraints or constraints involving many variables. We can also specify the model in [vectorized syntax](https://jump.dev/JuMP.jl/stable/tutorials/Getting%20started/variables_constraints_objective/#Vectorized-syntax), which is similar to how linear programs are specified in MATLAB.\n\n\n#### Solve the Model\nNow it's time to solve the model and find the optimal values $(x^*, y^*)$. Since we specified the solver when we initialized `factory_model`, all we have to do is call the `optimize!` function.\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\noptimize!(factory_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoin0506I Presolve 2 (0) rows, 2 (0) columns and 4 (0) elements\nClp0006I 0  Obj 0 Dual inf 175 (2)\nClp0006I 2  Obj 847.22222\nClp0000I Optimal - objective value 847.22222\nClp0032I Optimal objective 847.2222222 - 2 iterations time 0.002\n```\n:::\n:::\n\n\n#### Query the Solution\nTo find the optimal values of our decision variables, we need to query the values of the variables using `value.()`. We use `value.()` (the vectorized version of `value()`) because JuMP stores decision variables differently depending on their number and how they were defined. Uses the dot-syntax here works with any model specification, while the plain `value()` will not work if a queried decision variable is stored as a vector.\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nvalue.(x)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n5.555555555555555\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nvalue.(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n3.8888888888888884\n```\n:::\n:::\n\n\nSo we can see that our optimal inputs are $$(x^*, y^*) = (5.56, 3.89)$$ (and we'll pretend that we can manufacture and sell parts of widgets).\n\n\n#### Visualize the Solution\n\nLet's take our previous plot and add the solution point to make sure that we got the solution we expected.\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\n# replot the previous plot\ncontour(a,b,(a,b)->f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a, (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a, (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n\n# now we plot the solution that we obtained\nscatter!([value.(x)],[value.(y)], markercolor=\"blue\")\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](tutorial_files/figure-html/cell-18-output-1.svg){}\n:::\n:::\n\n\nThe solution $$(x^*, y^*)$$ is exactly where we deduced it would be geometrically.\n\n\n\n#### Other Stuff We Can Do\nWe can also use `value.()` to evaluate our constraints without manually using the equations.\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nvalue.(time)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n80.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\nvalue.(materials)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n300.0\n```\n:::\n:::\n\n\nWhat if we also want the optimal objective value? We can obtain this using `objective_value()`.\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nobjective_value(factory_model)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n847.2222222222222\n```\n:::\n:::\n\n\nWe could also define other expressions via the [`@expression` macro](https://jump.dev/JuMP.jl/stable/expressions/#JuMP.@expression) as functions of the decision variables and evaluate those. For example, let's say that we wanted to know the total number of widgets we'd produce under our optimal allocation of resources.\n\n::: {.cell execution_count=21}\n``` {.julia .cell-code}\n@expression(factory_model, total_widgets, x+y)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n$$ x + y $$\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.julia .cell-code}\nvalue.(total_widgets)\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n9.444444444444443\n```\n:::\n:::\n\n\n#### Dual Solutions\nWe can identify if our model has a dual solution by calling `has_duals()`.\n\n::: {.cell execution_count=23}\n``` {.julia .cell-code}\nhas_duals(factory_model)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ntrue\n```\n:::\n:::\n\n\nIf we want to know the dual solution associated with a constraint, we use the `shadow_price()` function.\n\n::: {.cell execution_count=24}\n``` {.julia .cell-code}\nshadow_price(time)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n2.7777777777777786\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.julia .cell-code}\nshadow_price(materials)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n2.083333333333333\n```\n:::\n:::\n\n\nIf the binding constraint was a variable bound, we could also query that shadow price by calling `reduced_cost()` on the variable.\n\n```\nreduced_cost(x)\n```\n\n::: {.cell execution_count=26}\n``` {.julia .cell-code}\nreduced_cost(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n-0.0\n```\n:::\n:::\n\n\nIn this case, the relevant shadow prices are zero because the optimum is in the interior of the domain. If we had added a strong enough upper bound on the value(s) of one or both of our decision variables (say, x <= 4), then this would be non-zero.\n\n",
    "supporting": [
      "tutorial_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}