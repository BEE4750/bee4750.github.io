{
  "hash": "522fca43fde6a82bbb89bf553f89f352",
  "result": {
    "markdown": "---\ntitle: BEE 4750 Lab 1 Solution\nformat:\n  html:\n    warning: true\n    error: true\n  ipynb:\n    warning: true\n    error: true\n    code-annotation: below\nformat-links: []\n---\n\n::: {.callout-important icon=false}\n### Due Date\n\nFriday, 9/1/23, 9:00pm\n:::\n\nThese solutions are not unique; other approaches are possible. But they're how I would solve the problems and might be helpful for Julia syntax.\n\n::: {#a3323850 .cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n:::\n\n\n::: {#648c6f9d .cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\n```\n:::\n\n\n## Exercises (10 points)\n\n\n### Exercise 1 (3 points)\n\nGiven two numeric arrays `x` and `y`, write a function to compute their dot product if they have equal length, and return an error if not (this is useful for debugging!). Use the following code as a starting point. \n\n::: {#78d0a5b5 .cell execution_count=3}\n``` {.julia .cell-code}\nfunction dot_product(x, y)\n    if length(x) == length(y)\n        return sum(x .* y) # use broadcasting to elementwise multiply\n    else\n        throw(DimensionMismatch(\"length of x not equal to length of y\"))\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ndot_product (generic function with 1 method)\n```\n:::\n:::\n\n\nHere are some tests to make sure your code works as intended. Tests like these are useful to make sure everything works as intended. One reason to split your code up into functions is that it makes it straightforward to write tests to make sure each piece of your code works, which makes it easier to identify where errors are occuring.\n\n::: {#84883e70 .cell execution_count=4}\n``` {.julia .cell-code}\ndot_product([1 2 3], [4 5 6])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n32\n```\n:::\n:::\n\n\nIf you know the value you should get, you can write a more formal test using the `@assert` macro, which is a good way to \"automate\" checking (since you get an obvious error if the code doesn't work as desired):\n\n::: {#d5d8afa3 .cell execution_count=5}\n``` {.julia .cell-code}\n@assert dot_product([1 2 3], [4 5 6]) == 32\n```\n:::\n\n\nLet's also make sure we get an error when the dimensions of the two vectors don't match:\n\n::: {#2968b9c5 .cell execution_count=6}\n``` {.julia .cell-code}\ndot_product([1 2 3], [4 5])\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DimensionMismatch: length of x not equal to length of y\n```\n:::\n:::\n\n\n### Exercise 2 (3 points)\n\nThis problem involves implementing Newton's method for computing square roots; it was shamelessly copied from MIT's [Introduction to Computational Thinking](https://computationalthinking.mit.edu/Spring21/hw0/). You will use a `while` loop instead of the `for` loop shown above.\n\nImplement the following algorithm in a function `newton_sqrt`:\n\nGiven $x > 0$:\n\n1. Take a guess $a$.\n2. Divide $x$ by $a$.  \n3. Update $a$ as the average of $x/a$ and $a$.\n4. Repeat until $x/a$ is within a tolerance of $\\varepsilon$ from $a$.\n5. Return $a \\approx \\sqrt{x}$.\n\n::: {#d5e2dacb .cell execution_count=7}\n``` {.julia .cell-code}\n# Write a function for Newton's method\n# x is the value we want to find the root of\n# a is the initial guess\n# ϵ is the tolerance\nfunction newton_sqrt(x, a, ϵ)\n    while abs(x/a - a) >= ϵ # loop until x/a is within tolerance\n        a = ((x/a) + a) / 2\n    end\n    return a\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nnewton_sqrt (generic function with 1 method)\n```\n:::\n:::\n\n\nUse your `newton_sqrt` function to compute $\\sqrt{2}$ to within a tolerance of $\\varepsilon = 0.01$.\n\n::: {#993571eb .cell execution_count=8}\n``` {.julia .cell-code}\nnewton_sqrt(2, 1, 0.01)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n1.4166666666666665\n```\n:::\n:::\n\n\n### Exercise 3: Making a Plot (3 points)\n\nWrite a function to compute the square of an integer `x`. Evaluate this function for integers between $x=-5$ and $x=5$ and make a plot of the squared values (you can find a quick guide to making various types of plots [here](../tutorials/julia-plots.html)). Make sure to label your axes. \n\n::: {#dfaa7179 .cell execution_count=9}\n``` {.julia .cell-code}\n# Write square function\n# x is the integer which will be squared\nsquare_int(x) = x * x\n\n# Evaluate from x=-5 to x=5\nx = -5:1:5 # this creates an array of integers between -5 and 5\ny = square_int.(x)\n\n# Plot integer values without a legend\nplot(x, y, label=:false)\nxlabel!(\"Value\") # add x label; this could be done within the plot call\nylabel!(\"Squared Value\") # add y label\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"672\" height=\"480\" viewBox=\"0 0 2688 1920\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2688\" height=\"1920\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1920 L2688 1920 L2688 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"537\" y=\"0\" width=\"1883\" height=\"1883\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M210.238 1734.12 L2640.76 1734.12 L2640.76 47.2441 L210.238 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"210\" y=\"47\" width=\"2432\" height=\"1688\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"508.32,1734.12 508.32,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"966.909,1734.12 966.909,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1425.5,1734.12 1425.5,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1884.09,1734.12 1884.09,47.2441 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2342.67,1734.12 2342.67,47.2441 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,1734.12 2640.76,1734.12 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"508.32,1734.12 508.32,1715.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"966.909,1734.12 966.909,1715.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1425.5,1734.12 1425.5,1715.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1884.09,1734.12 1884.09,1715.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2342.67,1734.12 2342.67,1715.22 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M477.221 1781.99 L506.897 1781.99 L506.897 1785.93 L477.221 1785.93 L477.221 1781.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M529.836 1768.34 L518.031 1786.78 L529.836 1786.78 L529.836 1768.34 M528.61 1764.26 L534.489 1764.26 L534.489 1786.78 L539.42 1786.78 L539.42 1790.67 L534.489 1790.67 L534.489 1798.82 L529.836 1798.82 L529.836 1790.67 L514.235 1790.67 L514.235 1786.16 L528.61 1764.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M936.851 1781.99 L966.527 1781.99 L966.527 1785.93 L936.851 1785.93 L936.851 1781.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M980.647 1794.89 L996.966 1794.89 L996.966 1798.82 L975.022 1798.82 L975.022 1794.89 Q977.684 1792.13 982.267 1787.5 Q986.874 1782.85 988.054 1781.51 Q990.3 1778.98 991.179 1777.25 Q992.082 1775.49 992.082 1773.8 Q992.082 1771.04 990.138 1769.31 Q988.216 1767.57 985.114 1767.57 Q982.915 1767.57 980.462 1768.34 Q978.031 1769.1 975.253 1770.65 L975.253 1765.93 Q978.077 1764.79 980.531 1764.21 Q982.985 1763.64 985.022 1763.64 Q990.392 1763.64 993.587 1766.32 Q996.781 1769.01 996.781 1773.5 Q996.781 1775.63 995.971 1777.55 Q995.184 1779.45 993.077 1782.04 Q992.499 1782.71 989.397 1785.93 Q986.295 1789.12 980.647 1794.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1425.5 1767.34 Q1421.89 1767.34 1420.06 1770.9 Q1418.25 1774.45 1418.25 1781.58 Q1418.25 1788.68 1420.06 1792.25 Q1421.89 1795.79 1425.5 1795.79 Q1429.13 1795.79 1430.94 1792.25 Q1432.77 1788.68 1432.77 1781.58 Q1432.77 1774.45 1430.94 1770.9 Q1429.13 1767.34 1425.5 1767.34 M1425.5 1763.64 Q1431.31 1763.64 1434.36 1768.24 Q1437.44 1772.83 1437.44 1781.58 Q1437.44 1790.3 1434.36 1794.91 Q1431.31 1799.49 1425.5 1799.49 Q1419.69 1799.49 1416.61 1794.91 Q1413.55 1790.3 1413.55 1781.58 Q1413.55 1772.83 1416.61 1768.24 Q1419.69 1763.64 1425.5 1763.64 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1878.74 1794.89 L1895.06 1794.89 L1895.06 1798.82 L1873.11 1798.82 L1873.11 1794.89 Q1875.78 1792.13 1880.36 1787.5 Q1884.96 1782.85 1886.15 1781.51 Q1888.39 1778.98 1889.27 1777.25 Q1890.17 1775.49 1890.17 1773.8 Q1890.17 1771.04 1888.23 1769.31 Q1886.31 1767.57 1883.21 1767.57 Q1881.01 1767.57 1878.55 1768.34 Q1876.12 1769.1 1873.34 1770.65 L1873.34 1765.93 Q1876.17 1764.79 1878.62 1764.21 Q1881.08 1763.64 1883.11 1763.64 Q1888.48 1763.64 1891.68 1766.32 Q1894.87 1769.01 1894.87 1773.5 Q1894.87 1775.63 1894.06 1777.55 Q1893.27 1779.45 1891.17 1782.04 Q1890.59 1782.71 1887.49 1785.93 Q1884.39 1789.12 1878.74 1794.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2345.68 1768.34 L2333.88 1786.78 L2345.68 1786.78 L2345.68 1768.34 M2344.46 1764.26 L2350.34 1764.26 L2350.34 1786.78 L2355.27 1786.78 L2355.27 1790.67 L2350.34 1790.67 L2350.34 1798.82 L2345.68 1798.82 L2345.68 1790.67 L2330.08 1790.67 L2330.08 1786.16 L2344.46 1764.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1356.13 1883.3 L1337.98 1835.78 L1344.7 1835.78 L1359.76 1875.79 L1374.84 1835.78 L1381.53 1835.78 L1363.42 1883.3 L1356.13 1883.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1399.35 1865.38 Q1392.25 1865.38 1389.51 1867 Q1386.78 1868.63 1386.78 1872.54 Q1386.78 1875.66 1388.81 1877.51 Q1390.88 1879.32 1394.42 1879.32 Q1399.29 1879.32 1402.21 1875.88 Q1405.17 1872.42 1405.17 1866.69 L1405.17 1865.38 L1399.35 1865.38 M1411.03 1862.96 L1411.03 1883.3 L1405.17 1883.3 L1405.17 1877.89 Q1403.17 1881.14 1400.18 1882.7 Q1397.19 1884.22 1392.86 1884.22 Q1387.38 1884.22 1384.14 1881.17 Q1380.92 1878.08 1380.92 1872.92 Q1380.92 1866.91 1384.93 1863.85 Q1388.97 1860.8 1396.96 1860.8 L1405.17 1860.8 L1405.17 1860.23 Q1405.17 1856.18 1402.5 1853.99 Q1399.86 1851.76 1395.05 1851.76 Q1392 1851.76 1389.1 1852.49 Q1386.2 1853.22 1383.53 1854.69 L1383.53 1849.28 Q1386.75 1848.03 1389.77 1847.43 Q1392.79 1846.79 1395.66 1846.79 Q1403.39 1846.79 1407.21 1850.8 Q1411.03 1854.81 1411.03 1862.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1423.09 1833.78 L1428.95 1833.78 L1428.95 1883.3 L1423.09 1883.3 L1423.09 1833.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1440.6 1869.23 L1440.6 1847.65 L1446.46 1847.65 L1446.46 1869.01 Q1446.46 1874.07 1448.43 1876.62 Q1450.4 1879.13 1454.35 1879.13 Q1459.09 1879.13 1461.83 1876.11 Q1464.6 1873.08 1464.6 1867.86 L1464.6 1847.65 L1470.45 1847.65 L1470.45 1883.3 L1464.6 1883.3 L1464.6 1877.83 Q1462.47 1881.07 1459.63 1882.66 Q1456.83 1884.22 1453.11 1884.22 Q1446.97 1884.22 1443.78 1880.4 Q1440.6 1876.59 1440.6 1869.23 M1455.34 1846.79 L1455.34 1846.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1513.01 1864.01 L1513.01 1866.88 L1486.08 1866.88 Q1486.46 1872.92 1489.71 1876.11 Q1492.99 1879.26 1498.81 1879.26 Q1502.19 1879.26 1505.34 1878.43 Q1508.52 1877.6 1511.64 1875.95 L1511.64 1881.49 Q1508.49 1882.82 1505.18 1883.52 Q1501.87 1884.22 1498.46 1884.22 Q1489.93 1884.22 1484.94 1879.26 Q1479.97 1874.29 1479.97 1865.83 Q1479.97 1857.07 1484.68 1851.95 Q1489.42 1846.79 1497.45 1846.79 Q1504.64 1846.79 1508.81 1851.44 Q1513.01 1856.06 1513.01 1864.01 M1507.15 1862.29 Q1507.09 1857.49 1504.45 1854.62 Q1501.84 1851.76 1497.51 1851.76 Q1492.61 1851.76 1489.65 1854.53 Q1486.72 1857.3 1486.27 1862.33 L1507.15 1862.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,1686.38 2640.76,1686.38 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,1368.1 2640.76,1368.1 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,1049.82 2640.76,1049.82 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,731.542 2640.76,731.542 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,413.264 2640.76,413.264 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"210.238,94.9858 2640.76,94.9858 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,1734.12 210.238,47.2441 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,1686.38 229.135,1686.38 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,1368.1 229.135,1368.1 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,1049.82 229.135,1049.82 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,731.542 229.135,731.542 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,413.264 229.135,413.264 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"210.238,94.9858 229.135,94.9858 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M157.973 1672.17 Q154.362 1672.17 152.534 1675.74 Q150.728 1679.28 150.728 1686.41 Q150.728 1693.52 152.534 1697.08 Q154.362 1700.62 157.973 1700.62 Q161.608 1700.62 163.413 1697.08 Q165.242 1693.52 165.242 1686.41 Q165.242 1679.28 163.413 1675.74 Q161.608 1672.17 157.973 1672.17 M157.973 1668.47 Q163.784 1668.47 166.839 1673.08 Q169.918 1677.66 169.918 1686.41 Q169.918 1695.14 166.839 1699.74 Q163.784 1704.33 157.973 1704.33 Q152.163 1704.33 149.085 1699.74 Q146.029 1695.14 146.029 1686.41 Q146.029 1677.66 149.085 1673.08 Q152.163 1668.47 157.973 1668.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M149.015 1350.82 L167.372 1350.82 L167.372 1354.75 L153.298 1354.75 L153.298 1363.22 Q154.316 1362.88 155.335 1362.72 Q156.353 1362.53 157.372 1362.53 Q163.159 1362.53 166.538 1365.7 Q169.918 1368.87 169.918 1374.29 Q169.918 1379.87 166.446 1382.97 Q162.973 1386.05 156.654 1386.05 Q154.478 1386.05 152.21 1385.68 Q149.964 1385.31 147.557 1384.57 L147.557 1379.87 Q149.64 1381 151.862 1381.56 Q154.085 1382.11 156.561 1382.11 Q160.566 1382.11 162.904 1380.01 Q165.242 1377.9 165.242 1374.29 Q165.242 1370.68 162.904 1368.57 Q160.566 1366.47 156.561 1366.47 Q154.686 1366.47 152.811 1366.88 Q150.96 1367.3 149.015 1368.18 L149.015 1350.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M118.622 1063.16 L126.261 1063.16 L126.261 1036.8 L117.951 1038.47 L117.951 1034.21 L126.214 1032.54 L130.89 1032.54 L130.89 1063.16 L138.529 1063.16 L138.529 1067.1 L118.622 1067.1 L118.622 1063.16 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M157.973 1035.62 Q154.362 1035.62 152.534 1039.18 Q150.728 1042.72 150.728 1049.85 Q150.728 1056.96 152.534 1060.53 Q154.362 1064.07 157.973 1064.07 Q161.608 1064.07 163.413 1060.53 Q165.242 1056.96 165.242 1049.85 Q165.242 1042.72 163.413 1039.18 Q161.608 1035.62 157.973 1035.62 M157.973 1031.91 Q163.784 1031.91 166.839 1036.52 Q169.918 1041.1 169.918 1049.85 Q169.918 1058.58 166.839 1063.19 Q163.784 1067.77 157.973 1067.77 Q152.163 1067.77 149.085 1063.19 Q146.029 1058.58 146.029 1049.85 Q146.029 1041.1 149.085 1036.52 Q152.163 1031.91 157.973 1031.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M119.617 744.886 L127.256 744.886 L127.256 718.521 L118.946 720.187 L118.946 715.928 L127.21 714.262 L131.886 714.262 L131.886 744.886 L139.525 744.886 L139.525 748.822 L119.617 748.822 L119.617 744.886 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M149.015 714.262 L167.372 714.262 L167.372 718.197 L153.298 718.197 L153.298 726.669 Q154.316 726.322 155.335 726.16 Q156.353 725.974 157.372 725.974 Q163.159 725.974 166.538 729.146 Q169.918 732.317 169.918 737.734 Q169.918 743.312 166.446 746.414 Q162.973 749.493 156.654 749.493 Q154.478 749.493 152.21 749.123 Q149.964 748.752 147.557 748.011 L147.557 743.312 Q149.64 744.447 151.862 745.002 Q154.085 745.558 156.561 745.558 Q160.566 745.558 162.904 743.451 Q165.242 741.345 165.242 737.734 Q165.242 734.123 162.904 732.016 Q160.566 729.91 156.561 729.91 Q154.686 729.91 152.811 730.326 Q150.96 730.743 149.015 731.623 L149.015 714.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M121.839 426.609 L138.159 426.609 L138.159 430.544 L116.214 430.544 L116.214 426.609 Q118.876 423.854 123.46 419.224 Q128.066 414.572 129.247 413.229 Q131.492 410.706 132.372 408.97 Q133.275 407.21 133.275 405.521 Q133.275 402.766 131.33 401.03 Q129.409 399.294 126.307 399.294 Q124.108 399.294 121.654 400.058 Q119.224 400.822 116.446 402.373 L116.446 397.65 Q119.27 396.516 121.724 395.937 Q124.177 395.359 126.214 395.359 Q131.585 395.359 134.779 398.044 Q137.974 400.729 137.974 405.22 Q137.974 407.349 137.163 409.271 Q136.376 411.169 134.27 413.761 Q133.691 414.433 130.589 417.65 Q127.488 420.845 121.839 426.609 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M157.973 399.062 Q154.362 399.062 152.534 402.627 Q150.728 406.169 150.728 413.298 Q150.728 420.405 152.534 423.97 Q154.362 427.511 157.973 427.511 Q161.608 427.511 163.413 423.97 Q165.242 420.405 165.242 413.298 Q165.242 406.169 163.413 402.627 Q161.608 399.062 157.973 399.062 M157.973 395.359 Q163.784 395.359 166.839 399.965 Q169.918 404.548 169.918 413.298 Q169.918 422.025 166.839 426.632 Q163.784 431.215 157.973 431.215 Q152.163 431.215 149.085 426.632 Q146.029 422.025 146.029 413.298 Q146.029 404.548 149.085 399.965 Q152.163 395.359 157.973 395.359 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M122.835 108.331 L139.154 108.331 L139.154 112.266 L117.21 112.266 L117.21 108.331 Q119.872 105.576 124.455 100.946 Q129.062 96.2936 130.242 94.9511 Q132.488 92.4279 133.367 90.6918 Q134.27 88.9326 134.27 87.2428 Q134.27 84.4882 132.325 82.752 Q130.404 81.0159 127.302 81.0159 Q125.103 81.0159 122.65 81.7798 Q120.219 82.5437 117.441 84.0946 L117.441 79.3724 Q120.265 78.2382 122.719 77.6595 Q125.173 77.0808 127.21 77.0808 Q132.58 77.0808 135.775 79.766 Q138.969 82.4511 138.969 86.9418 Q138.969 89.0715 138.159 90.9927 Q137.372 92.8909 135.265 95.4835 Q134.687 96.1548 131.585 99.3723 Q128.483 102.567 122.835 108.331 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M149.015 77.7058 L167.372 77.7058 L167.372 81.6409 L153.298 81.6409 L153.298 90.1131 Q154.316 89.7659 155.335 89.6039 Q156.353 89.4187 157.372 89.4187 Q163.159 89.4187 166.538 92.59 Q169.918 95.7612 169.918 101.178 Q169.918 106.757 166.446 109.858 Q162.973 112.937 156.654 112.937 Q154.478 112.937 152.21 112.567 Q149.964 112.196 147.557 111.456 L147.557 106.757 Q149.64 107.891 151.862 108.446 Q154.085 109.002 156.561 109.002 Q160.566 109.002 162.904 106.895 Q165.242 104.789 165.242 101.178 Q165.242 97.5668 162.904 95.4603 Q160.566 93.3538 156.561 93.3538 Q154.686 93.3538 152.811 93.7705 Q150.96 94.1872 149.015 95.0668 L149.015 77.7058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M15.678 1091.5 L21.9483 1091.5 Q20.1977 1095.16 19.3383 1098.41 Q18.479 1101.66 18.479 1104.68 Q18.479 1109.93 20.516 1112.8 Q22.553 1115.63 26.3088 1115.63 Q29.4598 1115.63 31.0831 1113.75 Q32.6745 1111.84 33.6612 1106.56 L34.4569 1102.67 Q35.8255 1095.48 39.2948 1092.08 Q42.7323 1088.64 48.5251 1088.64 Q55.4319 1088.64 58.9967 1093.29 Q62.5615 1097.9 62.5615 1106.84 Q62.5615 1110.22 61.7976 1114.04 Q61.0337 1117.82 59.5378 1121.9 L52.9174 1121.9 Q55.1136 1117.98 56.2276 1114.23 Q57.3416 1110.47 57.3416 1106.84 Q57.3416 1101.34 55.1773 1098.35 Q53.0129 1095.35 49.0025 1095.35 Q45.5014 1095.35 43.528 1097.52 Q41.5546 1099.65 40.568 1104.55 L39.8041 1108.47 Q38.3718 1115.66 35.3162 1118.88 Q32.2607 1122.09 26.818 1122.09 Q20.516 1122.09 16.8875 1117.67 Q13.2591 1113.21 13.2591 1105.41 Q13.2591 1102.07 13.8638 1098.6 Q14.4686 1095.13 15.678 1091.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M43.8463 1075.37 Q50.3075 1075.37 53.9996 1072.72 Q57.6599 1070.05 57.6599 1065.4 Q57.6599 1060.76 53.9996 1058.08 Q50.3075 1055.41 43.8463 1055.41 Q37.3851 1055.41 33.7248 1058.08 Q30.0327 1060.76 30.0327 1065.4 Q30.0327 1070.05 33.7248 1072.72 Q37.3851 1075.37 43.8463 1075.37 M56.2912 1055.41 Q59.4741 1057.26 61.0337 1060.09 Q62.5615 1062.89 62.5615 1066.84 Q62.5615 1073.3 57.4052 1077.37 Q52.249 1081.41 43.8463 1081.41 Q35.4436 1081.41 30.2873 1077.37 Q25.1311 1073.3 25.1311 1066.84 Q25.1311 1062.89 26.6907 1060.09 Q28.2185 1057.26 31.4013 1055.41 L25.9905 1055.41 L25.9905 1049.55 L75.1974 1049.55 L75.1974 1055.41 L56.2912 1055.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M47.5702 1038.09 L25.9905 1038.09 L25.9905 1032.24 L47.3474 1032.24 Q52.4082 1032.24 54.9545 1030.26 Q57.4689 1028.29 57.4689 1024.34 Q57.4689 1019.6 54.4452 1016.86 Q51.4215 1014.1 46.2016 1014.1 L25.9905 1014.1 L25.9905 1008.24 L61.6384 1008.24 L61.6384 1014.1 L56.1639 1014.1 Q59.4104 1016.23 61.0019 1019.06 Q62.5615 1021.86 62.5615 1025.59 Q62.5615 1031.73 58.742 1034.91 Q54.9226 1038.09 47.5702 1038.09 M25.1311 1023.36 L25.1311 1023.36 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M43.719 979.975 Q43.719 987.073 45.3422 989.811 Q46.9655 992.548 50.8804 992.548 Q53.9996 992.548 55.8457 990.511 Q57.6599 988.442 57.6599 984.909 Q57.6599 980.039 54.2224 977.111 Q50.7531 974.151 45.0239 974.151 L43.719 974.151 L43.719 979.975 M41.3 968.294 L61.6384 968.294 L61.6384 974.151 L56.2276 974.151 Q59.4741 976.156 61.0337 979.148 Q62.5615 982.14 62.5615 986.469 Q62.5615 991.943 59.5059 995.19 Q56.4186 998.404 51.2623 998.404 Q45.2467 998.404 42.1912 994.394 Q39.1357 990.352 39.1357 982.363 L39.1357 974.151 L38.5628 974.151 Q34.5205 974.151 32.3244 976.824 Q30.0964 979.466 30.0964 984.272 Q30.0964 987.328 30.8284 990.224 Q31.5605 993.121 33.0246 995.794 L27.6137 995.794 Q26.3724 992.58 25.7677 989.556 Q25.1311 986.532 25.1311 983.668 Q25.1311 975.933 29.1415 972.114 Q33.1519 968.294 41.3 968.294 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M31.465 935.575 Q30.8921 936.561 30.6375 937.739 Q30.351 938.885 30.351 940.285 Q30.351 945.251 33.5975 947.924 Q36.8122 950.566 42.8596 950.566 L61.6384 950.566 L61.6384 956.454 L25.9905 956.454 L25.9905 950.566 L31.5287 950.566 Q28.2821 948.72 26.7225 945.76 Q25.1311 942.8 25.1311 938.567 Q25.1311 937.962 25.2266 937.23 Q25.2903 936.498 25.4494 935.607 L31.465 935.575 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M42.3504 900.372 L45.2149 900.372 L45.2149 927.299 Q51.2623 926.917 54.4452 923.671 Q57.5962 920.392 57.5962 914.568 Q57.5962 911.194 56.7687 908.043 Q55.9411 904.86 54.2861 901.741 L59.8242 901.741 Q61.161 904.892 61.8612 908.202 Q62.5615 911.512 62.5615 914.918 Q62.5615 923.448 57.5962 928.445 Q52.631 933.41 44.1646 933.41 Q35.4117 933.41 30.2873 928.7 Q25.1311 923.957 25.1311 915.936 Q25.1311 908.743 29.7781 904.574 Q34.3932 900.372 42.3504 900.372 M40.6316 906.229 Q35.8255 906.292 32.9609 908.934 Q30.0964 911.544 30.0964 915.873 Q30.0964 920.774 32.8654 923.734 Q35.6345 926.663 40.6634 927.108 L40.6316 906.229 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M31.4013 867.302 L12.1132 867.302 L12.1132 861.446 L61.6384 861.446 L61.6384 867.302 L56.2912 867.302 Q59.4741 869.149 61.0337 871.981 Q62.5615 874.782 62.5615 878.729 Q62.5615 885.19 57.4052 889.264 Q52.249 893.306 43.8463 893.306 Q35.4436 893.306 30.2873 889.264 Q25.1311 885.19 25.1311 878.729 Q25.1311 874.782 26.6907 871.981 Q28.2185 869.149 31.4013 867.302 M43.8463 887.259 Q50.3075 887.259 53.9996 884.617 Q57.6599 881.944 57.6599 877.297 Q57.6599 872.65 53.9996 869.976 Q50.3075 867.302 43.8463 867.302 Q37.3851 867.302 33.7248 869.976 Q30.0327 872.65 30.0327 877.297 Q30.0327 881.944 33.7248 884.617 Q37.3851 887.259 43.8463 887.259 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M61.6384 816.154 L14.1184 834.296 L14.1184 827.58 L54.1269 812.526 L14.1184 797.439 L14.1184 790.755 L61.6384 808.865 L61.6384 816.154 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M43.719 772.931 Q43.719 780.029 45.3422 782.766 Q46.9655 785.503 50.8804 785.503 Q53.9996 785.503 55.8457 783.466 Q57.6599 781.397 57.6599 777.864 Q57.6599 772.995 54.2224 770.066 Q50.7531 767.106 45.0239 767.106 L43.719 767.106 L43.719 772.931 M41.3 761.25 L61.6384 761.25 L61.6384 767.106 L56.2276 767.106 Q59.4741 769.111 61.0337 772.103 Q62.5615 775.095 62.5615 779.424 Q62.5615 784.898 59.5059 788.145 Q56.4186 791.36 51.2623 791.36 Q45.2467 791.36 42.1912 787.349 Q39.1357 783.307 39.1357 775.318 L39.1357 767.106 L38.5628 767.106 Q34.5205 767.106 32.3244 769.78 Q30.0964 772.422 30.0964 777.228 Q30.0964 780.283 30.8284 783.18 Q31.5605 786.076 33.0246 788.75 L27.6137 788.75 Q26.3724 785.535 25.7677 782.511 Q25.1311 779.488 25.1311 776.623 Q25.1311 768.889 29.1415 765.069 Q33.1519 761.25 41.3 761.25 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M12.1132 749.187 L12.1132 743.33 L61.6384 743.33 L61.6384 749.187 L12.1132 749.187 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M47.5702 731.681 L25.9905 731.681 L25.9905 725.825 L47.3474 725.825 Q52.4082 725.825 54.9545 723.851 Q57.4689 721.878 57.4689 717.931 Q57.4689 713.189 54.4452 710.451 Q51.4215 707.682 46.2016 707.682 L25.9905 707.682 L25.9905 701.826 L61.6384 701.826 L61.6384 707.682 L56.1639 707.682 Q59.4104 709.815 61.0019 712.648 Q62.5615 715.449 62.5615 719.172 Q62.5615 725.315 58.742 728.498 Q54.9226 731.681 47.5702 731.681 M25.1311 716.944 L25.1311 716.944 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M42.3504 659.271 L45.2149 659.271 L45.2149 686.198 Q51.2623 685.816 54.4452 682.57 Q57.5962 679.291 57.5962 673.467 Q57.5962 670.093 56.7687 666.942 Q55.9411 663.759 54.2861 660.64 L59.8242 660.64 Q61.161 663.791 61.8612 667.101 Q62.5615 670.411 62.5615 673.817 Q62.5615 682.347 57.5962 687.344 Q52.631 692.309 44.1646 692.309 Q35.4117 692.309 30.2873 687.599 Q25.1311 682.856 25.1311 674.835 Q25.1311 667.642 29.7781 663.473 Q34.3932 659.271 42.3504 659.271 M40.6316 665.128 Q35.8255 665.191 32.9609 667.833 Q30.0964 670.443 30.0964 674.772 Q30.0964 679.673 32.8654 682.633 Q35.6345 685.562 40.6634 686.007 L40.6316 665.128 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"279.026,94.9858 508.32,667.886 737.614,1113.48 966.909,1431.75 1196.2,1622.72 1425.5,1686.38 1654.79,1622.72 1884.09,1431.75 2113.38,1113.48 2342.67,667.886 2571.97,94.9858 \"/>\n</svg>\n```\n:::\n:::\n\n\n## Export and Submit the Notebook (1 point)\n\nThe last step is to export the notebook for submission to Gradescope (this section won't be repeated going forward, but the steps are the same).\n\nYou should see the following menu bar at the top of the VS Code window:\n![Notebook Menu Bar](figures/vs-code-top-bar.png)\n\n1. Click \"Run All\" at the top to execute all of the cells in order. **Please do not forget to do this before exporting and submitting or you may lose points because your code has not been executed or may have errors**.\n2. Click the ellipsis (\"...\") and select \"Export\". If you have LaTeX installed, you can click \"PDF\"; otherwise, click \"HTML.\" Save the file, and then when prompted, open the file. This should open the page in your browser; go to the print interface and save as a PDF.\n::: {.callout-tip}\nWhen printing to PDF, long lines will run off the edge of code cells, which may result in comments or code being hidden. If you see this, go back to the notebook and break up long lines into shorter onces (for example, see the comment in the above code cell) to ensure key parts of your results aren't missing.\n:::\n\nGreat! That's the basic workflow for every assignment in this course. \n\nNow you have your PDF that you can submit to Gradescope. Make sure that you tag pages corresponding to relevant problems to avoid a 10% penalty.\n\n",
    "supporting": [
      "lab01-solution_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}