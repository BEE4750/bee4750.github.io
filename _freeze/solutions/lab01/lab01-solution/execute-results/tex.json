{
  "hash": "3706212e5ab8b2c59585a1760cee2d58",
  "result": {
    "markdown": "---\ntitle: BEE 4750 Lab 1 Solution\n---\n\n\n\n> **Due Date**\n>\n> Friday, 9/1/23, 9:00pm\n\nThese solutions are not unique; other approaches are possible. But\nthey’re how I would solve the problems and might be helpful for Julia\nsyntax.\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n  Activating project at `~/Teaching/environmental-systems-analysis/website/solutions/lab01`\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\n```\n:::\n\n\n## Exercises (10 points)\n\n### Exercise 1 (3 points)\n\nGiven two numeric arrays `x` and `y`, write a function to compute their\ndot product if they have equal length, and return an error if not (this\nis useful for debugging!). Use the following code as a starting point.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction dot_product(x, y)\n    if length(x) == length(y)\n        return sum(x .* y) # use broadcasting to elementwise multiply\n    else\n        throw(DimensionMismatch(\"length of x not equal to length of y\"))\n    end\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ndot_product (generic function with 1 method)\n```\n:::\n:::\n\n\nHere are some tests to make sure your code works as intended. Tests like\nthese are useful to make sure everything works as intended. One reason\nto split your code up into functions is that it makes it straightforward\nto write tests to make sure each piece of your code works, which makes\nit easier to identify where errors are occuring.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndot_product([1 2 3], [4 5 6])\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n32\n```\n:::\n:::\n\n\nIf you know the value you should get, you can write a more formal test\nusing the `@assert` macro, which is a good way to “automate” checking\n(since you get an obvious error if the code doesn’t work as desired):\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n@assert dot_product([1 2 3], [4 5 6]) == 32\n```\n:::\n\n\nLet’s also make sure we get an error when the dimensions of the two\nvectors don’t match:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\ndot_product([1 2 3], [4 5])\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: DimensionMismatch: length of x not equal to length of y\n```\n:::\n:::\n\n\n### Exercise 2 (3 points)\n\nThis problem involves implementing Newton’s method for computing square\nroots; it was shamelessly copied from MIT’s [Introduction to\nComputational\nThinking](https://computationalthinking.mit.edu/Spring21/hw0/). You will\nuse a `while` loop instead of the `for` loop shown above.\n\nImplement the following algorithm in a function `newton_sqrt`:\n\nGiven $x > 0$:\n\n1.  Take a guess $a$.\n2.  Divide $x$ by $a$.  \n3.  Update $a$ as the average of $x/a$ and $a$.\n4.  Repeat until $x/a$ is within a tolerance of $\\varepsilon$ from $a$.\n5.  Return $a \\approx \\sqrt{x}$.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n# Write a function for Newton's method\n# x is the value we want to find the root of\n# a is the initial guess\n# ϵ is the tolerance\nfunction newton_sqrt(x, a, ϵ)\n    while abs(x/a - a) >= ϵ # loop until x/a is within tolerance\n        a = ((x/a) + a) / 2\n    end\n    return a\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nnewton_sqrt (generic function with 1 method)\n```\n:::\n:::\n\n\nUse your `newton_sqrt` function to compute $\\sqrt{2}$ to within a\ntolerance of $\\varepsilon = 0.01$.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nnewton_sqrt(2, 1, 0.01)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n1.4166666666666665\n```\n:::\n:::\n\n\n### Exercise 3: Making a Plot (3 points)\n\nWrite a function to compute the square of an integer `x`. Evaluate this\nfunction for integers between $x=-5$ and $x=5$ and make a plot of the\nsquared values (you can find a quick guide to making various types of\nplots [here](../tutorials/julia-plots.html)). Make sure to label your\naxes.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\n# Write square function\n# x is the integer which will be squared\nsquare_int(x) = x * x\n\n# Evaluate from x=-5 to x=5\nx = -5:1:5 # this creates an array of integers between -5 and 5\ny = square_int.(x)\n\n# Plot integer values without a legend\nplot(x, y, label=:false)\nxlabel!(\"Value\") # add x label; this could be done within the plot call\nylabel!(\"Squared Value\") # add y label\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n![](lab01-solution_files/figure-pdf/cell-10-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n## Export and Submit the Notebook (1 point)\n\nThe last step is to export the notebook for submission to Gradescope\n(this section won’t be repeated going forward, but the steps are the\nsame).\n\nYou should see the following menu bar at the top of the VS Code window:\n![Notebook Menu Bar](lab01-solution_files/figure-pdf/e6742144-17d5-42b2-82f9-b2b6cd5f92c8-1-figures/vs-code-top-bar.png)\n\n1.  Click “Run All” at the top to execute all of the cells in order.\n    **Please do not forget to do this before exporting and submitting or\n    you may lose points because your code has not been executed or may\n    have errors**.\n2.  Click the ellipsis (“…”) and select “Export”. If you have LaTeX\n    installed, you can click “PDF”; otherwise, click “HTML.” Save the\n    file, and then when prompted, open the file. This should open the\n    page in your browser; go to the print interface and save as a PDF.\n    ::: {.callout-tip} When printing to PDF, long lines will run off the\n    edge of code cells, which may result in comments or code being\n    hidden. If you see this, go back to the notebook and break up long\n    lines into shorter onces (for example, see the comment in the above\n    code cell) to ensure key parts of your results aren’t missing. :::\n\nGreat! That’s the basic workflow for every assignment in this course.\n\nNow you have your PDF that you can submit to Gradescope. Make sure that\nyou tag pages corresponding to relevant problems to avoid a 10% penalty.\n\n",
    "supporting": [
      "lab01-solution_files/figure-pdf"
    ],
    "filters": []
  }
}