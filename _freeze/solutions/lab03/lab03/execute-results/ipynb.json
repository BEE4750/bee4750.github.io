{
  "hash": "aabb99c3ebdfba97083dcbd930caba82",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Lab 3 Solutions\"\ndate: last-modified\nformat:\n    html:        \n        warning: true\n        error: true\n    ipynb:\n        warning: true\n        error: true\n        code-annotation: below\n    pdf:\n        include-in-header: \n           text: |\n            \\usepackage{fvextra}\n            \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n            \\DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\nexecute: \n    echo: true\nengine: julia\nformat-links: [pdf, ipynb]\n---\n\n\n\n\n\n\n\n\n::: {.content-visible when-format=\"ipynb\"}\n**Name**:\n\n**ID**:\n:::\n\n::: {.callout-important icon=\"false\"}\n### Due Date\n\nWednesday, 10/16/24, 9:00pm\n:::\n\n::: {.content-visible when-format=\"html\"}\n::: callout-caution\nIf you are enrolled in the course, make sure that you use the GitHub Classroom link provided in Ed Discussion, or you may not be able to get help if you run into problems.\n\nOtherwise, you can [find the Github repository here]({{< var github_org.repo >}}/lab03).\n:::\n:::\n\n## Setup\n\nThe following code should go at the top of most Julia scripts; it will load the local package environment and install any needed packages. You will see this often and shouldn't need to touch it.\n\n\n\n\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n:::\n\n\n\n::: {#4 .cell execution_count=1}\n``` {.julia .cell-code}\nusing JuMP # optimization modeling syntax\nusing HiGHS # optimization solver\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n## Overview\n\n## Exercise (3 points)\n\nYour task is to decide how much lumber to produce to maximize profit from wood sales. You can purchase wood from a managed forest, which consists of spruce (320,000 bf) and fir (720,000 bf). Spruce costs $\\$0.12$ per bf to purchase and fir costs $\\$0.08$ per bf.\n\nAt the lumber mill, wood can be turned into plywood of various grades (see @tbl-inputs for how much wood of each type is required for and the revenue from each grade). Any excess wood is sent to be recycled into particle board, which yields no revenue for the mill. \n\n\n| Plywood Grade | Inputs (bf/bf plywood) | Revenue (\\$/1000 bf) |\n|:-------------:|:----------------------:|:--------------------:|\n|       1       |   0.5 (S) + 1.5 (F)    |         400          |\n|       2       |   1.0 (S) + 2.0 (F)    |         520          |\n|       3       |   1.5 (S) + 2.0 (F)    |         700          |\n\n: Wood inputs and revenue by plywood grade. S refers to spruce inputs, F fir inputs. {#tbl-inputs}\n\n\nFirst, we need to identify our decision variables. While there are several options, we will use $G_i$, the amount of each grade the mill produces (in 1000 bf). \n\nUsing these decision variables, formulate a linear program to maximize the profit of the mill subject to the supply constraints on spruce and fir.\n\n***Solution***:\n\nWith these decision variables, we need to calculate the amount of profit yielded by a bf of each grade of plywood.\n\n1. G1 sells for \\$400 per 1000 bf and consumes 500 bf of spruce and 1500 bf of fir, costing \\$60 from spruce and \\$120 from fir, yielding a profit of \\$220/(1000 bf).\n2. G2 sells for \\$520 per 1000 bf and consumes 1000 bf of spruce and 2000 bf of fir, costing \\$120 from spruce and \\$160 from fir, yielding a profit of \\$240/(1000 bf).\n3. G3 sells for \\$700 per 1000 bf and consumes 1500 bf of spruce and 2000 bf of fir, costing \\$180 from spruce and \\$160 from fir, yielding a profit of \\$360/(1000 bf).\n\nThen the objective is\n$$\\max_{G_1, G_2, G_3} 220 G_1 + 240 G_2 + 360 G_3.$$\n\nWe can only purchase 320,000 bf of spruce and 720,000 bf of fir. These become the following constraints (in terms of 1,000 bf):\n\n\\begin{align*}\n0.5G_1 + G_2 + 1.5 G_3 &\\leq 320  \\\\\n1.5G_1 + 2G_2 + 2G_3 & \\leq 720\n\\end{align*}\n\nFinally, we have non-negativity (or boundary) constraints on $G_i$:\n$$G_1, G_2, G_3 \\geq 0.$$\n\nThis makes the final optimization problem:\n\n\\begin{equation}\n\\begin{aligned}\n& \\max_{G_1, G_2, G_3} & 220 G_1 + 240 G_2 + 360 G_3\\\\\n&\\text{subject to} & \\\\\n& & 0.5G_1 + G_2 + 1.5 G_3 \\leq 320\\\\\n& & 1.5G_1 + 2G_2 + 2G_3 & \\leq 720\\\\\n& & G_1, G_2, G_3 \\geq 0\n\\end{aligned} \\label{eq:problem}\n\\end{equation}\n\nNext, we want to convert the optimization problem \\eqref{eq:problem} into `JuMP` syntax, which we do below.\n\n\n\n\n\n\n\n\n::: {#6 .cell execution_count=1}\n``` {.julia .cell-code}\nforest_model = Model(HiGHS.Optimizer) # initialize model object\n@variable(forest_model, G[1:3] >= 0) # define variables and add non-negativity constraints\n@objective(forest_model, Max, 220G[1] + 240G[2] + 360G[3])\n@constraint(forest_model, spruce, 0.5G[1] + G[2] + 1.5G[3] <= 320)\n@constraint(forest_model, fir, 1.5G[1] + 2G[2] + 2G[3] <= 720)\nprint(forest_model) # this outputs a nicely formatted summary of the model so you can check your specification\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMax 220 G[1] + 240 G[2] + 360 G[3]\nSubject to\n spruce : 0.5 G[1] + G[2] + 1.5 G[3] ≤ 320\n fir : 1.5 G[1] + 2 G[2] + 2 G[3] ≤ 720\n G[1] ≥ 0\n G[2] ≥ 0\n G[3] ≥ 0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nNext, to optimize, use the `optimize!()` function:\n\n\n\n\n\n\n\n\n::: {#8 .cell execution_count=1}\n``` {.julia .cell-code}\noptimize!(forest_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning HiGHS 1.7.2 (git hash: 5ce7a2753): Copyright (c) 2024 HiGHS under MIT licence terms\nCoefficient ranges:\n  Matrix [5e-01, 2e+00]\n  Cost   [2e+02, 4e+02]\n  Bound  [0e+00, 0e+00]\n  RHS    [3e+02, 7e+02]\nPresolving model\n2 rows, 3 cols, 6 nonzeros  0s\n2 rows, 3 cols, 6 nonzeros  0s\nPresolve : Reductions: rows 2(-0); columns 3(-0); elements 6(-0) - Not reduced\nProblem not reduced by presolve: solving the LP\nUsing EKK dual simplex solver - serial\n  Iteration        Objective     Infeasibilities num(sum)\n          0    -8.1999929744e+02 Ph1: 2(8.5); Du: 3(819.999) 0s\n          2     1.1200000000e+05 Pr: 0(0) 0s\nModel   status      : Optimal\nSimplex   iterations: 2\nObjective value     :  1.1200000000e+05\nHiGHS run time      :          0.00\n```\n:::\n:::\n\n\n\n::: {#10 .cell execution_count=1}\n``` {.julia .cell-code}\n@show value.(G);\n@show objective_value(forest_model);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue.(G) = [352.0, 0.0, 96.0]\nobjective_value(forest_model) = 112000.0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nSo the optimal result is to produce 96,000 bf of grade 3 plywood and 352,000 bf of grade 1 plywood, which yields a profit of \\$112,000. \n\n\n\n\n\n\n\n\n::: {#12 .cell execution_count=1}\n``` {.julia .cell-code}\n@show shadow_price(spruce);\n@show shadow_price(fir);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshadow_price(spruce) = 80.0\nshadow_price(fir) = 120.0\n```\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nBoth the spruce and fir constraints are binding, as evidenced by their non-zero shadow prices. \n\nWhy does it make sense that we aren't producing any grade 2 plywood even though it produces more profit than grade 1? The production of grade 3, which is the highest-profit grade, consumes 144,000 bf of spruce and 192,000 bf of fir. If we produced as much grade 2 plywood as possible, which would be 176,000 bf, we would make a profit of \\$76,800. Since we can produce far more grade 1 plywood, the extra \\$20/(1,000 bf) profit from producing grade 2 is not enough to compensate for the loss of production volume.\n\n## References\n\nPut any consulted sources here, including classmates you worked with/who helped you.\n\n---\njupyter:\n  kernelspec:\n    display_name: Julia\n    name: julia\n    language: julia\n  kernel_info:\n    name: julia\n  language_info:\n    name: julia\n    version: 1.10.4\n    codemirror_mode: julia\n---\n",
    "supporting": [
      "lab03_files/figure-ipynb"
    ],
    "filters": []
  }
}