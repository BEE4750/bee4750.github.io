{
  "hash": "37e3c2066980c3c46d0d5a16b10bced5",
  "result": {
    "markdown": "---\ntitle: BEE 4750 Lab 3 Solution\nformat:\n  html:\n    warning: true\n    error: true\n    mermaid:\n      theme: forest\n  ipynb:\n    warning: true\n    error: true\n    code-annotation: below\nformat-links: []\n---\n\n## Setup\n\nThe following code should go at the top of most Julia scripts; it will load the local package environment and install any needed packages. You will see this often and shouldn't need to touch it.\n\n::: {#307ec3dd .cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n:::\n\n\n::: {#a3b7f2b7 .cell execution_count=2}\n``` {.julia .cell-code}\nusing JuMP # optimization modeling syntax\nusing HiGHS # optimization solver\nusing Plots # plotting\n```\n:::\n\n\n::: {.cell .markdown}\n## Overview\n\nIn this lab, you will write and solve a resource allocation example using `JuMP.jl`. `JuMP.jl` provides an intuitive syntax for writing, solving, and querying optimization problems.\n\nFor an example of using `JuMP.jl` to solve linear programs, see [the relevant tutorial on the class website](https://viveks.me/environmental-systems-analysis/tutorials/julia-jump.html).\n:::\n\n::: {.cell .markdown}\n## Introduction\n\nYour task is to decide how much lumber to produce to maximize profit from wood sales. You can purchase wood from a managed forest, which consists of spruce (320,000 bf) and fir (720,000 bf). Spruce costs \\$0.12 per bf to purchase and fir costs \\$0.08 per bf.\n\nAt the lumber mill, wood can be turned into plywood of various grades (see @tbl-inputs for how much wood of each type is required for and the revenue from each grade). Any excess wood is sent to be recycled into particle board. This resource allocation problem is diagrammed in @fig-schematic.\n\n\n| Plywood Grade | Inputs (bf/bf plywood) | Revenue (\\$/1000 bf) |\n|:-------------:|:----------------------:|:--------------------:|\n|       1       |   0.5 (S) + 1.5 (F)    |         400          |\n|       2       |   1.0 (S) + 2.0 (F)    |         520          |\n|       3       |   1.5 (S) + 2.0 (F)    |         700          |\n\n: Wood inputs and revenue by plywood grade. S refers to spruce inputs, F fir inputs. {#tbl-inputs}\n\n:::\n\n\n\n```{mermaid}\n%%| label: fig-schematic\n%%| fig-cap: \"Flowchat of the resource allocation problem in this lab.\"\n%%| fig-width: 100%\n\nflowchart LR\n    A[Spruce] -- $0.12 per bf --> C{Lumber Mill}\n    B[Fir] -- $0.08 per bf --> C\n    C --> P(Plywood)\n    C -- Wood Excess --> D{Recycle}\n    D --> E(Particle Board)\n    E -- $0.03 per bf net --> S[Sell]\n    P -- Price depends on grade --> S\n```\n\n\n\n## Problems (10 points)\n\n::: {.cell .markdown}\n### Problem 1: Problem Formulation (5 points)\n\nIn this problem, you will go through the steps of formulating a linear program for this problem.\n:::\n\n::: {.cell .markdown}\n#### Problem 1.1 (1 point)\n\nWhat are your decision variables? Clearly define your notation, including what variables you are using, what they mean, and what their units are.\n:::\n\n***Solution***: \n\nA good choice for our decision variables are $G_1$, $G_2$, and $G_3$, each of which correspond to a 1,000 bf of each plywood grade (for convenience). Note that we may not need to consider the particle board --- it's money-losing, and will just be where we send excess spruce and fir (where we have to buy a fraction of a unit).\n\nWe don't have to worry about other notation, as we can express the wood needs in terms of the plywood grade quantities.\n\n::: {.cell .markdown}\n#### Problem 1.2 (1 point)\n\nDerive your objective function. Support your function with justifications and/or equations as necessary. You will not receive credit just for the function alone.\n:::\n\n***Solution***:\n\nOur objective is to maximize profit, so for each grade of plywood we want to calculate its profit.\n\n- Grade 1 (per 1,000 bf): $\\$400 - (0.5 \\times \\$120) - (1.5 \\times \\$80) = \\$220$\n- Grade 2 (per 1,000 bf): $\\$520 - (1 \\times \\$120) - (2 \\times \\$80) = \\$240$\n- Grade 3 (per 1,000 bf): $\\$700 - (1.5 \\times \\$120) - (2 \\times \\$80) = \\$360$\n\nSo our objective is then $$\\max_{G_1, G_2, G_3} 220 G_1 + 240 G_2 + 360 G_3.$$\n\n::: {.cell .markdown}\n#### Problem 1.3 (2 point)\n\nDerive any needed constraints. Support your function with justifications and/or equations as necessary. You will not receive credit just for the final constraints alone.\n:::\n\n***Solution***:\n\nWe have two constraints on the supply of spruce and fir, which are capped at 320,000 bf and 720,000 bf, respectively:\n\n- (Spruce): $0.5G_1 + G_2 + 1.5 G_3 \\leq 320$\n- (Fir): $1.5 G_1 + 2G_2 + 2G_3 \\leq 720$.\n\nThen we have non-negativity constraints, since we can't produce negative plywood:\n$G_1, G_2, G_3 \\geq 0$.\n\n::: {.cell .markdown}\n#### Problem 1.4 (1 point)\n\nPut this optimization problem in mathematical programming form. For an example of the syntax for this, see lines 82--91 [here](https://github.com/vsrikrish/environmental-systems-analysis/blob/Fall23/tutorials/julia-jump.qmd).\n:::\n\n***Solution***:\n\n\\begin{equation}\n\\begin{aligned}\n& \\max_{G_1, G_2, G_3} & 220 G_1 + 240 G_2 + 360 G_3\\\\\n&\\text{subject to} & \\\\\n& & 0.5G_1 + G_2 + 1.5 G_3 \\leq 320\\\\\n& & 1.5 G_1 + 2G_2 + 2G_3 \\leq 720\\\\\n& & G_1, G_2, G_3 \\geq 0\n\\end{aligned}\n\\end{equation}\n\n### Problem 2: Find the Solution (5 points)\n\n::: {.cell .markdown}\n#### Problem 2.1 (2 points)\n\nCode your linear program using `JuMP`. Feel free to consult [the website's `JuMP` tutorial](https://viveks.me/environmental-systems-analysis/tutorials/julia-jump.html) for syntax help.\n:::\n\n***Solution***:\n\nWe could write out all of the variables one at a time, but here I'll use the more compact vectorized notation for illustration. The constraints we may want to leave separate because they're a bit different, but you could vectorize those as well.\n\n::: {#04424b59 .cell execution_count=3}\n``` {.julia .cell-code}\nforestry_model = Model(HiGHS.Optimizer) # initialize model object\n# define variables\nI = 1:3 # three decision variables in this set\n@variable(forestry_model, G[i in I] >= 0) # decision variables are bounded below by zero\n@objective(forestry_model, Max, 220G[1] + 240G[2] + 360G[3])\n@constraint(forestry_model, spruce_limit, 0.5G[1] + G[2] + 1.5G[3] <= 320)\n@constraint(forestry_model, fir_limit, 1.5G[1] + 2G[2] + 2G[3] <= 720)\nprint(forestry_model) # print to make sure we entered this correctly\n```\n\n::: {.cell-output .cell-output-display}\n$$ \\begin{aligned}\n\\max\\quad & 220 G_{1} + 240 G_{2} + 360 G_{3}\\\\\n\\text{Subject to} \\quad & 0.5 G_{1} + G_{2} + 1.5 G_{3} \\leq 320\\\\\n & 1.5 G_{1} + 2 G_{2} + 2 G_{3} \\leq 720\\\\\n & G_{1} \\geq 0\\\\\n & G_{2} \\geq 0\\\\\n & G_{3} \\geq 0\\\\\n\\end{aligned} $$\n:::\n:::\n\n\n::: {.cell .markdown}\n#### Problem 2.2 (1 points)\n\nFind the solution to your program and find the optimal values of the decision variables.\n:::\n\n***Solution***:\n\n::: {#97c519ac .cell execution_count=4}\n``` {.julia .cell-code}\noptimize!(forestry_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRunning HiGHS 1.5.3 [date: 1970-01-01, git hash: 45a127b78]\nCopyright (c) 2023 HiGHS under MIT licence terms\nPresolving model\n2 rows, 3 cols, 6 nonzeros\n2 rows, 3 cols, 6 nonzeros\nPresolve : Reductions: rows 2(-0); columns 3(-0); elements 6(-0) - Not reduced\nProblem not reduced by presolve: solving the LP\nUsing EKK dual simplex solver - serial\n  Iteration        Objective     Infeasibilities num(sum)\n          0    -8.1999929744e+02 Ph1: 2(8.5); Du: 3(819.999) 0s\n          2     1.1200000000e+05 Pr: 0(0) 0s\nModel   status      : Optimal\nSimplex   iterations: 2\nObjective value     :  1.1200000000e+05\nHiGHS run time      :          0.00\n```\n:::\n:::\n\n\nNow let's find the decision variable values:\n\n::: {#f9b6a00c .cell execution_count=5}\n``` {.julia .cell-code}\nvalue.(G)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n1-dimensional DenseAxisArray{Float64,1,...} with index sets:\n    Dimension 1, 1:3\nAnd data, a 3-element Vector{Float64}:\n 352.0\n   0.0\n  96.0\n```\n:::\n:::\n\n\nSo we want to produce 352,000 bf of Grade 1 plywood, 0 bf of Grade 2 plywood, and 96 bf of Grade 3 plywood, which would get us a total profit of \\$112,000.\n\n::: {.cell .markdown}\n#### Problem 2.3 (1 point)\n\nHow would your profit change if you could buy 1,000 additional bf of spruce? \n:::\n\n***Solution***:\n\n::: {#3ac3e32f .cell execution_count=6}\n``` {.julia .cell-code}\nshadow_price(spruce_limit)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n80.0\n```\n:::\n:::\n\n\nThis value is the additional profit from having one additional \"unit\" of spruce, relative to the constraint. The constraint was defined in terms of 1,000 bf of spruce, so the shadow price is already the right value. So we would get an additional \\$80 of profit from an extra 1,000 bf of spruce.\n\n::: {.cell .markdown}\n#### Problem 2.4 (1 point)\n\nWould you prefer to have 2,000 additional bf of spruce or 1,000 additional bf of fir?\n:::\n\n***Solution***:\n\nTo answer this, we need to find the shadow price of the fir constraint.\n\n::: {#8846e829 .cell execution_count=7}\n``` {.julia .cell-code}\nshadow_price(fir_limit)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n120.0\n```\n:::\n:::\n\n\nThis value of \\$120 is less than twice the shadow price of spruce, which is \\$160, so we would rather have 2,000 bf of spruce.\n\n## References\n\nPut any consulted sources here, including classmates you worked with/who helped you.\n\n---\njupyter:\n  kernelspec:\n    display_name: Julia 1.9.2\n    language: julia\n    name: julia-1.9\n  language_info:\n    file_extension: .jl\n    mimetype: application/julia\n    name: julia\n    version: 1.9.2\n---\n",
    "supporting": [
      "lab03-solution_files/figure-ipynb"
    ],
    "filters": []
  }
}