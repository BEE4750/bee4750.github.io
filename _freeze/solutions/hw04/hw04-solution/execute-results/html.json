{
  "hash": "1474e980844a41cb187f8315c8147054",
  "result": {
    "markdown": "---\ntitle: 'BEE 4750 Homework 4: Generating Capacity Expansion'\nformat:\n  html:\n    warning: true\n    error: true\n  pdf:\n    warning: true\n    error: true\n    code-annotation: below\nformat-links: []\n---\n\n::: {.content-visible when-format=\"ipynb\"}\n**Name**:\n\n**ID**:\n:::\n\n::: {.callout-important icon=false}\n### Due Date\n\nFriday, 10/27/23, 9:00pm\n:::\n\n::: {.content-visible when-format=\"html\"}\n\n:::{.callout-caution}\n\nIf you are enrolled in the course, make sure that you use the GitHub Classroom link provided in Ed Discussion, or you may not be able to get help if you run into problems.\n\nOtherwise, you can [find the Github repository here]({{< var github_org.repo >}}/hw04).\n\n:::\n\n:::\n\n## Overview\n\n### Instructions\n\n- In Problem 1, you will formulate, solve, and analyze a standard generating capacity expansion problem.\n- In Problem 2, you will add a CO~2~ constraint to the capacity expansion problem and identify changes in the resulting solution.\n\n### Load Environment\n\nThe following code loads the environment and makes sure all needed packages are installed. This should be at the start of most Julia scripts.\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing JuMP\nusing HiGHS\nusing DataFrames\nusing Plots\nusing Measures\nusing CSV\nusing MarkdownTables\n```\n:::\n\n\n## Problems (Total: 100 Points)\n\nFor this problem, we will use hourly load (demand) data from 2013 in New York's Zone C (which includes Ithaca). The load data is loaded and plotted below in @fig-demand.\n\n::: {#fig-demand .cell execution_count=3}\n``` {.julia .cell-code}\n# load the data, pull Zone C, and reformat the DataFrame\nNY_demand = DataFrame(CSV.File(\"data/2013_hourly_load_NY.csv\"))\nrename!(NY_demand, :\"Time Stamp\" => :Date)\ndemand = NY_demand[:, [:Date, :C]]\nrename!(demand, :C => :Demand)\ndemand[:, :Hour] = 1:nrow(demand)\n\n# plot demand\nplot(demand.Hour, demand.Demand, xlabel=\"Hour of Year\", ylabel=\"Demand (MWh)\", label=:false)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: ArgumentError: \"data/2013_hourly_load_NY.csv\" is not a valid file or doesn't exist\n```\n:::\n:::\n\n\nNext, we load the generator data. This data includes fixed costs (\\$/MW installed), variable costs (\\$/MWh generated), and CO~2~ emissions intensity (tCO~2~/MWh generated).\n\n::: {#tbl-generators .cell tbl-cap='Generator type data, including fixed costs ($/MW installed), variable costs ($/MWh generated), and CO~2~ emissions intensity (tCO~2~/MWh generated).' execution_count=4}\n``` {.julia .cell-code}\ngens = DataFrame(CSV.File(\"data/generators.csv\"))\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: ArgumentError: \"data/generators.csv\" is not a valid file or doesn't exist\n```\n:::\n:::\n\n\nFinally, we load the hourly solar and wind capacity factors, which are plotted in @fig-cf. These tell us the fraction of installed capacity which is expected to be available in a given hour for generation (typically based on the average meteorology).\n\n::: {#fig-cf .cell layout-nrow='2' execution_count=5}\n``` {.julia .cell-code}\n# load capacify factors into a DataFrame\ncap_factor = DataFrame(CSV.File(\"data/wind_solar_capacity_factors.csv\"))\n\n# plot January capacity factors\np1 = plot(cap_factor.Wind[1:(24*31)], label=\"Wind\")\nplot!(cap_factor.Solar[1:(24*31)], label=\"Solar\")\nxaxis!(\"Hour of the Month\")\nyaxis!(\"Capacity Factor\")\n\np2 = plot(cap_factor.Wind[4344:4344+(24*31)], label=\"Wind\")\nplot!(cap_factor.Solar[4344:4344+(24*31)], label=\"Solar\")\nxaxis!(\"Hour of the Month\")\nyaxis!(\"Capacity Factor\")\n\ndisplay(p1)\ndisplay(p2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: ArgumentError: \"data/wind_solar_capacity_factors.csv\" is not a valid file or doesn't exist\n```\n:::\n\nHourly solar and wind capacity factors.\n:::\n\n\nYou have been asked to develop a generating capacity expansion plan for the utility in Riley, NY, which currently has no existing electrical generation infrastructure. The utility can build any of the following plant types: geothermal, coal, natural gas combined cycle gas turbine (CCGT), natural gas combustion turbine (CT), solar, and wind. \n\nWhile coal, CCGT, and CT plants can generate at their full installed capacity, geothermal plants operate at maximum 85% capacity, and solar and wind available capacities vary by the hour depend on the expected meteorology. The utility will also penalize any non-served demand at a rate of $1000/MWh.  \n\n::: {.callout-tip}\n## Significant Digits\n\nUse `round(x; digits=n)` to report values to the appropriate precision!\n:::\n\n::: {.callout-tip}\n## Getting Variable Output Values\n\n`value.(x)` will report the values of a `JuMP` variable `x`, but it will return a special container which holds other information about `x` that is useful for `JuMP`. This means that you can't use this output directly for further calculations. To just extract the values, use `value.(x).data`.\n:::\n\n\n::: {.cell .markdown}\n### Problem 1 (22 points)\n\nYour first task is to find a capacity expansion plan which minimizes total costs of investment and operation.\n:::\n\n::: {.cell .markdown}\n#### Problem 1.1 (2 points)\n\nIdentify and define the decision variables for the problem. Make sure to include units.\n\n:::\n\n***Solution***:\n\nWe need the following notation:\n\n- $x_g$: built capacity for generator $g$ in MW;\n- $y_{g,t}$: generated power from generator $g$ in time period $t$ in MWh;\n- $NSE_t$: unserved energy in time $t$.\n\n::: {.cell .markdown}\n#### Problem 1.2 (3 points)\n\nFormulate the objective function. Make sure to include any needed derivations or justifications for your equation(s) and define any additional required notation beyond that introduced in Problem 1.1.\n\n:::\n\n***Solution***:\n\nThe objective is to minimize total costs ($C$) of expansion and generation, which we can split into fixed costs ($\\text{FixedCost}$, \\$/MW installed), variable costs of generation (\\$/MWh generated), and the non-served energy penalty (\\$/MWh unserved).\n\nWe can write this as\n$$\\min_{x_g, y_{g,t}} \\sum_{g \\in \\mathcal{G}} \\text{FixedCost}_g \\times x_g + \\sum_{t \\in \\mathcal{T}} \\text{VarCost}_g \\times y_{g,t} + \\sum_{t \\in \\mathcal{T}} \\text{NSECost}_t \\times NSE_t,$$\nwhere $\\mathcal{G}$ is the set of generators and $\\mathcal{T}$ is the set of time periods.\n\n::: {.cell .markdown}\n#### Problem 1.3 (4 points)\n\nDerive all relevant constraints. Make sure to include any needed justifications or derivations.\n:::\n\n***Solution***:\n\nThe first constraint is non-negativity; all decision variables must be greater than or equal to zero, so $x_g \\geq 0$, $y_{g,t} \\geq 0$, and $NSE_t \\geq 0$.\n\nSecond, the amount of generated power is limited by the capacity of that plant type. This is slightly more complicated because we need to account for the variable capacity factors of the wind and solar plants. We can summarize this with $$y_{g,t} \\leq x_g \\times cf_{g,t}$$ for all $t \\in \\mathcal{T}$, where $cf_{g,t}$ is the capacity factor for plant type $g$ in time $t$. We can either just assume that $cf_{g,t} = 1$ for non-variable plants $g$ (other than geothermal, where $cf = 0.85$) or we can split this into multiple constraints.\n\nThird, the sum of generated power and un-served energy must be equal to the demand in that time period: $$\\sum_{g \\in G} y_{g,t} + NSE_t = d_t$$ for all $t \\in \\mathcal{T}$, where $d_t$ is the demand in MWh.\n\n\n::: {.cell .markdown}\n#### Problem 1.4 (3 points)\n\nImplement your optimization problem in `JuMP`.\n\n:::\n\n***Solution***:\n\nAs mentioned above, we can either split the capacity constraint into multiple statements, or we can set up a single capacity factor matrix which combines the variable wind and solar capacity factors and constant values of 1 for the other plant types. We will do the second in this solution, but the first would get you the same answers (you would just have one-two more constraints defined, depending on the specifics).\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n# define sets\nG = 1:nrow(gens)\nT = 1:nrow(demand)\n\n# set up auxiliary parameters\nNSECost = 1000 # cost of unserved energy\n# capacity factor matrix\ncf_constant = ones(T[end], G[end-2]) # last two plants are wind and solar, so drop those\ncf_constant[:, 1] .= 0.85\ncf = hcat(cf_constant, cap_factor[!, :Wind], cap_factor[!, :Solar]) # append wind and solar capacity factors\n\n\n# set up model object\ngencap = Model(HiGHS.Optimizer) # use the HiGHS LP solver\n\n# define variables\n@variable(gencap, x[g in G] >= 0) # installed capacity\n@variable(gencap, y[g in G, t in T] >= 0) # generated power\n@variable(gencap, nse[t in T] >= 0) # unserved energy\n\n# define objective: minimize sum of fixed costs, variable costs of generation, \n# and non-served energy penalty\n@objective(gencap, Min, sum(gens[:, :FixedCost] .* x) + \n    sum(gens[:, :VarCost] .* [sum(y[g, :]) for g in G]) + \n    NSECost * sum(nse))\n\n# define constraints\n@constraint(gencap, capacity[g in G, t in T], y[g, t] <= x[g] * cf[t, g]) # capacity constraint\n@constraint(gencap, demand_met[t in T], sum(y[:, t]) + nse[t] == demand.Demand[t]) # demand constraint\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `gens` not defined\n```\n:::\n:::\n\n\n::: {.cell .markdown}\n\n#### Problem 1.5 (5 points)\n\nFind the optimal solution. How much should the utility build of each type of generating plant? What will the total cost be? How much energy will be non-served?\n:::\n\n***Solution***:\n\nFirst, let's find the solution.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\noptimize!(gencap);\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `gencap` not defined\n```\n:::\n:::\n\n\nWe can find how much generating capacity we want to build for each plant type by querying the relevant decision variable `x`. We will turn this into a DataFrame to make the presentation easier.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nbuilt_cap = value.(x).data\nDataFrame(Plant=gens.Plant, Capacity=round.(built_cap; digits=0))\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `x` not defined\n```\n:::\n:::\n\n\nSimilarly, we can find the total amount of un-served energy by adding up `nse[t]`.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nsum(value.(nse).data)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `nse` not defined\n```\n:::\n:::\n\n\nThis plan results in 6000 MWh of un-served energy throughout the year.\n\nFinally, to get the total cost of the system we can use `objective_value`:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nobjective_value(gencap)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `gencap` not defined\n```\n:::\n:::\n\n\nThe total cost of this plan is $\\$6.4 \\times 10^8$.\n\n::: {.cell .markdown}\n\n#### Problem 1.6 (5 points)\n\nWhat fraction of annual generation does each plant type produce? How does this compare to the breakdown of built capacity that you found in Problem 1.5? Do these results make sense given the generator data?\n\n:::\n\n***Solution***:\n\nTo find the total annual generation from each plant, we want to sum up the values of the variable `y` along the time dimension.\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nannual_gen = [sum(value.(y[g, :]).data) for g in G]\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `G` not defined\n```\n:::\n:::\n\n\nWe can then convert this into fractions of total generation, which we can compare to fractions of built capacity.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nannual_gen_frac = annual_gen ./ sum(annual_gen)\nbuilt_frac = built_cap ./ sum(built_cap)\nDataFrame(Plant=gens[!, :Plant], Built=built_frac, Generated=annual_gen_frac)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `annual_gen` not defined\n```\n:::\n:::\n\n\nOne observation is that that we have to overbuild the fraction of combustion turbine gas plants (NG CT) as these are needed when wind and solar is low, but otherwise are less commonly used. We also have to slightly overbuild wind and solar relative to the power generated by these technologies, as although they are free to generate, they can be severely constrained in terms of capacity in a given hour.\n\n::: {.cell .markdown}\n### Problem 2 (18 points)\n\nThe NY state legislature is considering enacting an annual CO~2~ limit, which for the utility would limit the emissions in its footprint to 1.5 MtCO~2~/yr.\n\n:::\n\n::: {.cell .markdown}\n#### Problem 2.1 (3 points)\n\nWhat changes are needed to your linear program from Problem 1? Re-formulate any part of the problem that has changed.\n\n:::\n\n***Solution***:\n\nThe only change is to add in a constraint for the CO~2~ limit. Let $emis_g$ be the CO~2~ emissions factor (tCO~2~/MWh generated) for plant $g$. Then this constraint is:\n$$\\sum_{g \\in G} emis_g \\times \\sum_{t \\in T} y_{g,t} \\leq 1500000.$$\n\n::: {.cell .markdown}\n#### Problem 2.2 (3 points)\n\nImplement the new optimization problem in `JuMP`. \n\n:::\n\n***Solution***:\n\nWe can actually just add a new constraint to the `JuMP` model (just be careful when evaluating the notebook cells!), but if you re-formulated the model object with a new name, that works as well.\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n# add in the new constraint\n@constraint(gencap, co2, sum(gens[:, :Emissions] .* [sum(y[g, :]) for g in G]) <= 1500000);\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `gencap` not defined\n```\n:::\n:::\n\n\n::: {.cell .markdown}\n#### Problem 2.3 (5 points)\n\nFind the optimal solution. How much should the utility build of each type of generating plant? What is different from your plan from Problem 1? Do these changes make sense?\n\n:::\n\n***Solution***:\n\nFind the new solution:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\noptimize!(gencap)\nbuilt_cap_co2 = value.(x).data\nDataFrame(Plant=gens.Plant, Capacity=round.(built_cap_co2; digits=0))\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `gencap` not defined\n```\n:::\n:::\n\n\nTo meet the emissions constraint, we build a reduced amount of natural gas, which creates some interesting changes in the rest of the mix. This natural gas capacity is replaced by a combination of 271 MW of geothermal (which was previously zero), an additional 2000 MW of wind capacity, and slightly more solar. These massive increases in wind are required to ensure adequate generation when solar is low, when otherwise we could rely on gas for that purpose.\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nsum(value.(nse).data)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `nse` not defined\n```\n:::\n:::\n\n\nWe also increase the amount of non-served energy from Problem 1 by about 50% due to the reduced amount of built natural gas capacity.\n\n::: {.cell .markdown}\n#### Problem 2.4 (5 points)\n\nWhat fraction of annual generation does each plant type produce? How does this compare to the breakdown of built capacity that you found in Problem 2.3? What are the differences between these results and your plan from Problem 1?\n:::\n\n***Solution***:\n\nWe can just repeat the process from Problem 1.6.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nannual_gen_co2 = [sum(value.(y[g, :]).data) for g in G]\nannual_gen_frac_co2 = annual_gen_co2 ./ sum(annual_gen_co2)\nbuilt_frac_co2 = built_cap_co2 ./ sum(built_cap_co2)\nDataFrame(Plant=gens[!, :Plant], Built_CO2=built_frac_co2, Generated_CO2=annual_gen_frac_co2, Built_Old=built_frac, Generated_Old=annual_gen_frac)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `G` not defined\n```\n:::\n:::\n\n\nThe impact of the CO~2~ constraint is similar to Problem 2.3: we rely on geothermal and wind heavily, so the total generation percentages is higher than previously (and for geothermal, higher than its built capacity percentage). Meanwhile, NG CT generation is limited to emergency shortfalls, and it represents only 1% of total generation. We also use NG CCGT a lot less, even though its built capacity isn't much lower in absolute terms.\n\n::: {.cell .markdown}\n#### Problem 2.5 (2 points)\n\nWhat would the value to the utility be of allowing it to emit an additional 1000 tCO~2~/yr? An additional 5000?\n\n:::\n\n***Solution***:\n\nTo answer this, we want to find the shadow price of the CO~2~ emissions constraint. \n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nshadow_price(co2)\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `co2` not defined\n```\n:::\n:::\n\n\nThus, every extra tCO~2~/yr allowed would reduce the cost of generation by \\$183. So an extra 1000 tCO~2~/yr would correspond to a value of \\$183,000, since the objective and constraints are linear. And an extra 5000 tCO~2~/yr would be worth \\$915,000.\n\n::: {.cell .markdown}\n## References\n\nList any external references consulted, including classmates.\n:::\n\n",
    "supporting": [
      "hw04-solution_files"
    ],
    "filters": [],
    "includes": {}
  }
}