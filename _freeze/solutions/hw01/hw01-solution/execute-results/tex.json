{
  "hash": "52d409ab7e3de0c9b3037af6cb8a0ca2",
  "result": {
    "markdown": "---\ntitle: Homework 1 Solutions\nformat:\n  html:\n    warning: true\n    error: true\n  pdf:\n    warning: true\n    error: true\n---\n\n::: {.callout-important icon=false}\n### Due Date\n\nFriday, 9/8/23, 9:00pm\n:::\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\nusing GraphRecipes\nusing LaTeXStrings\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n[ Info: Precompiling GraphRecipes [bd48cda9-67a9-57be-86fa-5b3c104eda73]\n```\n:::\n:::\n\n\n## Problems (Total: 40 Points)\n\n### Problem 1 (8 points)\n\nYou've been tasked with writing code to identify the minimum value in an array. You cannot use a predefined function. Your colleague suggested the function below, but it does not return the minimum value.\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfunction minimum(array)\n    min_value = 0\n    for i in 1:length(array)\n        if array[i] < min_value\n            min_value = array[i]\n        end\n    end\n    return min_value\nend\n\narray_values = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\n@show minimum(array_values);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nminimum(array_values) = 0\n```\n:::\n:::\n\n\n#### Problem 1.1 (3 points)\n\nDescribe the logic error.\n\n***Solution***: `min_value` is initialized at 0, which is less than any of the array elements, and so it will never be updated.\n\n#### Problem 1.2 (3 points)\n\nWrite a fixed version of the function.\n\n***Solution***:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nfunction fixed_minimum(array)\n    # this time initialize min_value to the first element\n    min_value = array[1]\n    # now compare to rest and update\n    for i in 2:length(array)\n        if array[i] < min_value\n            min_value = array[i]\n        end\n    end\n    return min_value\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nfixed_minimum (generic function with 1 method)\n```\n:::\n:::\n\n\n#### Problem 1.3 (2 points)\n\nUse your fixed function to find the minimum value of `array_values`.\n\n***Solution***:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n@show fixed_minimum(array_values);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfixed_minimum(array_values) = 78\n```\n:::\n:::\n\n\n### Problem 2 (8 points)\n\nYour team is trying to compute the average grade for your class, but the following code produces an error.\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nstudent_grades = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\nfunction class_average(grades)\n    average_grade = mean(student_grades)\n    return average_grade\nend\n\n@show average_grade;\n```\n\n::: {.cell-output .cell-output-error}\n```\nLoadError: UndefVarError: `average_grade` not defined\n```\n:::\n:::\n\n\n#### Problem 2.1 (3 points)\n\nDescribe the logic and/or syntax error.\n\n***Solution***: There are two errors:\n\n1. `average_grade` is a quantity from within the function, but then is referenced outside of it, which causes an error.\n2. Within `class_average`, the input `grades` is not actually used, but just `student_grades`.\n\n#### Problem 2.2 (3 points)\n\nWrite a fixed version of the code.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfunction fixed_class_average(grades)\n    average_grade = sum(grades) / length(grades)\n    return average_grade\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nfixed_class_average (generic function with 1 method)\n```\n:::\n:::\n\n\n#### Problem 2.3 (2 points)\n\nUse your fixed code to compute the average grade for the class.\n\n***Solution***:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n@show fixed_class_average(student_grades);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfixed_class_average(student_grades) = 94.4\n```\n:::\n:::\n\n\n### Problem 3 (8 points)\n\nYou've been handed some code to analyze. The original coder was not very considerate of other potential users: the function is called `mystery_function` and there are no comments explaining the purpose of the code. It appears to take in an array and return some numbers, and you've been assured that the code works as intended.\n:::\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nfunction mystery_function(values)\n    y = []\n    for v in values\n        if !(v in y)\n            append!(y, v)\n        end\n    end\n    return y\nend\n\nlist_of_values = [1, 2, 3, 4, 3, 4, 2, 1]\n@show mystery_function(list_of_values);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmystery_function(list_of_values) = Any[1, 2, 3, 4]\n```\n:::\n:::\n\n\n#### Problem 3.1 (4 points)\n\nExplain the purpose of `mystery_function`.\n\n***Solution***: `mystery_function(v)` creates a new array which contains the unique values in the input array `v`.\n\n#### Problem 3.2 (4 points)\n\nAdd comments to the code, explaining why and how it works. Refer to [\"Best Practices for Writing Code Comments\"](https://stackoverflow.blog/2021/12/23/best-practices-for-writing-code-comments/), and remember that bad comments can be just as bad as no comments at all. You do not need to add comments to every line (in fact, this is very bad practice), but you should note the *purpose* of every \"section\" of code, and add comments explaining any code sequences that you don't immediately understand.\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nfunction mystery_function(values)\n    # Starting with an empty array y, add new values\n    # if they are not in y\n    y = []\n    # Check if the values do not exist in y and if they don't, append\n    for v in values\n        if !(v in y)\n            append!(y, v)\n        end\n    end\n    return y\nend\n\nlist_of_values = [1, 2, 3, 4, 3, 4, 2, 1]\n@show mystery_function(list_of_values);\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmystery_function(list_of_values) = Any[1, 2, 3, 4]\n```\n:::\n:::\n\n\n### Problem 4 (16 points)\n\nCheap Plastic Products, Inc. is operating a plant that produces $100 \\text{m}^3\\text{/day}$ of wastewater that is discharged into Pristine Brook. The wastewater contains $1 \\text{kg/m}^3$ of YUK, a toxic substance. The US Environmental Protection Agency has imposed an effluent standard on the plant prohibiting discharge of more than $20 \\text{kg/day}$ of YUK into Pristine Brook.\n\nCheap Plastic Products has analyzed two methods for reducing its discharges of YUK. Method 1 is land disposal, which costs $X_1^2/20$ dollars per day, where $X_1$ is the amount of wastewater disposed of on the land ($\\text{m}^3\\text{/day}$). With this method, 20% of the YUK applied to the land will eventually drain into the stream (*i.e.*, 80% of the YUK is removed by the soil). \n\nMethod 2 is a chemical treatment procedure which costs \\$1.50 per $\\text{m}^3$ of wastewater treated. The chemical treatment has an efficiency of $e= 1 - 0.005X_2$, where $X_2$ is the quantity of wastewater ($\\text{m}^3\\text{/day}$) treated. For example, if $X_2 = 50 \\text{m}^3\\text{/day}$, then $e = 1 - 0.005(50) = 0.75$, so that 75% of the YUK is removed.\n\nCheap Plastic Products is wondering how to allocate their wastewater between these three disposal and treatment methods (land disposal, and chemical treatment, and land disposal) to meet the effluent standard while keeping costs manageable.\n\n#### Problem 4.1 (3 points)\n\nThe flow of wastewater through this treatment system is shown in @fig-wastewater. Modify the edge labels (by editing the `edge_labels` dictionary in the code producing @fig-wastewater) to show how the wastewater allocations result in the final YUK discharge into Pristine Brook. For the `edge_label` dictionary, the tuple $(i, j)$ corresponds to the arrow going from node $i$ to node $j$. The syntax for any entry is `(i, j) => \"label text\"`, and the label text can include mathematical notation if the string is prefaced with an `L`, as in `L\"x_1\"` will produce $x_1$.\n\n***Solution***:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nusing GraphRecipes, Plots\n\nA = [0 1 1 1;\n\t0 0 0 1;\n\t0 0 0 1;\n\t0 0 0 0]\n\nnames = [\"Plant\", \"Land Treatment\", \"Chem Treatment\", \"Pristine Brook\"]\n# modify this dictionary to add labels\nedge_labels = Dict((1, 2) => L\"X_1\", (1,3) => L\"X_2\", (1, 4) => L\"100-X_1-X_2\", (2, 4) => L\"0.2 X_1\",(3, 4) => L\"0.005 X_2^2\")\nshapes=[:hexagon, :rect, :rect, :hexagon]\nxpos = [0, -1.5, -0.25, 1]\nypos = [1, 0, 0, -1]\n\ngraphplot(A, names=names,edgelabel=edge_labels, markersize=0.15,\n    markershapes=shapes, markercolor=:white, x=xpos, y=ypos)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n![System diagram of the wastewater treatment options in Problem 4.](hw01-solution_files/figure-pdf/fig-wastewater-output-1.svg){#fig-wastewater fig-pos='H'}\n:::\n:::\n\n\n#### Problem 4.2 (4 points)\n\nFormulate a mathematical model for the treatment cost and the amount of YUK that will be discharged into Pristine Brook based on the wastewater allocations. This is best done with some equations and supporting text explaining the derivation. Make sure you include, as additional equations in the model, any needed constraints on relevant values. You can find some basics on writing mathematical equations using the LaTeX typesetting syntax [here](https://viveks.me/environmental-systems-analysis/tutorials/latex-notebook.html), and a cheatsheet with LaTeX commands can be found on the course website's [Resources page](https://viveks.me/environmental-systems-analysis/resources/markdown.html).\n\n***Solution***:\n\nThese equations will be derived in terms of $X_1$ and $X_2$, where $X_1 + X_2 \\leq 100$.\n\nThe amount of YUK which will be discharged is\n$$\nD(X_1, X_2) = 100 - X_1 - X_2 + 0.2 X_1 + 0.005X_2^2 = 100 - 0.8 X_1 + (0.005X_2 - 1)X_2.\n$$\n\nThe cost is\n$$\nC(X_1, X_2) = X_1^2/20 + 1.5 X_2.\n$$\n\n#### Problem 4.3 (4 points)\n\nImplement this systems model as a Julia function which computes the resulting YUK concentration and cost for a particular treatment plan. You can return multiple values from a function with a [tuple](https://docs.julialang.org/en/v1/manual/functions/#Tuples-1), as in:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfunction multiple_return_values(x, y)\n    return (x+y, x*y)\nend\n\na, b = multiple_return_values(2, 5)\n@show a;\n@show b;\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na = 7\nb = 10\n```\n:::\n:::\n\n\nMake sure you comment your code appropriately to make it clear what is going on and why.\n\n***Solution***:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\n# we will assume that X₁, X₂ are vectors so we can vectorize\n# the function; hence the use of broadcasting. This makes unpacking\n# the different outputs easier as each will be returned as a vector.\n# Note that even though this is vectorized, passing scalar inputs\n# will still work fine.\nfunction yuk_discharge(X₁, X₂)\n    # Make sure X₁ + X₂ <= 100! Throw an error if not.\n    if any(X₁ .+ X₂ .> 100)\n        error(\"X₁ + X₂ must be less than 100\")\n    end\n    # These calculations use broadcasting\n    yuk = 100 .- 0.8X₁ .+ (0.005X₂ .- 1) .* X₂\n    cost = X₁.^2/20 .+ 1.5X₂\n    return (yuk, cost)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nyuk_discharge (generic function with 1 method)\n```\n:::\n:::\n\n\n#### Problem 4.4 (5 points)\n\nUse your function to experiment with some different combinations of wastewater discharge and treatment. Can you find one that satisfies the YUK effluent standard? What was the cost? You don't have to find an \"optimal\" solution to this problem, but what do you think would be needed to find a better solution?\n\n***Solution***:\n\nWe left this intentionally open for you to conceptualize how to generate combinations and to look into different ways of implementing these in Julia. For a more systematic approach, we can sample combinations from a [Dirichlet distribution](https://en.wikipedia.org/wiki/Dirichlet_distribution), which samples combinations which add up to 1. This will require installing and loading the `Distributions.jl` package (we will spend more time working with `Distributions.jl` later). \n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\n# Install and load Distributions.jl\nPkg.add(\"Distributions\")\nusing Distributions\n```\n:::\n\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\n# The 3D Dirichlet distribution with parameters equal to 1\n# is basically uniform over these combinations.\n# See: https://juliastats.org/Distributions.jl/stable/multivariate/#Distributions.Dirichlet\nyuk_distribution = Dirichlet(3, 1)\n# Need to scale samples from 0 to 100, not 0 to 1\nyuk_samples = 100 * rand(yuk_distribution, 1000)\nD, C = yuk_discharge(yuk_samples[1,:], yuk_samples[2, :])\n\n# Plot the discharge vs. cost and add a line for the regulatory limit\n# We also turn off the legend as we don't need it for this plot\nscatter(D, C, markersize=2, legend=:false)\nvline!([20], color=:red)\n# Label axes\nxaxis!(\"YUK Discharge (kg/day)\")\n# For the y-axis label, we need to \"escape\" the $ by adding a slash\n# otherwise it interprets that as starting math mode\nyaxis!(\"Treatment Cost (\\$/day)\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![Sampled solutions for the wastewater allocation problem in Problem 4, showing cost vs. YUK concentration. The red line marks the regulatory discharge limit of 20kg/day.](hw01-solution_files/figure-pdf/fig-yuk-solution-output-1.svg){#fig-yuk-solution fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nWe can see (to the left of the line in @fig-yuk-solution) that we have several wastewater allocations which do comply with the regulation. We can look more closely as to which solutions these are and how much they cost.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\n# Note some of the options:\n# - zcolor colors the points based on another variable (in this case cost)\n# - label=:false turns off the legend for the points (we don't have multiple series)\n# - seriescolor sets the colorscheme for the colorbar (in this case, reds)\n#   see https://docs.juliaplots.org/latest/generated/colorschemes/\n# - in the colorbar title, we need to \"escape\" the $ by adding a slash\n#   otherwise it interprets that as starting math mode\nscatter(yuk_samples[1, D .<= 20], yuk_samples[2, D .<= 20], zcolor=C[ D .<= 20], \ncolorbar_title=\"Cost (\\$/day)\", seriescolor=:reds, label=:false)\n# Add axis labels\n# We use the LaTeXStrings.jl package to render variables, subscripts\n# and superscripts. The key is the use of the L in front of the \"\",\n# which will render anything inside $ $ as though they are LaTeX.\nxlabel!(L\"Land Disposal (m$^3$/day)\")\nylabel!(L\"Chemical Disposal (m$^3$/day)\")\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n![Solutions for our wastewater problem which comply with the YUK regulation. The x-axis ($X_1$) is the land disposal allocation, the y-axis ($X_2$) is the chemical disposal allocation, and the colors correspond to the cost of that strategy.](hw01-solution_files/figure-pdf/fig-yuk-comply-output-1.svg){#fig-yuk-comply fig-align='center' fig-pos='H'}\n:::\n:::\n\n\nFrom @fig-yuk-comply, we can see that compliant solutions which rely more on the chemical disposal method (larger $X_2$) are generally more cost-effective, though the minimum cost is still around $275/day. \n\nDepending on how you analyzed the problem, there are different solutions to the question of what additional information is needed. In our case, we might benefit from having some idea of the treatment budget, as some (or all!) of the solutions might be cost-prohibitive.\n\n## References\n\nList any external references consulted, including classmates.\n\n",
    "supporting": [
      "hw01-solution_files/figure-pdf"
    ],
    "filters": []
  }
}