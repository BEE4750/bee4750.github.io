{
  "hash": "79580920bf1943969c3af7ccb95df1fd",
  "result": {
    "markdown": "---\ntitle: Homework 2 Solutions\nformat:\n  html:\n    warning: true\n    error: true\n  pdf:\n    warning: true\n    error: true\n---\n\n::: {.callout-important icon=false}\n### Due Date\n\nFriday, 09/22/23, 9:00pm\n:::\n\n## Overview\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\nusing LaTeXStrings\nusing Distributions\n```\n:::\n\n\n## Problems (Total: 40 Points)\n\n::: {.cell .markdown}\n\nA river which flows at 6 km/d is receiving waste discharges from two sources which are 15 km apart, as shown in @fig-river. The oxygen reaeration rate is 0.55 day^-1^, and the decay rates of CBOD and NBOD are are 0.35 and 0.25 day^-1^, respectively. The river's saturated dissolved oxygen concentration is 10m g/L. The inflow values are measured at the point where the first waste discharge enters the river.\n\n![Schematic of the system](figures/river_diagram.png){#fig-river}\n\n:::\n\n::: {.cell .markdown}\n\n### Problem 1 (8 points)\n\nIf the characteristics of the river inflow and waste discharges are given in @tbl-river, write a Julia model to compute the dissolved oxygen concentration from the first wastewater discharge to an arbitrary distance `d` km downstream. Use your model to compute the minimum dissolved oxygen concentration up to 50km downstream and how far downriver this minimum occurs.\n\n| Parameter | River Inflow | Waste Stream 1 | Waste Stream 2 |\n|:---------:|-------------:|---------------:|---------------:|\n| Inflow | 100 m^3^/d | 10 m^3^/d | 15 m^3^/d |\n| DO Concentration | 7.5 mg/L | 5 mg/L | 5 mg/L |\n| CBOD | 5 mg/L | 50 mg/L | 45 mg/L |\n| NBOD | 5 mg/L | 35 mg/L | 35 mg/L |\n: River inflow and waste stream characteristics for Problem 1. {#tbl-river}\n\n\n***Solution***: \n\nWe can think of each segment of the river between discharges as a box model, and the overall river as a combination of two boxes:\n\n- Box 1 goes from discharge 1 to discharge 2;\n- Box 2 goes from discharge 2 downstream.\n\nAs a result, we can structure our code in two functions, one to compute the dissolved oxygen for each box (`do_box()`), and the main function to loop over the boxes (`do_simulate()`). Note that `do_box()` should return the CBOD and NBOD as well as the DO, because we will need this output to compute the initial conditions of the next box.\n\nWe will also write a helper function `mixed_concentration()` to compute mixtures of the inflows and the discharges, as we will reuse that calculation multiple times for each box.\n\n::: {.callout-note}\n## Design Choices\n\nHowever, this is not essential, and there are other solutions which would work. For example, you could just write a single function and use `if-else` statements to capture the different boundary conditions, but the disadvantage of this approach is that it's a bit messier, might be harder to debug, and would require more work to adapt to changes in the problem.\n\n:::\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n## mixed_concentration calculates the concentration after a mixing of flow 0 and flow 1; C is the concentration and V is the volume\nfunction mixed_concentration(C0, C1, V0, V1)\n  return (V0 * C0 + V1 * C1) / (V0 + V1)\nend\n\n## do_box will accept three parameters: the initial conditions (the results of mixing the discharge and the inflow), the river DO dynamics properties, and the length of the box (d). The first two of these will be tuples, so we can unpack and refer to names, which will make the code more readable, but using other data structures would be fine.\nfunction do_box(init_cond, river, d)\n    C₀, B₀, N₀ = init_cond # unpack initial conditions\n    ka, kc, kn, Cs, U = river # unpack river properties\n\n    # broadcast the DO computation over the box; this avoids a loop (but looping is also fine, you'll just need to pre-allocate storage and maybe set the initial conditions to be the first value)\n    x = 0:d # creates a step from the initial values to length d\n    B = B₀ .* exp.(-kc .* x ./ U)\n    N = N₀ .* exp.(-kn .* x ./ U)\n    α1 = exp.(-ka .* x ./ U)\n    α2 = (kc/(ka-kc)) .* (exp.(-kc .* x / U) .- α1)\n    α3 = (kn/(ka-kn)) .* (exp.(-kn .* x / U) .- α1)\n    C = Cs .* (1 .- α1) + (C₀ .* α1) - (B₀ .* α2) - (N₀ .* α3)\n\n    return (C, B, N)\nend\n\n# For do_simulate(), we will write the function to accept tuples with the inflow, discharges (this will be an array of tuples, one for each box), and river characteristics, and an array of box lengths\nfunction do_simulate(inflow, discharges, river, box_lengths)\n    # initialize storage\n    C = zeros(sum(box_lengths) + 1)\n    B = zeros(sum(box_lengths) + 1)\n    N = zeros(sum(box_lengths) + 1)\n    V = inflow[4] # initialize volume\n    init_idx = 1 # initialize initial index\n    # loop over the boxes and do the computations\n    for i = 1:length(box_lengths)\n        # if this is the first box, the initial mixture uses the inflow, otherwise, the last value of the prior computation; we'll also compute the initial index for storing this box's simulation\n        if i == 1\n            Cin, Bin, Nin = inflow # this ignores Vin at position 4\n        else\n            Cin = C[box_lengths[i-1] + 1]\n            Bin = B[box_lengths[i-1] + 1]\n            Nin = B[box_lengths[i-1] + 1]\n            init_idx += box_lengths[i-1]  # note that this will overwrite the values we just pulled, as this is the \"true\" value at the point of mixing\n        end\n        Cd, Bd, Nd, Vd = discharges[i] # unpack discharge concentrations and volume\n        # compute initial conditions for this box by mixing\n        C₀ = mixed_concentration(Cin, Cd, V, Vd)\n        B₀ = mixed_concentration(Bin, Bd, V, Vd)\n        N₀ = mixed_concentration(Nin, Nd, V, Vd)\n        V += Vd # update volume\n        init_cond = (C₀, B₀, N₀)\n        # simulate the next box and store the values\n        sim_out = do_box(init_cond, river, box_lengths[i])\n        C[init_idx:(init_idx + box_lengths[i])] = sim_out[1] \n        B[init_idx:(init_idx + box_lengths[i])] = sim_out[2] \n        N[init_idx:(init_idx + box_lengths[i])] = sim_out[3] \n    end\n    return (C, B, N)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\ndo_simulate (generic function with 1 method)\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nriver = (0.55, 0.35, 0.25, 10, 6)\ninflow = (7.5, 5, 5, 100000) # after converting volume to L\ndischarges = [(5, 50, 35, 10000), (5, 45, 35, 15000)]\nbox_lengths = [15, 35]\n\nC, B, N = do_simulate(inflow, discharges, river, box_lengths)\n\nmin_C = findmin(C)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n(3.8135299699779512, 23)\n```\n:::\n:::\n\n\nThe minimum value is approximately 3.8 mg/L, and occurs 22 km downstream of the initial discharge (since position 1 is $x=0$).\n\n::: {.cell .markdown}\n### Problem 2 (4 points)\n\nPlot the dissolved oxygen concentration in the river from the first waste stream to 50km downstream, along with the CBOD and NBOD (on the same axes). What do you observe?\n\n:::\n\n***Solution***:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nplot(0:50, C, color=:black, linewidth=2, label=\"DO\", grid=:false)\nplot!(0:50, B, color=:blue, linestyle=:dash, label=\"CBOD\")\nplot!(0:50, N, color=:red, linestyle=:dash, label=\"NBOD\")\nxlabel!(\"Downstream Distance (km)\")\nylabel!(\"Concentration (mg/L)\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![](hw02-solution_files/figure-pdf/cell-6-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\nWe can see the spike in the NBOD and CBOD immediately after the discharge and the corresponding drop in the DO. As the CBOD and NBOD decrease, the DO can recover from reaeration.\n\n::: {.cell .markdown}\n### Problem 3 (3 points)\n\nUnder the assumptions of Problem 1, determine the distance from waste stream 2 it will take for the dissolved oxygen concentration of the river to recover to 6 mg/L.\n:::\n\n***Solution***:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nlow_do = findall(C .>= 6)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n13-element Vector{Int64}:\n  1\n  2\n  3\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n```\n:::\n:::\n\n\nThe DO concentration recovers to 6 mg/L 41 km downstream (since $x=0$ is index 1) from the initial discharge, or 26 km downstream from the second waste stream.\n\n::: {.cell .markdown}\n### Problem 4 (5 points)\n\nWhat is the minimum level of treatment (% removal of organic waste from the stream) for waste stream 2 that will ensure that the dissolved oxygen concentration never drops below 4 mg/L, assuming that waste stream 1 remains untreated?\n:::\n\n***Solution***:\n\nDue to how we structured the solution in Problem 1, we can modify the discharge 2 CBOD and NBOD values and leave everything else alone. We will do this using a function which takes in a treatment efficiency and the problem properties, runs the DO simulation with that level of treatment, and returns the minimum value. One advantage of this approach is the original `discharges` data remains the same, so we can reuse it in subsequent simulations. We can then broadcast that function over an efficiency range, and find the first minimum that is greater than 4 mg/L.\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\neff = 0:0.01:1 # range of treatment efficiencies to consider \n\nfunction waste2_treatment(eff, inflow, discharges, river, box_lengths)\n    treated_discharge2 = (5, (1-eff) * 45, (1-eff) * 35, 15000)\n    C, B, N = do_simulate(inflow, [discharges[1], treated_discharge2], river, box_lengths)\n    return minimum(C)\nend\n\n# use a comprehension to loop over the efficiency values; we could do this with a regular loop as well\nmin_do = [waste2_treatment(e, inflow, discharges, river, box_lengths) for e in eff]\neff[findfirst(min_do .>= 4)] # get the efficiency value by finding the index of the first minimum value which complies\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0.09\n```\n:::\n:::\n\n\nSo the lowest treatment level that will meet the requirement is 9%.\n\n::: {.cell .markdown}\n### Problem 5 (5 points)\n\nIf both waste streams are treated equally, what is the minimum level of treatment (% removal of organic waste) for the two sources required to ensure that the dissolved oxygen concentration never drops below 4 mg/L?\n\n:::\n\n***Solution***:\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\nfunction waste_both_treatment(eff, inflow, discharges, river, box_lengths)\n    treated_discharges = [(5, (1-eff) * 50, (1-eff) * 35, 10000), (5, (1-eff) * 45, (1-eff) * 35, 15000)]\n    C, B, N = do_simulate(inflow, treated_discharges, river, box_lengths)\n    return minimum(C)\nend\n\n# use a comprehension to loop over the efficiency values; we could do this with a regular loop as well\nmin_do = [waste_both_treatment(e, inflow, discharges, river, box_lengths) for e in eff]\neff[findfirst(min_do .>= 4)] # get the efficiency value by finding the index of the first minimum value which complies\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n0.05\n```\n:::\n:::\n\n\nBoth sources would have to be treated at 5%.\n\n::: {.cell .markdown}\n\n### Problem 6 (5 points)\n\nSuppose you are responsible for designing a waste treatment plan for discharges into the river, with a regulatory mandate to keep the dissolved oxygen concentration above 4 mg/L. Discuss whether you'd opt to treat waste stream 2 alone or both waste streams equally. What other information might you need to make a conclusion, if any?\n\n:::\n\n***Solution***: \n\nEither choice is defensible depending on the reasoning. Some relevant information might include costs (which is unknown) for each source to treat its waste, or the larger volume of wastewater produced by source 2.\n\n::: {.cell .markdown}\n\n### Problem 7 (5 points)\n\nSuppose that it is known that the DO concentrations at the river inflow can vary uniformly between 6 mg/L and 8 mg/L. How often will the treatment plan identified in Problem 5 (both waste streams treated equally) fail to comply with the regulatory standard?\n:::\n\n***Solution***:\n\nThere are a few ways to solve this, but in this case, we'll just loop over values between 6 and 8 mg/L since the values vary uniformly.\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\ninflow_do = 6:0.01:8\nmin_do = [waste_both_treatment(0.05, (k, 5, 5, 100000), discharges, river, box_lengths) for k in inflow_do]\nsum(min_do .< 4) / length(min_do) # get the fraction of values which fall short\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0.746268656716418\n```\n:::\n:::\n\n\nThe plan will fail 75% of the time.\n\n::: {.cell .markdown}\n\n### Problem 8 (5 points)\n\nA factory is planning a third wastewater discharge into the river downstream of the second plant. This discharge would consist of 5 m^3^/day of wastewater with a dissolved oxygen content of 4.5 mg/L and CBOD and NBOD levels of 50 and 45 mg/L, respectively.\n\nAssume that the treatment plan you identified in Problem 5 is still in place for the existing discharges. If the third discharge will not be treated, under the original inflow conditions (7.5 mg/L DO), how far downstream from the second discharge does this third discharge need to be placed to keep the river concentration from dropping below 4 mg/L?\n:::\n\n***Solution***:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\nfunction add_third_discharge(pos, inflow, all_discharges, river, box_lengths)\n    positions = [box_lengths[1], box_lengths[1] + pos, 50 - box_lengths[1] - pos] # find new box lengths\n    C, B, N = do_simulate(inflow, all_discharges, river, positions)\n    return C\nend\n\nall_discharges = [(5, (1-0.09) * 50, (1-0.09) * 35, 10000), (5, (1-0.09) * 45, (1-0.09) * 35, 15000), (4.5, 50, 45, 5000)]\n\npos = 1:20\n\nthird_do_min = [minimum(add_third_discharge(p, inflow, all_discharges, river, box_lengths)) for p in pos]\nfindfirst(third_do_min .>= 4)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n9\n```\n:::\n:::\n\n\nSo the third discharge needs to be placed at least 9 km downstream of the second discharge.\n\n::: {.cell .markdown}\n## References\n\nList any external references consulted, including classmates.\n:::\n\n",
    "supporting": [
      "hw02-solution_files/figure-pdf"
    ],
    "filters": []
  }
}