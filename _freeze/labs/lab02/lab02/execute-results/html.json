{
  "hash": "e2fde08cd9414a560b0a768e2326c0f8",
  "result": {
    "markdown": "---\ntitle: 'BEE 4750 Lab 2: Uncertainty and Monte Carlo'\nformat:\n  html:\n    warning: true\n    error: true\n  ipynb:\n    warning: true\n    error: true\n    code-annotation: below\nformat-links: []\n---\n\n::: {.content-visible when-format=\"ipynb\"}\n::: {.cell .markdown}\n**Name**:\n\n**ID**:\n:::\n:::\n\n::: {.callout-important icon=false}\n### Due Date\n\nFriday, 9/22/23, 9:00pm\n:::\n\n::: {.content-visible when-format=\"html\"}\n\n:::{.callout-caution}\n\nIf you are enrolled in the course, make sure that you use the GitHub Classroom link provided in Ed Discussion, or you may not be able to get help if you run into problems.\n\nOtherwise, you can [find the Github repository here]({{< var github_org.repo >}}/lab02).\n\n:::\n\n:::\n\n## Setup\n\nThe following code should go at the top of most Julia scripts; it will load the local package environment and install any needed packages. You will see this often and shouldn't need to touch it.\n\n::: {#d20ba271 .cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n:::\n\n\n::: {#31b7b78d .cell execution_count=2}\n``` {.julia .cell-code}\nusing Random # random number generation\nusing Distributions # probability distributions and interface\nusing Statistics # basic statistical functions, including mean\nusing Plots # plotting\n```\n:::\n\n\n## Introduction\n\nIn this lab, you will use Monte Carlo analysis to estimate the expected winnings for a couple of different games of chance.\n\nMonte Carlo methods involve the simulation of random numbers from probability distributions. In an environmental context, we often propagate these random numbers through some more complicated model and then compute a resulting statistic which is relevant for assessing performance or risk, such as an average outcome or a particular quantile.\n\nJulia provides a common interface for probability distributions with the [`Distributions.jl` package](https://juliastats.org/Distributions.jl/stable/). The basic workflow for sampling from a distribution is:\n\n1. Set up the distribution. The specific syntax depends on the distribution and what parameters are required, but the general call is the similar. For a normal distribution or a uniform distribution, the syntax is\n   \n    ```julia\n    # you don't have to name this \"normal_distribution\"\n    # μ is the mean and σ is the standard deviation\n    normal_distribution = Normal(μ, σ)\n    # a is the upper bound and b is the lower bound; these can be set to +Inf or -Inf for an unbounded distribution in one or both directions.\n    uniform_distribution = Uniform(a, b)\n    ```\n\n    There are lots of both [univariate](https://juliastats.org/Distributions.jl/stable/univariate/#Index) and [multivariate](https://juliastats.org/Distributions.jl/stable/multivariate/) distributions, as well as the ability to create your own, but we won't do anything too exotic here.\n2. Draw samples. This uses the `rand()` command (which, when used without a distribution, just samples uniformly from the interval $[0, 1]$.) For example, to sample from our normal distribution above:\n   \n    ```julia\n    # draw n samples\n    rand(normal_distribution, n)\n    ```\n\nPutting this together, let's say that we wanted to simulate 100 six-sided dice rolls. We could use a [Discrete Uniform distribution](https://juliastats.org/Distributions.jl/stable/univariate/#Distributions.DiscreteUniform).\n\n::: {#55bd05e0 .cell execution_count=3}\n``` {.julia .cell-code}\ndice_dist = DiscreteUniform(1, 6) # can generate any integer between 1 and 6\ndice_rolls = rand(dice_dist, 100) # simulate rolls\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n100-element Vector{Int64}:\n 5\n 1\n 4\n 3\n 4\n 2\n 5\n 4\n 6\n 5\n 5\n 5\n 4\n ⋮\n 1\n 5\n 6\n 6\n 1\n 6\n 2\n 5\n 6\n 6\n 1\n 2\n```\n:::\n:::\n\n\nAnd then we can plot a histogram of these rolls:\n\n::: {#200afd21 .cell execution_count=4}\n``` {.julia .cell-code}\nhistogram(dice_rolls, legend=:false, bins=6)\nylabel!(\"Count\")\nxlabel!(\"Dice Value\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"672\" height=\"480\" viewBox=\"0 0 2688 1920\">\n<defs>\n  <clipPath id=\"clip220\">\n    <rect x=\"0\" y=\"0\" width=\"2688\" height=\"1920\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M0 1920 L2688 1920 L2688 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip221\">\n    <rect x=\"537\" y=\"0\" width=\"1883\" height=\"1883\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip220)\" d=\"M208.502 1734.12 L2640.76 1734.12 L2640.76 47.2441 L208.502 47.2441  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip222\">\n    <rect x=\"208\" y=\"47\" width=\"2433\" height=\"1688\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"342.28,1734.12 342.28,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"703.063,1734.12 703.063,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1063.85,1734.12 1063.85,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1424.63,1734.12 1424.63,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1785.41,1734.12 1785.41,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2146.19,1734.12 2146.19,47.2441 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2506.98,1734.12 2506.98,47.2441 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,1734.12 2640.76,1734.12 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"342.28,1734.12 342.28,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"703.063,1734.12 703.063,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1063.85,1734.12 1063.85,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1424.63,1734.12 1424.63,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1785.41,1734.12 1785.41,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2146.19,1734.12 2146.19,1715.22 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2506.98,1734.12 2506.98,1715.22 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M332.662 1794.89 L340.301 1794.89 L340.301 1768.52 L331.991 1770.19 L331.991 1765.93 L340.255 1764.26 L344.931 1764.26 L344.931 1794.89 L352.569 1794.89 L352.569 1798.82 L332.662 1798.82 L332.662 1794.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M697.716 1794.89 L714.035 1794.89 L714.035 1798.82 L692.091 1798.82 L692.091 1794.89 Q694.753 1792.13 699.336 1787.5 Q703.943 1782.85 705.123 1781.51 Q707.369 1778.98 708.248 1777.25 Q709.151 1775.49 709.151 1773.8 Q709.151 1771.04 707.206 1769.31 Q705.285 1767.57 702.183 1767.57 Q699.984 1767.57 697.531 1768.34 Q695.1 1769.1 692.322 1770.65 L692.322 1765.93 Q695.146 1764.79 697.6 1764.21 Q700.054 1763.64 702.091 1763.64 Q707.461 1763.64 710.656 1766.32 Q713.85 1769.01 713.85 1773.5 Q713.85 1775.63 713.04 1777.55 Q712.253 1779.45 710.146 1782.04 Q709.568 1782.71 706.466 1785.93 Q703.364 1789.12 697.716 1794.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1068.09 1780.19 Q1071.45 1780.9 1073.33 1783.17 Q1075.22 1785.44 1075.22 1788.77 Q1075.22 1793.89 1071.7 1796.69 Q1068.19 1799.49 1061.7 1799.49 Q1059.53 1799.49 1057.21 1799.05 Q1054.92 1798.64 1052.47 1797.78 L1052.47 1793.27 Q1054.41 1794.4 1056.73 1794.98 Q1059.04 1795.56 1061.57 1795.56 Q1065.96 1795.56 1068.26 1793.82 Q1070.57 1792.08 1070.57 1788.77 Q1070.57 1785.72 1068.42 1784.01 Q1066.29 1782.27 1062.47 1782.27 L1058.44 1782.27 L1058.44 1778.43 L1062.65 1778.43 Q1066.1 1778.43 1067.93 1777.06 Q1069.76 1775.67 1069.76 1773.08 Q1069.76 1770.42 1067.86 1769.01 Q1065.99 1767.57 1062.47 1767.57 Q1060.55 1767.57 1058.35 1767.99 Q1056.15 1768.4 1053.51 1769.28 L1053.51 1765.12 Q1056.17 1764.38 1058.49 1764.01 Q1060.83 1763.64 1062.89 1763.64 Q1068.21 1763.64 1071.31 1766.07 Q1074.41 1768.47 1074.41 1772.59 Q1074.41 1775.46 1072.77 1777.46 Q1071.13 1779.42 1068.09 1780.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1427.64 1768.34 L1415.83 1786.78 L1427.64 1786.78 L1427.64 1768.34 M1426.41 1764.26 L1432.29 1764.26 L1432.29 1786.78 L1437.22 1786.78 L1437.22 1790.67 L1432.29 1790.67 L1432.29 1798.82 L1427.64 1798.82 L1427.64 1790.67 L1412.04 1790.67 L1412.04 1786.16 L1426.41 1764.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1775.69 1764.26 L1794.05 1764.26 L1794.05 1768.2 L1779.97 1768.2 L1779.97 1776.67 Q1780.99 1776.32 1782.01 1776.16 Q1783.03 1775.97 1784.05 1775.97 Q1789.83 1775.97 1793.21 1779.15 Q1796.59 1782.32 1796.59 1787.73 Q1796.59 1793.31 1793.12 1796.41 Q1789.65 1799.49 1783.33 1799.49 Q1781.15 1799.49 1778.88 1799.12 Q1776.64 1798.75 1774.23 1798.01 L1774.23 1793.31 Q1776.31 1794.45 1778.54 1795 Q1780.76 1795.56 1783.24 1795.56 Q1787.24 1795.56 1789.58 1793.45 Q1791.92 1791.34 1791.92 1787.73 Q1791.92 1784.12 1789.58 1782.02 Q1787.24 1779.91 1783.24 1779.91 Q1781.36 1779.91 1779.49 1780.33 Q1777.63 1780.74 1775.69 1781.62 L1775.69 1764.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2146.6 1779.68 Q2143.45 1779.68 2141.6 1781.83 Q2139.77 1783.98 2139.77 1787.73 Q2139.77 1791.46 2141.6 1793.64 Q2143.45 1795.79 2146.6 1795.79 Q2149.75 1795.79 2151.58 1793.64 Q2153.43 1791.46 2153.43 1787.73 Q2153.43 1783.98 2151.58 1781.83 Q2149.75 1779.68 2146.6 1779.68 M2155.88 1765.02 L2155.88 1769.28 Q2154.12 1768.45 2152.32 1768.01 Q2150.53 1767.57 2148.78 1767.57 Q2144.15 1767.57 2141.69 1770.7 Q2139.26 1773.82 2138.91 1780.14 Q2140.28 1778.13 2142.34 1777.06 Q2144.4 1775.97 2146.88 1775.97 Q2152.09 1775.97 2155.1 1779.15 Q2158.13 1782.29 2158.13 1787.73 Q2158.13 1793.06 2154.98 1796.27 Q2151.83 1799.49 2146.6 1799.49 Q2140.6 1799.49 2137.43 1794.91 Q2134.26 1790.3 2134.26 1781.58 Q2134.26 1773.38 2138.15 1768.52 Q2142.04 1763.64 2148.59 1763.64 Q2150.35 1763.64 2152.13 1763.98 Q2153.94 1764.33 2155.88 1765.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M2495.87 1764.26 L2518.09 1764.26 L2518.09 1766.25 L2505.54 1798.82 L2500.66 1798.82 L2512.46 1768.2 L2495.87 1768.2 L2495.87 1764.26 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1264.01 1841.06 L1264.01 1878.02 L1271.77 1878.02 Q1281.61 1878.02 1286.16 1873.56 Q1290.74 1869.11 1290.74 1859.49 Q1290.74 1849.94 1286.16 1845.52 Q1281.61 1841.06 1271.77 1841.06 L1264.01 1841.06 M1257.58 1835.78 L1270.79 1835.78 Q1284.6 1835.78 1291.06 1841.54 Q1297.52 1847.27 1297.52 1859.49 Q1297.52 1871.78 1291.03 1877.54 Q1284.54 1883.3 1270.79 1883.3 L1257.58 1883.3 L1257.58 1835.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1307.52 1847.65 L1313.37 1847.65 L1313.37 1883.3 L1307.52 1883.3 L1307.52 1847.65 M1307.52 1833.78 L1313.37 1833.78 L1313.37 1841.19 L1307.52 1841.19 L1307.52 1833.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1351.28 1849.02 L1351.28 1854.5 Q1348.8 1853.13 1346.28 1852.46 Q1343.8 1851.76 1341.25 1851.76 Q1335.56 1851.76 1332.41 1855.39 Q1329.25 1858.98 1329.25 1865.51 Q1329.25 1872.03 1332.41 1875.66 Q1335.56 1879.26 1341.25 1879.26 Q1343.8 1879.26 1346.28 1878.59 Q1348.8 1877.89 1351.28 1876.52 L1351.28 1881.93 Q1348.83 1883.08 1346.19 1883.65 Q1343.58 1884.22 1340.62 1884.22 Q1332.56 1884.22 1327.82 1879.16 Q1323.08 1874.1 1323.08 1865.51 Q1323.08 1856.79 1327.85 1851.79 Q1332.66 1846.79 1341 1846.79 Q1343.7 1846.79 1346.28 1847.37 Q1348.86 1847.91 1351.28 1849.02 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1391.96 1864.01 L1391.96 1866.88 L1365.03 1866.88 Q1365.41 1872.92 1368.66 1876.11 Q1371.94 1879.26 1377.76 1879.26 Q1381.14 1879.26 1384.29 1878.43 Q1387.47 1877.6 1390.59 1875.95 L1390.59 1881.49 Q1387.44 1882.82 1384.13 1883.52 Q1380.82 1884.22 1377.41 1884.22 Q1368.88 1884.22 1363.88 1879.26 Q1358.92 1874.29 1358.92 1865.83 Q1358.92 1857.07 1363.63 1851.95 Q1368.37 1846.79 1376.39 1846.79 Q1383.59 1846.79 1387.76 1851.44 Q1391.96 1856.06 1391.96 1864.01 M1386.1 1862.29 Q1386.04 1857.49 1383.39 1854.62 Q1380.79 1851.76 1376.46 1851.76 Q1371.55 1851.76 1368.59 1854.53 Q1365.67 1857.3 1365.22 1862.33 L1386.1 1862.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1434.8 1883.3 L1416.66 1835.78 L1423.37 1835.78 L1438.43 1875.79 L1453.51 1835.78 L1460.2 1835.78 L1442.09 1883.3 L1434.8 1883.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1478.02 1865.38 Q1470.92 1865.38 1468.19 1867 Q1465.45 1868.63 1465.45 1872.54 Q1465.45 1875.66 1467.49 1877.51 Q1469.55 1879.32 1473.09 1879.32 Q1477.96 1879.32 1480.89 1875.88 Q1483.85 1872.42 1483.85 1866.69 L1483.85 1865.38 L1478.02 1865.38 M1489.7 1862.96 L1489.7 1883.3 L1483.85 1883.3 L1483.85 1877.89 Q1481.84 1881.14 1478.85 1882.7 Q1475.86 1884.22 1471.53 1884.22 Q1466.05 1884.22 1462.81 1881.17 Q1459.59 1878.08 1459.59 1872.92 Q1459.59 1866.91 1463.6 1863.85 Q1467.65 1860.8 1475.63 1860.8 L1483.85 1860.8 L1483.85 1860.23 Q1483.85 1856.18 1481.17 1853.99 Q1478.53 1851.76 1473.72 1851.76 Q1470.67 1851.76 1467.77 1852.49 Q1464.88 1853.22 1462.2 1854.69 L1462.2 1849.28 Q1465.42 1848.03 1468.44 1847.43 Q1471.46 1846.79 1474.33 1846.79 Q1482.06 1846.79 1485.88 1850.8 Q1489.7 1854.81 1489.7 1862.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1501.77 1833.78 L1507.62 1833.78 L1507.62 1883.3 L1501.77 1883.3 L1501.77 1833.78 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1519.27 1869.23 L1519.27 1847.65 L1525.13 1847.65 L1525.13 1869.01 Q1525.13 1874.07 1527.1 1876.62 Q1529.07 1879.13 1533.02 1879.13 Q1537.76 1879.13 1540.5 1876.11 Q1543.27 1873.08 1543.27 1867.86 L1543.27 1847.65 L1549.13 1847.65 L1549.13 1883.3 L1543.27 1883.3 L1543.27 1877.83 Q1541.14 1881.07 1538.3 1882.66 Q1535.5 1884.22 1531.78 1884.22 Q1525.64 1884.22 1522.45 1880.4 Q1519.27 1876.59 1519.27 1869.23 M1534.01 1846.79 L1534.01 1846.79 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M1591.68 1864.01 L1591.68 1866.88 L1564.75 1866.88 Q1565.14 1872.92 1568.38 1876.11 Q1571.66 1879.26 1577.49 1879.26 Q1580.86 1879.26 1584.01 1878.43 Q1587.19 1877.6 1590.31 1875.95 L1590.31 1881.49 Q1587.16 1882.82 1583.85 1883.52 Q1580.54 1884.22 1577.14 1884.22 Q1568.61 1884.22 1563.61 1879.26 Q1558.64 1874.29 1558.64 1865.83 Q1558.64 1857.07 1563.35 1851.95 Q1568.1 1846.79 1576.12 1846.79 Q1583.31 1846.79 1587.48 1851.44 Q1591.68 1856.06 1591.68 1864.01 M1585.82 1862.29 Q1585.76 1857.49 1583.12 1854.62 Q1580.51 1851.76 1576.18 1851.76 Q1571.28 1851.76 1568.32 1854.53 Q1565.39 1857.3 1564.94 1862.33 L1585.82 1862.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"208.502,1734.12 2640.76,1734.12 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"208.502,1290.2 2640.76,1290.2 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"208.502,846.289 2640.76,846.289 \"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"208.502,402.375 2640.76,402.375 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,1734.12 208.502,47.2441 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,1734.12 227.399,1734.12 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,1290.2 227.399,1290.2 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,846.289 227.399,846.289 \"/>\n<polyline clip-path=\"url(#clip220)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"208.502,402.375 227.399,402.375 \"/>\n<path clip-path=\"url(#clip220)\" d=\"M156.237 1719.92 Q152.626 1719.92 150.798 1723.48 Q148.992 1727.02 148.992 1734.15 Q148.992 1741.26 150.798 1744.82 Q152.626 1748.36 156.237 1748.36 Q159.872 1748.36 161.677 1744.82 Q163.506 1741.26 163.506 1734.15 Q163.506 1727.02 161.677 1723.48 Q159.872 1719.92 156.237 1719.92 M156.237 1716.21 Q162.048 1716.21 165.103 1720.82 Q168.182 1725.4 168.182 1734.15 Q168.182 1742.88 165.103 1747.48 Q162.048 1752.07 156.237 1752.07 Q150.427 1752.07 147.349 1747.48 Q144.293 1742.88 144.293 1734.15 Q144.293 1725.4 147.349 1720.82 Q150.427 1716.21 156.237 1716.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M147.279 1272.92 L165.635 1272.92 L165.635 1276.86 L151.561 1276.86 L151.561 1285.33 Q152.58 1284.98 153.599 1284.82 Q154.617 1284.64 155.636 1284.64 Q161.423 1284.64 164.802 1287.81 Q168.182 1290.98 168.182 1296.4 Q168.182 1301.97 164.71 1305.08 Q161.237 1308.15 154.918 1308.15 Q152.742 1308.15 150.474 1307.78 Q148.228 1307.41 145.821 1306.67 L145.821 1301.97 Q147.904 1303.11 150.126 1303.66 Q152.349 1304.22 154.825 1304.22 Q158.83 1304.22 161.168 1302.11 Q163.506 1300.01 163.506 1296.4 Q163.506 1292.78 161.168 1290.68 Q158.83 1288.57 154.825 1288.57 Q152.95 1288.57 151.075 1288.99 Q149.224 1289.4 147.279 1290.28 L147.279 1272.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M116.886 859.634 L124.525 859.634 L124.525 833.268 L116.214 834.935 L116.214 830.676 L124.478 829.009 L129.154 829.009 L129.154 859.634 L136.793 859.634 L136.793 863.569 L116.886 863.569 L116.886 859.634 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M156.237 832.088 Q152.626 832.088 150.798 835.653 Q148.992 839.194 148.992 846.324 Q148.992 853.43 150.798 856.995 Q152.626 860.537 156.237 860.537 Q159.872 860.537 161.677 856.995 Q163.506 853.43 163.506 846.324 Q163.506 839.194 161.677 835.653 Q159.872 832.088 156.237 832.088 M156.237 828.384 Q162.048 828.384 165.103 832.991 Q168.182 837.574 168.182 846.324 Q168.182 855.051 165.103 859.657 Q162.048 864.24 156.237 864.24 Q150.427 864.24 147.349 859.657 Q144.293 855.051 144.293 846.324 Q144.293 837.574 147.349 832.991 Q150.427 828.384 156.237 828.384 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M117.881 415.72 L125.52 415.72 L125.52 389.354 L117.21 391.021 L117.21 386.762 L125.474 385.095 L130.15 385.095 L130.15 415.72 L137.788 415.72 L137.788 419.655 L117.881 419.655 L117.881 415.72 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M147.279 385.095 L165.635 385.095 L165.635 389.03 L151.561 389.03 L151.561 397.503 Q152.58 397.155 153.599 396.993 Q154.617 396.808 155.636 396.808 Q161.423 396.808 164.802 399.979 Q168.182 403.151 168.182 408.567 Q168.182 414.146 164.71 417.248 Q161.237 420.327 154.918 420.327 Q152.742 420.327 150.474 419.956 Q148.228 419.586 145.821 418.845 L145.821 414.146 Q147.904 415.28 150.126 415.836 Q152.349 416.391 154.825 416.391 Q158.83 416.391 161.168 414.285 Q163.506 412.178 163.506 408.567 Q163.506 404.956 161.168 402.85 Q158.83 400.743 154.825 400.743 Q152.95 400.743 151.075 401.16 Q149.224 401.577 147.279 402.456 L147.279 385.095 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M17.7787 946.54 L24.5582 946.54 Q21.5345 949.786 20.0386 953.478 Q18.5426 957.139 18.5426 961.276 Q18.5426 969.424 23.5397 973.753 Q28.5049 978.082 37.9262 978.082 Q47.3156 978.082 52.3127 973.753 Q57.2779 969.424 57.2779 961.276 Q57.2779 957.139 55.782 953.478 Q54.2861 949.786 51.2623 946.54 L57.9782 946.54 Q60.2698 949.913 61.4156 953.701 Q62.5615 957.457 62.5615 961.658 Q62.5615 972.448 55.973 978.655 Q49.3526 984.861 37.9262 984.861 Q26.4679 984.861 19.8794 978.655 Q13.2591 972.448 13.2591 961.658 Q13.2591 957.393 14.4049 953.637 Q15.5189 949.85 17.7787 946.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M30.0964 923.05 Q30.0964 927.761 33.7885 930.498 Q37.4488 933.235 43.8463 933.235 Q50.2438 933.235 53.9359 930.53 Q57.5962 927.793 57.5962 923.05 Q57.5962 918.371 53.9041 915.634 Q50.212 912.897 43.8463 912.897 Q37.5124 912.897 33.8203 915.634 Q30.0964 918.371 30.0964 923.05 M25.1311 923.05 Q25.1311 915.411 30.0964 911.051 Q35.0616 906.69 43.8463 906.69 Q52.5991 906.69 57.5962 911.051 Q62.5615 915.411 62.5615 923.05 Q62.5615 930.721 57.5962 935.081 Q52.5991 939.41 43.8463 939.41 Q35.0616 939.41 30.0964 935.081 Q25.1311 930.721 25.1311 923.05 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M47.5702 897.587 L25.9905 897.587 L25.9905 891.731 L47.3474 891.731 Q52.4082 891.731 54.9545 889.758 Q57.4689 887.784 57.4689 883.837 Q57.4689 879.095 54.4452 876.358 Q51.4215 873.589 46.2016 873.589 L25.9905 873.589 L25.9905 867.732 L61.6384 867.732 L61.6384 873.589 L56.1639 873.589 Q59.4104 875.721 61.0019 878.554 Q62.5615 881.355 62.5615 885.079 Q62.5615 891.222 58.742 894.404 Q54.9226 897.587 47.5702 897.587 M25.1311 882.851 L25.1311 882.851 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M40.1224 826.037 L61.6384 826.037 L61.6384 831.893 L40.3133 831.893 Q35.2526 831.893 32.7381 833.867 Q30.2237 835.84 30.2237 839.787 Q30.2237 844.529 33.2474 847.266 Q36.2711 850.004 41.491 850.004 L61.6384 850.004 L61.6384 855.892 L25.9905 855.892 L25.9905 850.004 L31.5287 850.004 Q28.314 847.903 26.7225 845.07 Q25.1311 842.206 25.1311 838.482 Q25.1311 832.339 28.9505 829.188 Q32.7381 826.037 40.1224 826.037 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip220)\" d=\"M15.869 808.563 L25.9905 808.563 L25.9905 796.5 L30.542 796.5 L30.542 808.563 L49.8937 808.563 Q54.2542 808.563 55.4955 807.385 Q56.7368 806.176 56.7368 802.516 L56.7368 796.5 L61.6384 796.5 L61.6384 802.516 Q61.6384 809.295 59.124 811.873 Q56.5777 814.451 49.8937 814.451 L30.542 814.451 L30.542 818.748 L25.9905 818.748 L25.9905 814.451 L15.869 814.451 L15.869 808.563 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip222)\" d=\"M342.28 136.027 L342.28 1734.12 L703.063 1734.12 L703.063 136.027 L342.28 136.027 L342.28 136.027  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"342.28,136.027 342.28,1734.12 703.063,1734.12 703.063,136.027 342.28,136.027 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M703.063 47.2441 L703.063 1734.12 L1063.85 1734.12 L1063.85 47.2441 L703.063 47.2441 L703.063 47.2441  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"703.063,47.2441 703.063,1734.12 1063.85,1734.12 1063.85,47.2441 703.063,47.2441 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M1063.85 579.941 L1063.85 1734.12 L1424.63 1734.12 L1424.63 579.941 L1063.85 579.941 L1063.85 579.941  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1063.85,579.941 1063.85,1734.12 1424.63,1734.12 1424.63,579.941 1063.85,579.941 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M1424.63 47.2441 L1424.63 1734.12 L1785.41 1734.12 L1785.41 47.2441 L1424.63 47.2441 L1424.63 47.2441  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1424.63,47.2441 1424.63,1734.12 1785.41,1734.12 1785.41,47.2441 1424.63,47.2441 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M1785.41 47.2441 L1785.41 1734.12 L2146.19 1734.12 L2146.19 47.2441 L1785.41 47.2441 L1785.41 47.2441  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1785.41,47.2441 1785.41,1734.12 2146.19,1734.12 2146.19,47.2441 1785.41,47.2441 \"/>\n<path clip-path=\"url(#clip222)\" d=\"M2146.19 668.724 L2146.19 1734.12 L2506.98 1734.12 L2506.98 668.724 L2146.19 668.724 L2146.19 668.724  Z\" fill=\"#009af9\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip222)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2146.19,668.724 2146.19,1734.12 2506.98,1734.12 2506.98,668.724 2146.19,668.724 \"/>\n<circle clip-path=\"url(#clip222)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"522.672\" cy=\"136.027\" r=\"2\"/>\n<circle clip-path=\"url(#clip222)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"1244.24\" cy=\"579.941\" r=\"2\"/>\n<circle clip-path=\"url(#clip222)\" style=\"fill:#009af9; stroke:none; fill-opacity:0\" cx=\"2326.59\" cy=\"668.724\" r=\"2\"/>\n</svg>\n```\n:::\n:::\n\n\n**Remember to**:\n\n-   Evaluate all of your code cells, in order (using a `Run All`\n    command). This will make sure all output is visible and that the\n    code cells were evaluated in the correct order.\n-   Tag each of the problems when you submit to Gradescope; a 10%\n    penalty will be deducted if this is not done.\n\n::: {.cell .markdown}\n## Exercises (10 points)\n\nIn Problem 1, you will compute the probability of getting a specific combination of multiple dice rolls. The focus will be on understanding how the Monte Carlo estimate changes based on the number of simulations.\n\nIn Problem 2, we will implement the culmination of every episode of the long-running game show [The Price Is Right](https://en.wikipedia.org/wiki/The_Price_Is_Right): the [Showcase](https://en.wikipedia.org/wiki/The_Price_Is_Right#Showcase). You will be asked to make a plot of expected winnings by bid for a particular distribution of prize values.\n\nYou should always start any computing with random numbers by setting a \"seed,\" which controls the sequence of numbers which are generated (since these are not *really* random, just \"pseudorandom\"). In Julia, we do this with the `Random.seed!()` function.\n\n::: {#24d2368b .cell execution_count=5}\n``` {.julia .cell-code}\nRandom.seed!(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nTaskLocalRNG()\n```\n:::\n:::\n\n\nIt doesn't matter what seed you set, though different seeds might result in slightly different values. But setting a seed means every time your notebook is run, the answer will be the same.\n\n::: {.callout-warning}\n## Seeds and Reproducing Solutions\n\nIf you don't re-run your code in the same order or if you re-run the same cell repeatedly, you will not get the same solution. If you're working on a specific problem, you might want to re-use `Random.seed()` near any block of code you want to re-evaluate repeatedly.\n:::\n\n:::\n\n::: {.cell .markdown}\n### Problem 1 (5 points)\n\nWe want to know the probability of getting at least an 11 from rolling three fair, six-sided dice (this is actually an old Italian game called *passadieci*, which was analyzed by Galileo as one of the first examples of a rigorous study of probability).\n\n:::\n::: {.cell .markdown}\n#### Problem 1.1 (1 point)\n\nWrite a function called `passadieci()` to simulate this game, which will take as an input the number of realizations and output a vector of the sum of the three dice rolls for each realization.\n\n:::\n\n::: {.cell .markdown}\n### Problem 1.2 (2 points)\n\nGenerate 5,000 simulations of the game using your `passadieci()` function. Plot how the computed probability of winning the game changes as the number of simulations increases (you can do this by computing the frequency of wins for each additional simulation).\n\n:::\n\n::: {.cell .markdown}\n### Problem 1.3 (2 point)\n\nBased on your plot from Problem 1.2, how many simulations were needed for the win probability estimate to converge? What did you notice from your plot about the estimates prior to convergence?\n\n:::\n\n::: {.cell .markdown}\n## Problem 2 (5 points)\n\nThe Showcase is the final round of every episode of The Price is Right, matching the two big winners from the episode. Each contestant is shown a \"showcase\" of prizes, which are usually some combination of a trip, a motor vehicle, some furniture, and maybe some other stuff. They then each have to make a bid on the retail price of the showcase. The rules are:\n\n* an overbid is an automatic loss;\n* the contest who gets closest to the retail price wins their showcase;\n* if a contestant gets within \\$250 of the retail price and is closer than their opponent, they win both showcases.\n\nYour goal is to find a wager which maximizes your expected winnings, which we may as well call utility, based on your assessment of the probability of your showcase retail price. We'll assume that the distribution of all showcases offered by the show is given as truncated normal distribution, which means a normal distribution which has an upper and/or lower bound. `Distributions.jl` makes it easy to specify truncations on any distribution, not just normal distributions. For example, we'll use this distribution for the showcase values:\n\n::: {#fcd6bc06 .cell execution_count=6}\n``` {.julia .cell-code}\nshowcase_dist = truncated(Normal(31000, 4500), lower=5000, upper=42000)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nTruncated(Normal{Float64}(μ=31000.0, σ=4500.0); lower=5000.0, upper=42000.0)\n```\n:::\n:::\n\n\n:::\n\n::: {.cell .markdown}\n#### Problem 2.1 (3 points)\n\nWrite a function `showcase()` which takes in a bid value and uses Monte Carlo simulation to compute the expected value of the winnings. Make the following assumptions about your expected winnings if you don't overbid:\n\n* If you win both showcases, the value is the double of the single showcase value. \n* If you did not win both showcases but bid under the showcase value, the probability of being outbid increases linearly as the distance between your bid and the value increases (in other words, if you bid the exact value, you win with probability 1, and if you bid \\$0, you win with probability 0).\n\nHow did you decide how many samples to use within the function?\n\n:::\n::: {.cell .markdown}\n#### Problem 2.2 (2 points)\n\nPlot the expected winnings for bids ranging from \\$0 to \\$42,000. What do you notice?\n\n:::\n\n::: {.cell .markdown}\n\n## References\n\nPut any consulted sources here, including classmates you worked with/who helped you.\n:::\n\n",
    "supporting": [
      "lab02_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}