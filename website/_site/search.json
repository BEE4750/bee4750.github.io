[
  {
    "objectID": "computing/tutorials/julia-plots/tutorial.html",
    "href": "computing/tutorials/julia-plots/tutorial.html",
    "title": "Tutorial: Making Plots with Julia",
    "section": "",
    "text": "This tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is Plots.jl, but there are some others that provide useful features."
  },
  {
    "objectID": "computing/tutorials/julia-plots/tutorial.html#demos",
    "href": "computing/tutorials/julia-plots/tutorial.html#demos",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Demos",
    "text": "Demos\n\nusing Plots\nusing Random\nRandom.seed!(1);\n\n\nLine Plots\nTo generate a basic line plot, use plot.\n\ny = rand(5)\nplot(y, label=\"original data\", legend=:topright)\n\n\n\n\nThere’s a lot of customization here that can occur, a lot of which is discussed in the docs or can be found with some Googling.\n\n\nAdding Plot Elements\nNow we can add some other lines and point markers.\n\ny2 = rand(5)\ny3 = rand(5)\nplot!(y2, label=\"new data\")\nscatter!(y3, label=\"even more data\")\n\n\n\n\nRemember that an exclamation mark (!) at the end of a function name means that function modifies an object in-place, so plot! and scatter! modify the current plotting object, they don’t create a new plot.\n\n\nRemoving Plot Elements\nSometimes we want to remove legends, axes, grid lines, and ticks.\n\nplot!(legend=false, axis=false, grid=false, ticks=false)\n\n\n\n\n\n\nAspect Ratio\nIf we want to have a square aspect ratio, use ratio = 1.\n\nv = rand(5)\nplot(v, ratio=1, legend=false)\nscatter!(v)\n\n\n\n\n\n\nHeatmaps\nA heatmap is effectively a plotted matrix with colors chosen according to the values. Use clim to specify a fixed range for the color limits.\n\nA = rand(10, 10)\nheatmap(A, clim=(0, 1), ratio=1, legend=false, axis=false, ticks=false)\n\n\n\n\n\nM = [ 0 1 0; 0 0 0; 1 0 0]\nwhiteblack = [RGBA(1,1,1,0), RGB(0,0,0)]\nheatmap(c=whiteblack, M, aspect_ratio = 1, ticks=.5:3.5, lims=(.5,3.5), gridalpha=1, legend=false, axis=false, ylabel=\"i\", xlabel=\"j\")\n\n\n\n\n\nCustom Colors\n\nusing Colors\n\nmycolors = [colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\"]\nA = [i for i=50:300, j=1:100]\nheatmap(A, c=mycolors, clim=(1,300))\n\n\n\n\n\n\n\nPlotting Areas Under Curves\n\ny = rand(10)\nplot(y, fillrange= y.*0 .+ .5, label= \"above/below 1/2\", legend =:top)\n\n\n\n\n\nx = LinRange(0,2,100)\ny1 = exp.(x)\ny2 = exp.(1.3 .* x)\nplot(x, y1, fillrange = y2, fillalpha = 0.35, c = 1, label = \"Confidence band\", legend = :topleft)\n\n\n\n\n\nx = -3:.01:3\nareaplot(x, exp.(-x.^2/2)/√(2π),alpha=.25,legend=false)\n\n\n\n\n\nM = [1 2 3; 7 8 9; 4 5 6; 0 .5 1.5]\nareaplot(1:3, M, seriescolor = [:red :green :blue ], fillalpha = [0.2 0.3 0.4])\n\n\n\n\n\nusing SpecialFunctions\nf = x->exp(-x^2/2)/√(2π)\nδ = .01\nplot()\nx = √2 .* erfinv.(2 .*(δ/2 : δ : 1) .- 1)\nareaplot(x, f.(x), seriescolor=[ :red,:blue], legend=false)\nplot!(x, f.(x),c=:black)\n\n\n\n\n\n\nPlotting Shapes\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\ncircle(r,x,y) = (θ = LinRange(0,2π,500); (x.+r.*cos.(θ), y.+r.*sin.(θ)))\nplot(circle(5,0,0), ratio=1, c=:red, fill=true)\nplot!(rectangle(5*√2,5*√2,-2.5*√2,-2.5*√2),c=:white,fill=true,legend=false)\n\n\n\n\n\n\nPlotting Distributions\nThe StatsPlots.jl package is very useful for making various plots of probability distributions.\n\nusing Distributions, StatsPlots\nplot(Normal(2, 5))\n\n\n\n\n\nscatter(LogNormal(0.8, 1.5))\n\n\n\n\nWe can also use this functionality to plot distributions of data in tabular data structures like DataFrames.\n\nusing DataFrames\ndat = DataFrame(a = 1:10, b = 10 .+ rand(10), c = 10 .* rand(10))\n@df dat density([:b :c], color=[:black :red])\n\n\n\n\n\n\nEditing Plots Manually\n\npl = plot(1:4,[1, 4, 9, 16])\n\n\n\n\n\npl.attr\n\nRecipesPipeline.DefaultsDict with 30 entries:\n  :dpi                      => 96\n  :background_color_outside => :match\n  :plot_titlefontvalign     => :vcenter\n  :warn_on_unsupported      => true\n  :background_color         => RGBA{Float64}(1.0,1.0,1.0,1.0)\n  :size                     => (672, 480)\n  :inset_subplots           => nothing\n  :display_type             => :auto\n  :overwrite_figure         => true\n  :html_output_format       => :svg\n  :plot_titlefontfamily     => :match\n  :plot_titleindex          => 0\n  :foreground_color         => RGB{N0f8}(0.0,0.0,0.0)\n  :window_title             => \"Plots.jl\"\n  :plot_titlefontrotation   => 0.0\n  :extra_plot_kwargs        => Dict{Any, Any}()\n  :plot_titlefonthalign     => :hcenter\n  :pos                      => (0, 0)\n  :tex_output_standalone    => false\n  :extra_kwargs             => :series\n  :layout                   => 1\n  :thickness_scaling        => 1\n  :plot_titlelocation       => :center\n  :plot_titlefontsize       => 16\n  :plot_title               => \"\"\n  ⋮                         => ⋮\n\n\n\npl.series_list[1]\n\nPlots.Series(RecipesPipeline.DefaultsDict(:plot_object => Plot{Plots.GRBackend() n=1}, :subplot => Subplot{1}, :label => \"y1\", :fillalpha => nothing, :linealpha => nothing, :linecolor => RGBA{Float64}(0.0,0.6056031611752245,0.9786801175696073,1.0), :series_index => 1, :markerstrokealpha => nothing, :markeralpha => nothing, :seriestype => :path…))\n\n\n\npl[:size]=(300,200)\n\n(300, 200)\n\n\n\npl\n\n\n\n\n\n\nLog-Scaled Axes\n\nxx = .1:.1:10\nplot(xx.^2, xaxis=:log, yaxis=:log)\n\n\n\n\n\nplot(exp.(x), yaxis=:log)"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html",
    "href": "computing/tutorials/julia-basics/tutorial.html",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "This tutorial will give some examples of basic Julia commands and syntax."
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#getting-help",
    "href": "computing/tutorials/julia-basics/tutorial.html#getting-help",
    "title": "Tutorial: Julia Basics",
    "section": "Getting Help",
    "text": "Getting Help\n\nCheck out the official documentation for Julia: https://docs.julialang.org/en/v1/.\nStack Overflow is a commonly-used resource for programming assistance.\nAt a code prompt or in the REPL, you can always type ?functionname to get help."
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#comments",
    "href": "computing/tutorials/julia-basics/tutorial.html#comments",
    "title": "Tutorial: Julia Basics",
    "section": "Comments",
    "text": "Comments\nComments hide statements from the interpreter or compiler. It’s a good idea to liberally comment your code so readers (including yourself!) know why your code is structured and written the way it is. Single-line comments in Julia are preceded with a #. Multi-line comments are preceded with #= and ended with =#"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#suppressing-output",
    "href": "computing/tutorials/julia-basics/tutorial.html#suppressing-output",
    "title": "Tutorial: Julia Basics",
    "section": "Suppressing Output",
    "text": "Suppressing Output\nYou can suppress output using a semi-colon (;).\n\n4+8;\n\nThat didn’t show anything, as opposed to:\n\n4+8\n\n12"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#variables",
    "href": "computing/tutorials/julia-basics/tutorial.html#variables",
    "title": "Tutorial: Julia Basics",
    "section": "Variables",
    "text": "Variables\nVariables are names which correspond to some type of object. These names are bound to objects (and hence their values) using the = operator.\n\nx = 5\n\n5\n\n\nVariables can be manipulated with standard arithmetic operators.\n\n4 + x\n\n9\n\n\nAnother advantage of Julia is the ability to use Greek letters (or other Unicode characters) as variable names. For example, type a backslash followed by the name of the Greek letter (i.e. \\alpha) followed by TAB.\n\nα = 3\n\n3\n\n\nYou can also include subscripts or superscripts in variable names using \\_ and \\^, respectively, followed by TAB. If using a Greek letter followed by a sub- or super-script, make sure you TAB following the name of the letter before the sub- or super-script. Effectively, TAB after you finish typing the name of each \\character.\n\nβ₁ = 10 # The name of this variable was entered with \\beta + TAB + \\_1 + TAB\n\n10\n\n\nHowever, try not to overwrite predefined names! For example, you might not want to use π as a variable name…\n\nπ\n\nπ = 3.1415926535897...\n\n\nIn the grand scheme of things, overwriting π is not a huge deal unless you want to do some trigonometry. However, there are more important predefined functions and variables that you may want to be aware of. Always check that a variable or function name is not predefined!"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#data-types",
    "href": "computing/tutorials/julia-basics/tutorial.html#data-types",
    "title": "Tutorial: Julia Basics",
    "section": "Data Types",
    "text": "Data Types\nEach datum (importantly, not the variable which is bound to it) has a data type. Julia types are similar to C types, in that they require not only the type of data (Int, Float, String, etc), but also the precision (which is related to the amount of memory allocated to the variable). Issues with precision won’t be a big deal in this class, though they matter when you’re concerned about performance vs. decimal accuracy of code.\nYou can identify the type of a variable or expression with the typeof() function.\n\ntypeof(\"This is a string.\")\n\nString\n\n\n\ntypeof(x)\n\nInt64\n\n\n\nNumeric types\nA key distinction is between an integer type (or Int) and a floating-point number type (or float). Integers only hold whole numbers, while floating-point numbers correspond to numbers with fractional (or decimal) parts. For example, 9 is an integer, while 9.25 is a floating point number. The difference between the two has to do with the way the number is stored in memory. 9, an integer, is handled differently in memory than 9.0, which is a floating-point number, even though they’re mathematically the same value.\n\ntypeof(9)\n\nInt64\n\n\n\ntypeof(9.25)\n\nFloat64\n\n\nSometimes certain function specifications will require you to use a Float variable instead of an Int. One way to force an Int variable to be a Float is to add a decimal point at the end of the integer.\n\ntypeof(9.)\n\nFloat64\n\n\n\n\nStrings\nStrings hold characters, rather than numeric values. Even if a string contains what seems like a number, it is actually stored as the character representation of the digits. As a result, you cannot use arithmetic operators (for example) on this datum.\n\n\"5\" + 5\n\nLoadError: MethodError: no method matching +(::String, ::Int64)\n\u001b[0mClosest candidates are:\n\u001b[0m  +(::Any, ::Any, \u001b[91m::Any\u001b[39m, \u001b[91m::Any...\u001b[39m) at operators.jl:591\n\u001b[0m  +(\u001b[91m::T\u001b[39m, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8} at int.jl:87\n\u001b[0m  +(\u001b[91m::T\u001b[39m, ::Integer) where T<:AbstractChar at char.jl:237\n\u001b[0m  ...\n\n\nHowever, you can try to tell Julia to interpret a string encoding a numeric character as a numeric value using the parse() function. This can also be used to encode a numeric data as a string.\n\nparse(Int64, \"5\") + 5\n\n10\n\n\nTwo strings can be concatenated using *:\n\n\"Hello\" * \" \" * \"there\"\n\n\"Hello there\"\n\n\n\n\nBooleans\nBoolean variables (or Bools) are logical variables, that can have true or false as values.\n\nb = true\n\ntrue\n\n\nNumerical comparisons, such as ==, !=, or <, return a Bool.\n\nc = 9 > 11\n\nfalse\n\n\nBools are important for logical flows, such as if-then-else blocks or certain types of loops."
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#mathematical-operations",
    "href": "computing/tutorials/julia-basics/tutorial.html#mathematical-operations",
    "title": "Tutorial: Julia Basics",
    "section": "Mathematical operations",
    "text": "Mathematical operations\nAddition, subtraction, multiplication, and division work as you would expect. Just pay attention to types! The type of the output is influenced by the type of the inputs: adding or multiplying an Int by a Float will always result in a Float, even if the Float is mathematically an integer. Division is a little special: dividing an Int by another Int will still return a float, because Julia doesn’t know ahead of time if the denominator is a factor of the numerator.\n\n3 + 5\n\n8\n\n\n\n3 * 2\n\n6\n\n\n\n3 * 2.\n\n6.0\n\n\n\n6 - 2\n\n4\n\n\n\n9 / 3\n\n3.0\n\n\nRaising a base to an exponent uses ^, not **.\n\n3^2\n\n9\n\n\nJulia allows the use of updating operators to simplify updating a variable in place (in other words, using x += 5 instead of x = x + 5.\n\nBoolean algebra\nLogical operations can be used on variables of type Bool. Typical operators are && (and), || (or), and ! (not).\n\ntrue && true\n\ntrue\n\n\n\ntrue && false\n\nfalse\n\n\n\ntrue || false\n\ntrue\n\n\n\n!true\n\nfalse\n\n\nComparisons can be chained together.\n\n3 < 4 || 8 == 12\n\ntrue\n\n\nWe didn’t do this above, since Julia doesn’t require it, but it’s easier to understand these types of compound expressions if you use parentheses to signal the order of operations. This helps with debugging!\n\n(3 < 4) || (8 == 12)\n\ntrue"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#data-structures",
    "href": "computing/tutorials/julia-basics/tutorial.html#data-structures",
    "title": "Tutorial: Julia Basics",
    "section": "Data Structures",
    "text": "Data Structures\nData structures are containers which hold multiple values in a convenient fashion. Julia has several built-in data structures, and there are many extensions provided in additional packages.\n\nTuples\nTuples are collections of values. Julia will pay attention to the types of these values, but they can be mixed. Tuples are also immutable: their values cannot be changed once they are defined.\nTuples can be defined by just separating values with commas.\n\ntest_tuple = 4, 5, 6\n\n(4, 5, 6)\n\n\nTo access a value, use square brackets and the desired index. Note: Julia indexing starts at 1, not 0!\n\ntest_tuple[1]\n\n4\n\n\nAs mentioned above, tuples are immutable. What happens if we try to change the value of the first element of test_tuple?\n\ntest_tuple[1] = 5\n\nLoadError: MethodError: no method matching setindex!(::Tuple{Int64, Int64, Int64}, ::Int64, ::Int64)\n\n\nTuples also do not have to hold the same types of values.\n\ntest_tuple_2 = 4, 5., 'h'\ntypeof(test_tuple_2)\n\nTuple{Int64, Float64, Char}\n\n\nTuples can also be defined by enclosing the values in parentheses.\ntest_tuple_3 = (4, 5., 'h')\ntypeof(test_tuple_3)\n\n\nArrays\nArrays also hold multiple values, which can be accessed based on their index position. Arrays are commonly defined using square brackets.\n\ntest_array = [1, 4, 7, 8]\ntest_array[2]\n\n4\n\n\nUnlike tuples, arrays are mutable, and their contained values can be changed later.\n\ntest_array[1] = 6\ntest_array\n\n4-element Vector{Int64}:\n 6\n 4\n 7\n 8\n\n\nArrays also can hold multiple types. Unlike tuples, this causes the array to no longer care about types at all.\n\ntest_array_2 = [6, 5., 'h']\ntypeof(test_array_2)\n\n\nVector{Any} (alias for Array{Any, 1})\n\n\n\nCompare this with test_array:\n\ntypeof(test_array)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\n\nDictionaries\nInstead of using integer indices based on position, dictionaries are indexed by keys. They are specified by passing key-value pairs to the Dict() method.\n\ntest_dict = Dict(\"A\"=>1, \"B\"=>2)\ntest_dict[\"B\"]\n\n2\n\n\n\n\nComprehensions\nCreating a data structure with more than a handful of elements can be tedious to do by hand. If your desired array follows a certain pattern, you can create structures using a comprehension. Comprehensions iterate over some other data structure (such as an array) implicitly and populate the new data structure based on the specified instructions.\n\n[i^2 for i in 0:1:5]\n\n6-element Vector{Int64}:\n  0\n  1\n  4\n  9\n 16\n 25\n\n\nFor dictionaries, make sure that you also specify the keys.\n\nDict(string(i) => i^2 for i in 0:1:5)\n\nDict{String, Int64} with 6 entries:\n  \"4\" => 16\n  \"1\" => 1\n  \"5\" => 25\n  \"0\" => 0\n  \"2\" => 4\n  \"3\" => 9"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#functions",
    "href": "computing/tutorials/julia-basics/tutorial.html#functions",
    "title": "Tutorial: Julia Basics",
    "section": "Functions",
    "text": "Functions\nA function is an object which accepts a tuple of arguments and maps them to a return value. In Julia, functions are defined using the following syntax.\n\nfunction my_actual_function(x, y)\n    return x + y\nend\nmy_actual_function(3, 5)\n\n8\n\n\nFunctions in Julia do not require explicit use of a return statement. They will return the last expression evaluated in their definition. However, it’s good style to explicitly return function outputs. This improves readability and debugging, especially when functions can return multiple expressions based on logical control flows (if-then-else blocks).\nFunctions in Julia are objects, and can be treated like other objects. They can be assigned to new variables or passed as arguments to other functions.\n\ng = my_actual_function\ng(3, 5)\n\n8\n\n\n\nfunction function_of_functions(f, x, y)\n    return f(x, y)\nend\nfunction_of_functions(g, 3, 5)\n\n8\n\n\n\nShort and Anonymous Functions\nIn addition to the long form of the function definition shown above, simple functions can be specified in more compact forms when helpful.\nThis is the short form:\n\nh₁(x) = x^2 # make the subscript using \\_1 + <TAB>\nh₁(4)\n\n16\n\n\nThis is the anonymous form:\n\nx->sin(x)\n(x->sin(x))(π/4)\n\n0.7071067811865475\n\n\n\n\nMutating Functions\nThe convention in Julia is that functions should not modify (or mutate) their input data. The reason for this is to ensure that the data is preserved. Mutating functions are mainly appropriate for applications where performance needs to be optimized, and making a copy of the input data would be too memory-intensive.\nIf you do write a mutating function in Julia, the convention is to add a ! to its name, like my_mutating_function!(x).\n\n\nOptional arguments\nThere are two extremes with regard to function parameters which do not always need to be changed. The first is to hard-code them into the function body, which has a clear downside: when you do want to change them, the function needs to be edited directly. The other extreme is to treat them as regular arguments, passing them every time the function is called. This has the downside of potentially creating bloated function calls, particularly when there is a standard default value that makes sense for most function evaluations.\nMost modern languages, including Julia, allow an alternate solution, which is to make these arguments optional. This involves setting a default value, which is used unless the argument is explicitly defined in a function call.\n\nfunction setting_optional_arguments(x, y, c=0.5)\n    return c * (x + y)\nend\n\nsetting_optional_arguments (generic function with 2 methods)\n\n\nIf we want to stick with the fixed value \\(c=0.5\\), all we have to do is call setting_optional_arguments with the x and y arguments.\n\nsetting_optional_arguments(3, 5)\n\n4.0\n\n\nOtherwise, we can pass a new value for c.\n\nsetting_optional_arguments(3, 5, 2)\n\n16\n\n\n\n\nPassing data structures as arguments\nInstead of passing variables individually, it may make sense to pass a data structure, such as an array or a tuple, and then unpacking within the function definition. This is straightforward in long form: access the appropriate elements using their index.\nIn short or anonymous form, there is a trick which allows the use of readable variables within the function definition.\n\nh₂((x,y)) = x*y # enclose the input arguments in parentheses to tell Julia to expect and unpack a tuple\n\nh₂ (generic function with 1 method)\n\n\n\nh₂((2, 3)) # this works perfectly, as we passed in a tuple\n\n6\n\n\n\nh₂(2, 3) # this gives an error, as h₂ expects a single tuple, not two different numeric values\n\nLoadError: MethodError: no method matching h₂(::Int64, ::Int64)\n\u001b[0mClosest candidates are:\n\u001b[0m  h₂(::Any) at In[280]:1\n\n\n\nh₂([3, 10]) # this also works with arrays instead of tuples\n\n30\n\n\n\n\nVectorized operations\nJulia uses dot syntax to vectorize an operation and apply it element-wise across an array.\nFor example, to calculate the square root of 3:\n\nsqrt(3)\n\n1.7320508075688772\n\n\nTo calculate the square roots of every integer between 1 and 5:\n\nsqrt.([1, 2, 3, 4, 5])\n\n5-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n 2.23606797749979\n\n\nThe same dot syntax is used for arithmetic operations over arrays, since these operations are really functions.\n\n[1, 2, 3, 4] .* 2\n\n4-element Vector{Int64}:\n 2\n 4\n 6\n 8\n\n\nVectorization can be faster and is more concise to write and read than applying the same function to multiple variables or objects explicitly, so take advantage!\n\n\nReturning multiple values\nYou can return multiple values by separating them with a comma. This implicitly causes the function to return a tuple of values.\n\nfunction return_multiple_values(x, y)\n    return x + y, x * y\nend\nreturn_multiple_values(3, 5)\n\n(8, 15)\n\n\nThese values can be unpacked into multiple variables.\n\nn, ν = return_multiple_values(3, 5)\nn\n\n8\n\n\n\nν\n\n15\n\n\n\n\nReturning nothing\nSometimes you don’t want a function to return any values at all. For example, you might want a function that only prints a string to the console.\n\nfunction print_some_string(x)\n    println(\"x: $x\")\n    return nothing\nend\nprint_some_string(42)\n\nx: 42"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#printing-text-output",
    "href": "computing/tutorials/julia-basics/tutorial.html#printing-text-output",
    "title": "Tutorial: Julia Basics",
    "section": "Printing Text Output",
    "text": "Printing Text Output\nThe Text() function returns its argument as a plain text string. Notice how this is different from evaluating a string!\n\nText(\"I'm printing a string.\")\n\nI'm printing a string.\n\n\nText() is used in this tutorial as it returns the string passed to it. To print directly to the console, use println().\n\nprintln(\"I'm writing a string to the console.\")\n\nI'm writing a string to the console.\n\n\n\nPrinting Variables In a String\nWhat if we want to include the value of a variable inside of a string? We do this using string interpolation, using $variablename inside of the string.\n\nbar = 42\nText(\"Now I'm printing a variable: $bar\")\n\nNow I'm printing a variable: 42"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#control-flows",
    "href": "computing/tutorials/julia-basics/tutorial.html#control-flows",
    "title": "Tutorial: Julia Basics",
    "section": "Control Flows",
    "text": "Control Flows\nOne of the tricky things about learning a new programming language can be getting used to the specifics of control flow syntax. These types of flows include conditional if-then-else statements or loops.\n\nConditional Blocks\nConditional blocks allow different pieces of code to be evaluated depending on the value of a boolean expression or variable. For example, if we wanted to compute the absolute value of a number, rather than using abs():\n\nfunction our_abs(x)\n    if x >= 0\n        return x\n    else\n        return -x\n    end\nend\n\nour_abs (generic function with 1 method)\n\n\n\nour_abs(4)\n\n4\n\n\n\nour_abs(-4)\n\n4\n\n\nTo nest conditional statements, use elseif.\n\nfunction test_sign(x)\n    if x > 0\n        return Text(\"x is positive.\")\n    elseif x < 0\n        return Text(\"x is negative.\")\n    else\n        return Text(\"x is zero.\")\n    end\nend\n\ntest_sign (generic function with 1 method)\n\n\n\ntest_sign(-5)\n\nx is negative.\n\n\n\ntest_sign(0)\n\nx is zero.\n\n\n\n\nLoops\nLoops allow expressions to be evaluated repeatedly until they are terminated. The two main types of loops are while loops and for loops.\n\nWhile loops\nwhile loops continue to evaluate an expression so long as a specified boolean condition is true. This is useful when you don’t know how many iterations it will take for the desired goal to be reached.\n\nfunction compute_factorial(x)\n    factorial = 1\n    while (x > 1)\n        factorial *= x\n        x -= 1\n    end\n    return factorial\nend\ncompute_factorial(5)\n\n120\n\n\n\nWhile loops can easily turn into infinite loops if the condition is never meaningfully updated. Be careful, and look there if your programs are getting stuck. Also, If the expression in a while loop is false when the loop is reached, the loop will never be evaluated.\n\n\n\nFor loops\nfor loops run for a finite number of iterations, based on some defined index variable.\n\nfunction add_some_numbers(x)\n    total_sum = 0 # initialize at zero since we're adding\n    for i=1:x # the counter i is updated every iteration\n        total_sum += i\n    end\n    return total_sum\nend\nadd_some_numbers(4)\n\n10\n\n\nfor loops can also iterate over explicitly passed containers, rather than iterating over an incrementally-updated index sequence. Use the in keyword when defining the loop.\n\nfunction add_passed_numbers(set)\n    total_sum = 0\n    for i in set # this is the syntax we use when we want i to correspond to different container values\n        total_sum += i\n    end\n    return total_sum\nend\nadd_passed_numbers([1, 3, 5])\n\n9"
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#linear-algebra",
    "href": "computing/tutorials/julia-basics/tutorial.html#linear-algebra",
    "title": "Tutorial: Julia Basics",
    "section": "Linear algebra",
    "text": "Linear algebra\nMatrices are defined in Julia as 2d arrays. Unlike basic arrays, matrices need to contain the same data type so Julia knows what operations are allowed. When defining a matrix, use semicolons to separate rows. Row elements should not be separated by commas.\n\ntest_matrix = [1 2 3; 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nYou can also specify matrices using spaces and newlines.\n\ntest_matrix_2 = [1 2 3\n                 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nFinally, matrices can be created using comprehensions by separating the inputs by a comma.\n\n[i*j for i in 1:1:5, j in 1:1:5]\n\n5×5 Matrix{Int64}:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n\n\nVectors are treated as 1d matrices.\n\ntest_row_vector = [1 2 3]\n\n1×3 Matrix{Int64}:\n 1  2  3\n\n\n\ntest_col_vector = [1; 2; 3]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\nMany linear algebra operations on vectors and matrices can be loaded using the LinearAlgebra package."
  },
  {
    "objectID": "computing/tutorials/julia-basics/tutorial.html#package-management",
    "href": "computing/tutorials/julia-basics/tutorial.html#package-management",
    "title": "Tutorial: Julia Basics",
    "section": "Package management",
    "text": "Package management\nSometimes you might need functionality that does not exist in base Julia. Julia handles packages using the Pkg package manager. After finding a package which has the functions that you need, you have two options: 1. Use the package management prompt in the Julia REPL (the standard Julia interface; what you get when you type julia in your terminal). Enter this by typing ] at the standard green Julia prompt julia>. This will become a blue pkg>. You can then download and install new packages using add packagename. 2. From the standard prompt, enter using Pkg; Pkg.add(packagename). The packagename package can then be used by adding using packagename to the start of the script."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "BEE 4750: Environmental Systems Analysis",
    "section": "",
    "text": "This page contains a schedule of the topics, content, and assignments for the semester. Note that this schedule will be updated as necessary the semester progresses, with all changes documented here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nSlides\nAE\nLab\nHW\nProject\n\n\n\n\n1\nMon, Aug 21\nWelcome to BEE 4750!\n\n\n\n\n\n\n\n\nWed, Aug 23\nJulia Basics and Setup"
  },
  {
    "objectID": "computing/tutorials/using-JuMP/tutorial.html",
    "href": "computing/tutorials/using-JuMP/tutorial.html",
    "title": "Tutorial: Solving Linear Programs with JuMP",
    "section": "",
    "text": "This tutorial will demonstrate how to use the JuMP package in Julia to solve linear optimization problems. It draws heavily from this tutorial by Jesse D. Jenkins and Michael R. Davidson.\nJuMP (“Julia for Mathematical Programming”) is an open-source Julia package that adds functionality for formulating and solving a variety of optimization problems. One advantage of JuMP is that its syntax matches the typical mathematical formalism used to specify optimization problems. We will use JuMP in this class for our optimization work."
  },
  {
    "objectID": "computing/tutorials/julia-plots/tutorial.html#some-resources",
    "href": "computing/tutorials/julia-plots/tutorial.html#some-resources",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Some Resources",
    "text": "Some Resources\n\nPlots.jl useful tips\nPlots.jl examples\nPlot attributes\nAxis attributes\nColor names"
  },
  {
    "objectID": "computing/tutorials/using-JuMP/tutorial.html#setup",
    "href": "computing/tutorials/using-JuMP/tutorial.html#setup",
    "title": "Tutorial: Solving Linear Programs with JuMP",
    "section": "Setup",
    "text": "Setup\nHere we will outline the basic steps for configuring JuMP, though you can also refer to the official Installation Guide.\nIf JuMP is not already in your environment (it will be for any of your assignments, but may not be if you’re doing something independently), you will need to install it. You will also need to select a solver and install the relevant package. Some of these are commercial, while others are open source. Solvers are also not typically universal, as different types of optimization problems use different algorithms, so be aware of what problem you’re trying to solve instead of just blindly copying code from one task to another.\nFor example, for the linear programming example, we will use the Clp (COIN-OR Linear Programming) solver via the Clp package. As seen on the solver table, Clp is open source (via the EPL, or Eclipse Public License) and can solve linear programs (LP). For the mixed-integer linear programming example, we will instead of the Cbc (COIN-OR Branch and Cut) solver via the Cbc package. This is also open-source (it comes from the same group as Clp) and can solve mixed-integer or binary linear programs."
  },
  {
    "objectID": "computing/tutorials/using-JuMP/tutorial.html#linear-programming-example-how-many-widgets-should-a-factory-produce",
    "href": "computing/tutorials/using-JuMP/tutorial.html#linear-programming-example-how-many-widgets-should-a-factory-produce",
    "title": "Tutorial: Solving Linear Programs with JuMP",
    "section": "Linear Programming Example: How Many Widgets Should A Factory Produce?",
    "text": "Linear Programming Example: How Many Widgets Should A Factory Produce?\n\nDefining The Problem\nSuppose we own a factory that can produce two types of widgets:\n\nWidget A generates a profit of \\(p_A = \\$100\\) per widget; and\nWidget B generates a profit of \\(p_B = \\$75\\) per widget. Let \\(x\\) be the number of units of widget A that we want to produce, and \\(y\\) the number of units of widget B. Our goal is to maximize our total profit \\(p_Ax + p_By\\). This is the objective function. We express this objective using the equation \\[\\max 100x + 75y.\\]\n\nFurther, we cannot build a negative number of either type of widget. This is known as a non-negativity constraint, and can be expressed as \\[\\begin{align}\nx &\\geq 0\\\\\ny &\\geq 0\n\\end{align}\\]\nThis isn’t a very interesting problem yet! We would simply build as much of both widgets as we could, because there are no constraints on our ability to produce. To make this more realistic, let’s suppose that both widgets are produced using the same raw material \\(M\\), of which we can only procure 300 units. Then, if:\n\nWidget A requires 40 units of \\(M\\) per widget, and\nWidget B requires 20 units of \\(M\\) per widget, we arrive at the following material constraint: \\[40x + 20y \\leq 300.\\]\n\nBut we might have another constraint: time! Each widget may take a different amount of labor to produce. For example, let’s say that\n\nWidget A takes 6 hours to produce and\nWidget B takes 12 hours to produce. Further, there are only 80 hours per work that can be allocated to widget production. This becomes the time constraint \\[6x + 12y \\leq 80.\\]\n\nConsolidating equations (1)–(4) gives us the following constrained optimization problem: \\[\\begin{align}\n& &\\max 100x + 75y\\\\\n&\\text{subject to} & \\\\\n& & x \\geq 0\\\\\n& & y \\geq 0 \\\\\n& & 40x + 20y \\leq 300\\\\\n& & 6x + 12y \\leq 80\n\\end{align}\\]\n\n\nVisualizing the Problem\nLet’s do some plotting to examine the geometry of our optimization problem. We can do this using the Plots package in Julia.\n\n# set up objective function parameters and variables\npa = 100\npb = 75\na = range(0, 8, step=0.25)\nb = range(0, 8, step=0.25)\n\n# define objective function\nf(a, b) = pa * a + pb * b\n\nf (generic function with 1 method)\n\n\n\n# start plotting\nusing Plots\nplotlyjs()\n\ncontour(a,b,(a,b)->f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a[a.<=11], (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a[a.<=8], (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n\n\n\n\nWe can see exactly where the solution will be, at the intersection of the feasible regions imposed by the two constraints (note how this is related to the gradient of the objective function)! Let’s now use JuMP to identify the location of this point (though we could also solve for it using linear algebra).\n\n\nSolving This Problem Using JuMP\n\nSetting Up the Model and Solver\nFirst, we should load JuMP and Clp.\n\nusing JuMP\nusing Clp\n\nTo solve our problem, first we need to define the model. The model object has lots of attributes, including the variables, constraints, solver options, etc. We create a new model using the Model() function. Since we are using the Clp solver, we need to tell JuMP to use the Clp.Optimizer solver function.\n\nfactory_model = Model(Clp.Optimizer)\n\nA JuMP Model\nFeasibility problem with:\nVariables: 0\nModel mode: AUTOMATIC\nCachingOptimizer state: EMPTY_OPTIMIZER\nSolver name: Clp\n\n\nThere are a bunch of attributes and options that we could set, but we won’t in this example. If needed, look at the Clp.jl documentation.\n\n\nDefine Variables\nDecision variables (\\(x\\) and \\(y\\) in this case) in JuMP are defined using the @variable macro. The first argument passed to @variable() is the model object, in this case, factory_model, and the second argument are bounds on that variable, created using >= and <=. JuMP will interpret the bound specification to obtain the variable name. In this case, our only bounds directly on the variables are the non-negativity constraints.\n\n@variable(factory_model, x >= 0);\n\n\n@variable(factory_model, y >= 0);\n\nIf we had a free (or unbounded) variable \\(z\\), we could declare that variable using @variable(model, z). JuMP also requires unique names for each variable, or it will throw an error. This is one place where it’s nice that Julia lets us use sub- and superscripts in variable names!\nIf we did want to modify the bounds after defining the variable, we could do so using the set_lower_bound and set_upper_bound functions, or we could remove them using delete_lower_bound and delete_upper_bound.\nFinally, if we want to see all of the variables associated with a model, we can use the all_variables function to obtain an array.\n\nall_variables(factory_model)\n\n2-element Vector{VariableRef}:\n x\n y\n\n\n\n\nDefine Constraints\nWhen defining variables, we were able to declare constraints on their values by specifying upper and lower bounds. However, we also have other constraints, which involve multiple decision variables. These are specified using the @constraint macro. Unlike variables, we also need to pass names for each constraint. We will use time for the time constraint and materials for the materials constraint. These names must be unique.\n\n@constraint(factory_model, time, 6x + 12y <= 80) # specify the time constraint\n\ntime : 6 x + 12 y ≤ 80.0\n\n\n\n@constraint(factory_model, materials, 40x + 20y <= 300) # materials constraint\n\nmaterials : 40 x + 20 y ≤ 300.0\n\n\n\n\nDefine Objective Function\nSo far, we’ve defined the feasible region of the decision-variable domain by setting the constraints. But we need to specify our objective function to know what we are trying to minimize or maximize over this region. We define the objective function using the @objective macro. In addition to specifying the model objective and the function, we need to tell JuMP whether we want to minimize or maximize.\n\n@objective(factory_model, Max, 100x + 75y)\n\n\\[ 100 x + 75 y \\]\n\n\nNow, let’s look at the model specification.\n\nprint(factory_model)\n\n\\[ \\begin{aligned}\n\\max\\quad & 100 x + 75 y\\\\\n\\text{Subject to} \\quad & 6 x + 12 y \\leq 80.0\\\\\n& 40 x + 20 y \\leq 300.0\\\\\n& x \\geq 0.0\\\\\n& y \\geq 0.0\\\\\n\\end{aligned} \\]\n\n\nWe can also get a nicely styled LaTeX version, which might be useful.\n\nlatex_formulation(factory_model)\n\n\\[ \\begin{aligned}\n\\max\\quad & 100 x + 75 y\\\\\n\\text{Subject to} \\quad & 6 x + 12 y \\leq 80.0\\\\\n& 40 x + 20 y \\leq 300.0\\\\\n& x \\geq 0.0\\\\\n& y \\geq 0.0\\\\\n\\end{aligned} \\]\n\n\nWe won’t go into detail here, but there are other ways to define the model, which are detailed in the JuMP documentation. For example, we can specify multiple variables using @variables. Similarly, we can use @constraints to define multiple constraints at once. Or we can use loops to define multiple constraints or constraints involving many variables. We can also specify the model in vectorized syntax, which is similar to how linear programs are specified in MATLAB.\n\n\nSolve the Model\nNow it’s time to solve the model and find the optimal values \\((x^*, y^*)\\). Since we specified the solver when we initialized factory_model, all we have to do is call the optimize! function.\n\noptimize!(factory_model)\n\nCoin0506I Presolve 2 (0) rows, 2 (0) columns and 4 (0) elements\nClp0006I 0  Obj 0 Dual inf 175 (2)\nClp0006I 2  Obj 847.22222\nClp0000I Optimal - objective value 847.22222\nClp0032I Optimal objective 847.2222222 - 2 iterations time 0.002\n\n\n\n\nQuery the Solution\nTo find the optimal values of our decision variables, we need to query the values of the variables using value.(). We use value.() (the vectorized version of value()) because JuMP stores decision variables differently depending on their number and how they were defined. Uses the dot-syntax here works with any model specification, while the plain value() will not work if a queried decision variable is stored as a vector.\n\nvalue.(x)\n\n5.555555555555555\n\n\n\nvalue.(y)\n\n3.8888888888888884\n\n\nSo we can see that our optimal inputs are \\[(x^*, y^*) = (5.56, 3.89)\\] (and we’ll pretend that we can manufacture and sell parts of widgets).\n\n\nVisualize the Solution\nLet’s take our previous plot and add the solution point to make sure that we got the solution we expected.\n\n# replot the previous plot\ncontour(a,b,(a,b)->f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a, (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a, (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n\n# now we plot the solution that we obtained\nscatter!([value.(x)],[value.(y)], markercolor=\"blue\")\n\n\n\n\nThe solution \\[(x^*, y^*)\\] is exactly where we deduced it would be geometrically.\n\n\nOther Stuff We Can Do\nWe can also use value.() to evaluate our constraints without manually using the equations.\n\nvalue.(time)\n\n80.0\n\n\n\nvalue.(materials)\n\n300.0\n\n\nWhat if we also want the optimal objective value? We can obtain this using objective_value().\n\nobjective_value(factory_model)\n\n847.2222222222222\n\n\nWe could also define other expressions via the @expression macro as functions of the decision variables and evaluate those. For example, let’s say that we wanted to know the total number of widgets we’d produce under our optimal allocation of resources.\n\n@expression(factory_model, total_widgets, x+y)\n\n\\[ x + y \\]\n\n\n\nvalue.(total_widgets)\n\n9.444444444444443\n\n\n\n\nDual Solutions\nWe can identify if our model has a dual solution by calling has_duals().\n\nhas_duals(factory_model)\n\ntrue\n\n\nIf we want to know the dual solution associated with a constraint, we use the shadow_price() function.\n\nshadow_price(time)\n\n2.7777777777777786\n\n\n\nshadow_price(materials)\n\n2.083333333333333\n\n\nIf the binding constraint was a variable bound, we could also query that shadow price by calling reduced_cost() on the variable.\nreduced_cost(x)\n\nreduced_cost(y)\n\n-0.0\n\n\nIn this case, the relevant shadow prices are zero because the optimum is in the interior of the domain. If we had added a strong enough upper bound on the value(s) of one or both of our decision variables (say, x <= 4), then this would be non-zero."
  },
  {
    "objectID": "computing/julia-examples.html",
    "href": "computing/julia-examples.html",
    "title": "Julia Tutorials",
    "section": "",
    "text": "Julia Syntax\nPlotting with Julia\nUsing JuMP"
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Julia is open source. It has a great balance between intuitive syntax and speed. It was originally designed to share MATLAB’s mathematically-oriented syntax and Python’s readability. It can be used interactively, as more of a “scripting” language, but can be optimized to run code almost as quickly as C/C++. And it has a committed development base which is actively extending its capabilities: JuMP.jl lets us program optimization problems in a syntax that’s very close to the mathematical expressions, and the Turing.jl ecosystem has added some fantastic statistical and machine-learning libraries, among others. It’s becoming a common language among power systems modelers and environmental economists, among other applied communities.\nWhy not some common alternatives?\n\nR is fantastic for statistics, but it has a very unique syntax, and can be slow and struggles to scale to large-scale problems; while we won’t approach those limits in this class, there’s no need to go there for our purposes.\nPython is extremely readable, but also can be very slow unless you’re using libraries which are written in C++, and the syntax for these can be jarringly different than native Python.\nC/C++ are overkill for this class, and focusing on them would distract from our core engineering learning objectives.\nMATLAB is not free or open source. It also has some features which do not align with good broader coding and code maintainance practices (for example, having a single long function per file).\n\nUltimately, there are trade-offs with any language, and in this case, some specifics of Julia syntax and coding style may take an adjustment, but the pros outweigh the cons given the variety of programming tasks that we will be doing in this course.\n\n\n\nThere are a few on the Julia Resources page; please suggest additional resources!"
  },
  {
    "objectID": "faq.html#github",
    "href": "faq.html#github",
    "title": "FAQ",
    "section": "GitHub",
    "text": "GitHub\n\nWhy are we using GitHub?\nGitHub is an industry-standard version control platform. Anecdotally, adding GitHub to your skillset is a great resume booster for engineers who work in computing-heavy environments. For the purposes of our class, GitHub facilitates:\n\nAssignment management through GitHub Classroom;\nSharing of code/notebooks for debugging and asking for help (otherwise, I end up with many files with the same name, and might not open the right one…);\nUsing your repository as your submission in case something goes wrong and you can’t submit your completed assignment on time.\n\n\n\nWhat level of GitHub familiarity will I need?\nNone from the start! And the following commands are all you will need for this course (you can also use GitHub Desktop or use the GitHub functionality in VS Code, which we will discuss in class):\n\ngit clone <github-repository-url>: This is needed to “clone” your assignment repository (initialize your local repository).\ngit commit -m <message>: This is used to “lock in” changes that you’ve made to your files. You should make commits frequently as you make changes so you can revert to prior versions if something goes wrong (and make your messages meaningful so you know what changes you’ve made!)\ngit push: This syncs any committed changes to the remote GitHub repository. You must do this prior to using your repository to ask for help."
  },
  {
    "objectID": "faq.html#assignments-homework-labs-and-aes",
    "href": "faq.html#assignments-homework-labs-and-aes",
    "title": "FAQ",
    "section": "Assignments (Homework, Labs, and AEs)",
    "text": "Assignments (Homework, Labs, and AEs)\n\nHow do I access assignments?\nWe will use GitHub Classroom to manage assessments. Links to accept the assignments and create your repository will be posted on Ed Discussion as they are released, and posts with the links for active assignments will be pinned. The class schedule will link to a page which has a preview of the assignment, but links are not provided from this page to accept the assignment.\nFor the first assignment you accept, you will need to link your GitHub account to your entry in the class roster. You will not need to do this again for the rest of the semester.\n\n\nWhat if there’s an error in the assignment repository?\nThat’s certainly possible! If you believe I’ve made a mistake in writing the assignment, please document it in the Ed Discussion forum. I’ll describe steps for how to fix your files (unfortunately, I can’t do this remotely and push it to everyone’s repositories).\n\n\nHelp! My code isn’t working.\nHere are some steps I would follow:\n\nSearch for the error message you’re seeing. Often, you can find posts in the r/Julia subreddit, the official Julia forum, or Stack Overflow for the same or similar issues. You should do this first: if you can find the answer this way, it will be faster than other options, and if you can rule out some approaches that you’ve already tried, it will make the following steps go more smoothly.\nPost on Ed Discussion. For the most effective help, follow the following guidelines (adapted from Stack Overflow’s “How Do I Ask A Good Question?”):\n\nMake your post subject specific and descriptive. “Problem with HW 1 Problem 3” makes it hard for other members of the class community to know if they’re having a similar issue or if they can help. Since the TA and I may not be checking Ed religiously, you’ll get faster responses if other students feel prepared to help.\nIntroduce the problem. What have you tried? What error message are you getting? Have you been able to identify a specific line of code or section of code that’s causing the problem?\nProvide code. It’s very difficult to get a sense of what might be going wrong if you just say that you have a problem, even if you share the error message. If you have a small question (you can demonstrate the error with a brief snippet of code), you can directly put this into your Ed post, but otherwise, please provide a link to your GitHub repository and where to find the relevant codes.\n\n\n\n\n\n\nNote\n\n\n\nYou must commit and push your current files to GitHub prior to this, or we won’t be able to see the code that you’re having trouble with.\n\n\n\nCome to office hours. If you can identify the problem, but we’re having trouble solving it via Ed or more urgency is required, please come to office hours and we can try to work through the issue. This is most helpful if you’ve already done some problem-solving on your own.\n\n\n\n\n\n\nWarning\n\n\n\nWaiting until the last day or two to start an assignment can cause problems if you don’t have time to work through the following steps. If office hours are busy and you haven’t gone through the prior steps, you may be prioritized below than students who are have, and we may not have time to solve your problem. Running into coding challenges is not a valid reason to get an extension on an assignment!\n\n\n\n\n\nHow do I get a PDF of my notebook for submission?\nThere are two main options, depending on what you’ve already got set up on your computer.\n\n\n\n\n\n\nImportant\n\n\n\nRemember to “Run All” cells prior to conversion and submission, or else we won’t see your results!\n\n\n\nIf you have a Python installation, you can use a tool called nbconvert to convert to a PDF (if you also have LaTeX installed) or HTML (and then you can use your browser to print to a PDF).\nIf you don’t have a Python installation, within VS Code, you can use IJulia.jl (which will be included in the environments provided with assignments in this class) as follows (enter these commands into the REPL) to open your notebook in your browser:\nusing IJulia\nnotebook()\nThis should open a Jupyter notebook interface in your browser. Navigate to and open the notebook, and once it has completed running, go to File -> Print Preview in the browser menu and Print to PDF.\n\n\n\nHow do I submit my PDF to Gradescope?\nThe instructions for submitting your assignment to Gradescope can be found here.\n\n\n\n\n\n\nImportant\n\n\n\nMake sure that you mark/tag the pages corresponding to each question! Otherwise, we will deduct 10%. If a problem spans multiple pages, tag them all; if a page includes multiple problems, tag it several times."
  }
]