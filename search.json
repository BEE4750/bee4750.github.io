[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "BEE 4750: Environmental Systems Analysis",
    "section": "",
    "text": "This page contains a schedule of the topics, content, and assignments for the semester. Note that this schedule will be updated as necessary the semester progresses, with all changes documented here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeek\nDate\nTopic\nSlides\nLab\nHW\nReading\n\n\n\n\n\n\n\nModule 1: Introduction to Systems Analysis\n\n\n\n\n\n\n\n1\nMon, Aug 26\nWelcome to BEE 4750!\n\n\n\n\n\n\n\n\nWed, Aug 28\nLab: Setting up Julia and GitHub\n\n\n\n\n\n\n\n2\nMon, Sep 02\nNo Class: Labor Day\n\n\n\n\n\n\n\n\nWed, Sep 04\nIntroduction to Systems Analysis\n\n\n\n\n\n\n\n3\nMon, Sep 09\nModeling Systems\n\n\n\n\n\n\n\n\nWed, Sep 11\nFeedbacks and Bifurcations\n\n\n\n\n\n\n\n\n\nModule 2: Systems Simulation and Risk\n\n\n\n\n\n\n\n4\nMon, Sep 16\nSimulation Modeling\n\n\n\n\n\n\n\n\nWed, Sep 18\nDissolved Oxygen\n\n\n\n\n\n\n\n5\nMon, Sep 23\nUncertainty and Monte Carlo Simulation\n\n\n\n\n\n\n\n\nWed, Sep 25\nLab: Monte Carlo Simulation\n\n\n\n\n\n\n\n6\nMon, Sep 30\nMultiple Objectives and Tradeoffs\n\n\n\n\n\n\n\n\nWed, Oct 02\nModel Calibration and Validation\n\n\n\n\n\n\n\n\n\nModule 3: Systems Management and Optimization\n\n\n\n\n\n\n\n7\nMon, Oct 07\nLinear Programming\n\n\n\n\n\n\n\n\nWed, Oct 09\nPrelim 1\n\n\n\n\n\n\n\n8\nMon, Oct 14\nNo Class: Fall Break\n\n\n\n\n\n\n\n\nWed, Oct 16\nLab: Optimization with JuMP.jl\n\n\n\n\n\n\n\n9\nMon, Oct 21\nPower Systems and Economic Dispatch\n\n\n\n\n\n\n\n\nWed, Oct 23\nPrelim 1 Review\n\n\n\n\n\n\n\n10\nMon, Oct 28\nFixed Costs and Unit Commitment\n\n\n\n\n\n\n\n\nWed, Oct 30\nNetwork Models\n\n\n\n\n\n\n\n11\nMon, Nov 04\nSimulation-Optimization\n\n\n\n\n\n\n\n\nWed, Nov 06\nLab: Simulation-Optimization\n\n\n\n\n\n\n\n\n\nModule 4: Decision-Making Under Uncertainty\n\n\n\n\n\n\n\n12\nMon, Nov 11\nPrelim 2\n\n\n\n\n\n\n\n\nWed, Nov 13\nRobustness and Sensitivity Analysis\n\n\n\n\n\n\n\n13\nMon, Nov 18\nScenario Trees and Value of Uncertainty\n\n\n\n\n\n\n\n\nWed, Nov 20\nLab: Two-Stage Linear Programs\n\n\n\n\n\n\n\n14\nMon, Nov 25\nPrelim 2 Review\n\n\n\n\n\n\n\n\nWed, Nov 27\nNo Class: Thanksgiving Break\n\n\n\n\n\n\n\n15\nMon, Dec 02\nSequential Decision-Making\n\n\n\n\n\n\n\n\nWed, Dec 04\nClass Review\n\n\n\n\n\n\n\n16\nMon, Dec 09\nNo Class: Project Work",
    "crumbs": [
      "Course Information",
      "Schedule"
    ]
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Final Project",
    "section": "",
    "text": "The final project gives you an opportunity to use and extend the methods we have learned in class to an environmental system of your choosing. More details will be provided over the semester. We will discuss each component in class as well as providing relevant information on this page.",
    "crumbs": [
      "Final Project",
      "Project Materials"
    ]
  },
  {
    "objectID": "project.html#overview",
    "href": "project.html#overview",
    "title": "Final Project",
    "section": "",
    "text": "The final project gives you an opportunity to use and extend the methods we have learned in class to an environmental system of your choosing. More details will be provided over the semester. We will discuss each component in class as well as providing relevant information on this page.",
    "crumbs": [
      "Final Project",
      "Project Materials"
    ]
  },
  {
    "objectID": "project.html#overall-instructions",
    "href": "project.html#overall-instructions",
    "title": "Final Project",
    "section": "Overall Instructions",
    "text": "Overall Instructions\n\nStudents in 4750 should work in groups of 2-3, while students in 5750 must work alone.",
    "crumbs": [
      "Final Project",
      "Project Materials"
    ]
  },
  {
    "objectID": "project.html#schedule",
    "href": "project.html#schedule",
    "title": "Final Project",
    "section": "Schedule",
    "text": "Schedule\nMilestones which are only for BEE 5750 or 4750 students are in italics.\n\n\n\n\n\n\n\n\n\n\nMilestone\nPoints\nInstructions\nRubric\nDue Date\n\n\n\n\nProposal\n10\n\n\nNov 01, 2024\n\n\nPresentation\n20\n\n\nDec 09, 2024\n\n\nPeer Review\n10\n\n\nDec 13, 2024\n\n\nReport\n40\n\n\nDec 20, 2024\n\n\nTeam and Self Evaluations\n20\n\n\nDec 20, 2024",
    "crumbs": [
      "Final Project",
      "Project Materials"
    ]
  },
  {
    "objectID": "project.html#scope-and-topics",
    "href": "project.html#scope-and-topics",
    "title": "Final Project",
    "section": "Scope and Topics",
    "text": "Scope and Topics\nThe project can be on any environmental system of interest, so long as the approaches from class are being extended in some way. This can involve applying new methods (e.g. multi-objective optimzation, more advanced uncertainty analysis, lifecycle analysis) to systems studied from class, or applying class or new methods to other systems.\nSome project topics from previous semesters include:\n\nBattery lifecycle analysis for residential storage;\nHydropower production from Ithaca-area streams;\nTraffic regulation to comply with air-quality standards;\nWastewater treatment design;\nGeothermal energy lifecycle analysis;\nMulti-objective optimization for water management;\nEnergy storage on Cornell’s campus;\nFlight schedule optimization;\nMilk alternatives lifecycle analysis;\nHydrogen fuel cell lifecycle analysis.",
    "crumbs": [
      "Final Project",
      "Project Materials"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This is a 3 credit course which is required for the Environmental Engineering major, and can only be taken for a letter grade.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-information",
    "href": "syllabus.html#course-information",
    "title": "Syllabus",
    "section": "Course Information",
    "text": "Course Information\n\n\n\nInstructor\n\n Vivek Srikrishnan\n viveks@cornell.edu\n 318 Riley-Robb\nTBD\n\n\n\n\nTA\n\n TBD\n TBD\n TBD\nTBD\n\n\n\n\nMeetings\n\n MW\n 2:55-4:10pm\n 105 Riley-Robb\n\n\n\n\n\nCourse Description\nEnvironmental systems involve multiple interacting processes, uncertainties, and potentially conflicting objectives. These dynamics can complicate analyses which focus on a single component of the system, such as an individual pollution source, or a single outcome of interest. In this course, we will adopt a systems approach to environmental quality modeling and management, including applications in air and water pollution control and solid waste management. In particular, we will:\n\ndefine systems and their boundaries;\nsimulate system dynamics using computer models;\nformulate and solve decision problems for systems management;\nanalyze and assess risk;\nmake decisions under uncertainty; and\nexplore trade-offs across competing objectives.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#learning-outcomes",
    "href": "syllabus.html#learning-outcomes",
    "title": "Syllabus",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nAt the end of this class, students will:\n\nConstruct mathematical models of environmental systems;\nUse systems models to simulate dynamics and outcomes;\nAnalyze environmental system risk and vulnerabilities.\nDetermine strategies for managing systems using optimization;\nIdentify the trade-offs that result from competing objectives in environmental decision -making;\nEvaluate modeled outcomes with respect to model assumptions and limits.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#prerequisites-preparation",
    "href": "syllabus.html#prerequisites-preparation",
    "title": "Syllabus",
    "section": "Prerequisites & Preparation",
    "text": "Prerequisites & Preparation\nThe following courses/material would be ideal preparation:\n\nEnvironmental Processes (BEE 2510 or BEE 2600): mass and energy balance, fate and transport\nEngineering Computation (ENGRD/CEE 3200): basic programming, discretization of ODEs, curve fitting\nOne course in probability or statistics (ENGRD 2700, CEE 3040, or equivalent): probability, probability distributions, summary statistics\n\nIn the absence of one or more these prerequisites, you can seek the permission of instructor.\n\n\n\n\n\n\nWhat If My Programming or Stats Skills Are Rusty?\n\n\n\nIf your programming or statistics skills are a little rusty, don’t worry! We will review concepts and build skills as needed. While we will use the Julia programming language in class, if you are familiar with Python or MATLAB, the fundamentals are similar.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#topics",
    "href": "syllabus.html#topics",
    "title": "Syllabus",
    "section": "Topics",
    "text": "Topics\nThis class will cover the following topics:\n\nIntroduction to environmental systems\nModeling system dynamics\nMultiple objectives and trade-offs\nModel discretization and simulation\nUncertainty and Monte Carlo analysis\nLinear programming\nSimulation-optimization\nDecision making under uncertainty\nSensitivity and robustness\n\nTo motivate and illustrate these topics, we will draw on application areas including:\n\nClimate change\nWater quality\nAir quality\nElectric power systems\nSolid waste management\nResource allocation\nReservoir management",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-philosophy-and-expectations",
    "href": "syllabus.html#course-philosophy-and-expectations",
    "title": "Syllabus",
    "section": "Course Philosophy and Expectations",
    "text": "Course Philosophy and Expectations\nThe goal of our course is to help you gain competancy and knowledge in the area of environmental systems analysis. This involves a dual responsibility on the part of the instructor and the student. As the instructor, my responsibility is to provide you with a structure and opportunity to learn. To this end, I will commit to:\n\nprovide organized and focused lectures, in-class activities, and assignments;\nencourage students to regularly evaluate and provide feedback on the course;\nmanage the classroom atmosphere to promote learning;\nschedule sufficient out-of-class contact opportunities, such as office hours;\nallow adequate time for assignment completion;\nmake lecture materials, class policies, activities, and assignments accessible to students.\n\nStudents are encouraged to discuss any concerns with me during office hours or through a course communications channel.\nStudents can optimize their performance in the course by:\n\nattending all lectures;\ndoing any required preparatory work before class;\nactively participating in online and in-class discussions;\nbeginning assignments and other work early;\nand attending office hours as needed.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#community",
    "href": "syllabus.html#community",
    "title": "Syllabus",
    "section": "Community",
    "text": "Community\n\nDiversity and Inclusion\nOur goal in this class is to foster an inclusive learning environment and make everyone feel comfortable in the classroom, regardless of social identity, background, and specific learning needs. As engineers, our work touches on many critical aspects of society, and questions of inclusion and social justice cannot be separated from considerations of systems analysis, objective selection, risk analysis, and trade-offs.\nIn all communications and interactions with each other, members of this class community (students and instructors) are expected to be respectful and inclusive. In this spirit, we ask all participants to:\n\nshare their experiences, values, and beliefs;\nbe open to and respectful of the views of others; and\nvalue each other’s opinions and communicate in a respectful manner.\n\nPlease let me know if you feel any aspect(s) of class could be made more inclusive. Please also share any preferred name(s) and/or your pronouns with me if you wish: I use he/him/his, and you can refer to me either as Vivek or Prof. Srikrishnan.\nPlease be professional and courteous on all course interactions and platforms, and (except in designated off-topic boards or forums) please keep all online discussion relevant to the course. We do not anticipate this as a problem given our experience; almost all students in almost all classes meet these expectations. However, even a single incident can do serious damage to the learning environment and the well-being of your fellow students.\nSexually explicit, harassing, threatening, bullying, trolling, racist, sexist, homophobic, transphobic, or otherwise grossly unprofessional content will be removed. Anyone behaving in these fashions or posting such content will be blocked/banned from the appropriate platform and may be given an F if they are consistently disruptive.\nWe have configured our Ed Discussion board to allow anonymous posts; we will restrict posts to real names only if anyonmous posts become problematic.\n\n\n\n\n\n\nPlease, Be Excellent To Teach Other\n\n\n\nWe all make mistakes in our communications with one another, both when speaking and listening. Be mindful of how spoken or written language might be misunderstood, and be aware that, for a variety of reasons, how others perceive your words and actions may not be exactly how you intended them. At the same time, it is also essential that we be respectful and interpret each other’s comments and actions in good faith.\n\n\n\n\nStudent Accomodations\nLet me know if you have any access barriers in this course, whether they relate to course materials, assignments, or communications. If any special accomodations would help you navigate any barriers and improve your chances of success, please exercise your right to those accomodations and reach out to me as early as possible with your Student Disability Services (SDS) accomodation letter. This will ensure that we have enough time to make appropriate arrangements.\nIf you need more immediate accomodations, but do not yet have a letter, please let me know and then follow up with SDS.\n\n\nCourse Communications\nMost course communications will occur via Ed Discussion. Public Ed posts are generally preferred to private posts or emails, as other students can benefit from the discussions. If you would like to discuss something privately, please do reach out through email or a private Ed post (which will only be viewable by you and the course staff).\nAnnouncements will be made on the course website and in Ed. Emergency announcements will also be made on Canvas.\n\n\n\n\n\n\nEd Tips\n\n\n\n\nDo not take screenshots of code. I will not respond. Screenshots can be difficult to read and limit accessibility. Put your code on GitHub, share the link, and point to specific line numbers if relevant, or provide a simple, self-contained example of the problem you’re running into.\nIf you wait until the day an assignment is due (or even late the previous night) to ask a question on Ed, there is a strong chance that I will not see your post prior to the deadline.\nIf you see unanswered questions and you have some insight, please answer! This class will work best when we all work together as a community.\n\n\n\n\n\nMental Health Resources\nWe all have to take care of our mental health, just as we would our physical health. As a student, you may experience a range of issues which can negatively impact your mental health. Please do not ignore any of these stressors, or feel like you have to navigate these challenges alone! You are part of a community of students, faculty, and staff, who have a responsibility to look for one another’s well-being. If you are struggling with managing your mental health, or if you believe a classmate may be struggling, please reach out to the course instructor, the TA, or, for broader support, please take advantage of Cornell’s mental health resources.\n\n\n\n\n\n\nMental Health And This Class\n\n\n\nI am not a trained counselor, but I am here to support you in whatever capacity we can. You should never feel that you need to push yourself past your limits to complete any assignment for this class or any other. If we need to make modifications to the course or assignment schedule, you can certainly reach out to me, and all relevant discussions will be kept strictly confidential.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#course-policies",
    "href": "syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course Policies",
    "text": "Course Policies\nMany policies below (including grading policies) are broken out and discussed further on the course website. Lack of familiarity with any of these policies is not an excuse for violating any of them.\n\nAttendance\nAttendance is not required, but in general, students who attend class regularly will do better and get more out of the class than students who do not. Your class participation grade will reflect both the quantity and quality of your participation, only some of which can occur asynchronously. I will put as many course materials, such as lecture notes and announcements, as possible online, but viewing materials online is not the same as active participation and engagement. Life happens, of course, and this may lead you to miss class. Let me know if you need any appropriate arrangements ahead of time.\n\n\n\n\n\n\nWhat If I’m Sick?\n\n\n\nPlease stay home if you’re feeling sick! This is beneficial for both for your own recovery and the health and safety of your classmates. We will also make any necessary arrangements for you to stay on top of the class material and if whatever is going on will negatively impact your grade, for example by causing you to be unable to submit an assignment on time.\n\n\n\n\nMask Policies\nMasks are encouraged but not required in the classroom, per university policy. However, the University strongly encourages compliance with requests to mask from students, faculty, and staff who are concerned about the risk of infection. Please be respectful of these concerns and requests if you cannot wear a mask. This policy may change if there is another outbreak of COVID-19 (or other illness), but will be kept consistent with broader Cornell mask policies.\n\n\nAcademic Integrity\n\n\n\n\n\n\nTL;DR: Don’t cheat, copy, or plagiarize!\n\n\n\nThis class is designed to encourage collaboration, and students are encouraged to discuss their work with other students. However, I expect students to abide by the Cornell University Code of Academic Integrity in all aspects of this class. All work submitted must represent the students’ own work and understanding, whether individually or as a group (depending on the particulars of the assignment). This includes analyses, code, software runs, and reports. Engineering as a profession relies upon the honesty and integrity of its practitioners (see e.g. the American Society for Civil Engineers’ Code of Ethics).\n\n\nExternal Resources\nThe collaborative environment in this class should not be viewed as an invitation for plagiarism. Plagiarism occurs when a writer intentionally misrepresents another’s words or ideas (including code!) as their own without acknowledging the source. All external resources which are consulted while working on an assignment should be referenced, including other students and faculty with whom the assignment is discussed. You will never be penalized for consulting an external source for help and referencing it, but plagiarism will result in a zero for that assignment as well as the potential for your case to be passed on for additional disciplinary action.\n\n\nAI/ML Resource Policy\nAs noted, all work submitted for a grade in this course must reflect your own understanding. The use and consulation of AI/ML tools, such as ChatGPT or similar, for any purpose whatsoever, must be pre-approved and clearly referenced.\n\n\n\n\n\n\nWhat are Large Language Models Useful For?\n\n\n\nChatGPT and other large-language models can predictively generate text, but note that there is no idea underlying its prediction model (it is purely statistical). You should therefore think about it as a glorified and stochastic Google search, albeit one which synthesizes the material for you, so you can’t access or understand its judgement or reasoning.\nAs a result, simply submitting ChatGPT output is likely to get you zero credit for any analysis or interpretation questions, and may be less helpful than you think for questions about derivations or model setups. Where ChatGPT can be helpful is in starting or debugging code (particularly interpreting error messages), especially if you’re unsure about syntax. However, in our experience, the interpretations and solutions from ChatGPT may often also just be wrong due to the LLM drawing from sufficiently different code examples users have provided in other forums; you’ll still need to exercise judgement and figure out if what ChatGPT output works or makes sense to ensure credit. You’d be surprised — careful use of LLMs does not actually save very much time!\n\n\nIf approved, you must:\n\nreference the URL of the service you are using, including the specific date you accessed it;\nprovide the exact query or queries used to interact with the tool; and\nreport the exact response received.\n\nFailure to attain prior approval or fully reference the interaction, as described above, will be treated as plagiarism and referred to the University accordingly.\n\n\nLate Work Policy\nIn general, late work can be submitted up to 24 hours late at a 50% penalty, and will not be accepted after that point. This policy may seem strict, but allows for prompt release of solutions and discussion of assignments. Please reach out as soon as possible (ideally before the due date) if legitimate circumstances emerge which prevent you from submitting work within 24 hours of the due date; we will make accomodations for approved reasons, which might included a limited extension or dropping the assignment.\n\n\nRegrade Requests\nRegrade requests can be submitted up to one week after the graded work is released on Gradescope.\nAll regrade requests must include a brief justification for the request or they will not be considered. Good justifications include (but are not limited to): - My answer agrees with the posted solution, but I still lost points. - I lost 4 points for something, but the rubric says it should only be worth 2 points. - You took points off for something, but it’s right here. - My answer is correct, even though it does not match the posted solution; here is an explanation. - There is no explanation for my grade. - I got a perfect score, but my solution has a mistake (you will receive extra credit for this! see below!) - There is a major error in the posted solution; here is an explanation (full credit for everyone, but Prof. Srikrishnan will decide what constitutes a “major error”! see below!).\n\n\n\n\n\n\nWe Can Only Grade What You Submitted\n\n\n\nAll regrades will be assessed based only on the submitted work. You cannot get a higher grade by explanating what you meant (either in person or online) or by adding information or reasoning to what is submitted after the fact. The goal of the regrade is to draw attention to a potential grading problem, not to supplement the submission.\n\n\nThe first regrade request for any submission will be handled by the person who graded that homework problem. The first regrade request for any exam submission will be handled by whoever graded that exam problem. If the submission was graded by the TA, additional regrade requests for the same submission will be handled directly by the instructor. Once Prof. Srikrishnan issues a final response to a regrade request, further requests for that submission will be ignored.\n\n\n\n\n\n\nRegrade Requests Can Be A Gamble!\n\n\n\nWhile you should submit regrade requests for legitimate errors, using them for fishing expeditions can also result in lost points if the TA or Prof. Srikrishnan decide that your initial grade was too lenient or if additional errors are identified.\n\n\n\n\n\n\n\n\nWhat If I Find A Different Type of Mistake?\n\n\n\n\nIf you submit a regrade request correctly reporting that a problem was graded too leniently — that is, that your score was higher than it should be based on the rubric — your score will be increased by the difference. For example, if your original score on a problem was 8/10 and you successfully argue that your score should have been 3/10, your new score will be 13/10. However, don’t fish — your grade might be lowered if the TA finds an independent mistake while regrading.\nIf a significant error is discovered in a posted homework solution or in the exam solutions, everyone will in the class will receive full credit for the (sub)problem. Prof. Srikrishnan will decide what is “significant”.\n\n\n\n\n\nOffice Hours\nOffice hours with both Prof. Srikrishnan and the TA will be available each week at times TBA. Changes to the office hour schedule (cancellations/rescheduling) will be announced in class and on Ed Discussion.\nOffice hours are intended to help all students who attend. This time is limited, and is best spent on issues that are relevant to as many students as possible. While we will do our best to answer individual questions, students asking us to verify or debug homework solutions or help with syntax will have the lowest priority (but please do ask about how to verify or debug your own solutions!). However, we are happy to discuss conceptual approaches to solving homework problems, which may help to reveal bugs.\nSpace at office hours can be limited (we may shift to the conference room in 316 Riley-Robb if offices are full and it is available). If the room is crowded and you can find an alternative source of assistance, or if your question is low priority (e.g. debugging) please be kind and make room for others.\n\n\n\n\n\n\nWhat If I Can’t Make Office Hours?\n\n\n\nWhile we will try to select office hours that work for as much of the class as possible, both the course staff and students have busy schedules and no time will work for everyone. If you need help outside of office hours (e.g. office hours do not fit your schedule), please send an email to the TA or Prof. Srikrishnan as soon as possible. These requests may not be accepted on short notice (e.g. if you have a question about a homework due on Friday and send a request on Thursday; schedules for course staff may already be full). We recommend starting your homework promptly so you can take advantage of office hours or make an appointment over a longer period.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#assessments",
    "href": "syllabus.html#assessments",
    "title": "Syllabus",
    "section": "Assessments",
    "text": "Assessments\nYour grade will be computed as the weighted average of the following assessment categories:\n\n\n\nCategory\nWeight\n\n\n\n\nParticipation\n10%\n\n\nExercises\n10%\n\n\nLabs\n10%\n\n\nHomework\n20%\n\n\nPrelims\n30%\n\n\nTerm Project\n20%\n\n\n\n\n\n\n\n\n\nWill There Be a Curve?\n\n\n\nGrades on individual assessments will not be curved. It is unlikely that the final grades will be adjusted, but we may apply a curve if and only if circumstances arise which would make this appropriate, such as if the exams turn out to be longer or more difficult than intended. Grades will not be curved to meet any pre-defined distribution; it is entirely possible that everyone earns an A or everyone earns an F. Asking about a curve will not make one more likely.\n\n\n\nParticipation\nParticipating fully in the class allows you to gain more from the class and contribute more to the learning of your classmates. Some ways to participate include:\n\nAsking questions in class or on Ed;\nAnswering questions in class or on Ed;\nActively engaging in in-class activities;\nComing to office hours.\n\nNote that just passively attending class will not yield full participation points. Participation points are not free: you are likely to lose points if you consistently skip class or do not ask or answer questions online or in person. At the end of the term, you will be asked to evaluate your own participation over the course of the semester, in addition to my documentation of your participation.\n\n\nExercises\nMost weeks will involve a problem set aimed at assessing key concepts or getting practice with new workflows and packages. We will use Canvas for these exercises, but starter code will be made available on GitHub Classroom for code-based exercises. These will be released Monday at the start of class and are due before class (2:55PM) the following Monday. The exercises will be multiple choice or similar (categorization, multiple answer, etc), automatically graded, and you can submit them as often as you like. It is highly recommended that you do these promptly and take them seriously, as concepts and simple code practice will be useful for the homeworks and midterm exams. We will automaticaly drop one exercise set, but no late exercises will be accepted.\n\n\nLabs\nApproximately 5 class periods will be dedicated to working through simple examples to guide you through applying concepts and methods from class. Students should bring their laptops to class, and will be given a worksheet to complete (as much as they can) during these lab classes. Labs will be designed to be completed in class, though you may occasionally require additional time; however, lab worksheets must be submitted by 9:00pm on the lab day. As a result, I encourage you to make sure that you download and set up the lab materials ahead of time; these will be provided for you on Ed Discussion. Labs will be graded on a scale of 0-3 on the basis of effort towards demonstrated work, rather than absolute correctness or completion. No labs will be dropped by default. If you cannot bring a laptop to class, you can work with other students, though you must turn in your own worksheet for grading.\n\n\nHomework Assignments\nApproximately 5 homework assignments will be assigned throughout the semester, one per course module (plus an initial homework to build or refresh programming and debugging skills). The homework assignments are more in-depth problem sets involving the modeling (derivation and implementation) and analysis of one or more environmental systems problems.\nYou will generally have two class weeks to work on an assignment. This is intended to provide you enough time to work on the problem and debug and evaluate your code (including troubleshooting any technical problems); these are not excuses for late submission. Each homework assignment will build on material from the prior classes and possibly from the day the homework is assigned, but no later.\nStudents are encouraged to collaborate and learn from each other on homework assignments, but each student must submit their own solutions reflecting their understanding of the material. Consulting and referencing external resources and your peers is encouraged (engineering is a collaborative discipline!), but plagiarism is a violation of academic integrity. Graduate students in BEE 5850 can expect one additional problem for each homework assignment aimed at developing greater depth or familiarity with the material.\nSome notes on assignment and grading logistics:\n\nHomework assignments will be distributed using GitHub Classroom. While GitHub use is not required for the class aside from accepting and cloning assignments, students are encouraged to update their GitHub repositories as they work on the assignments; this helps with answering questions and gives you a backstop in case something goes wrong and you can’t submit your assignment on time.\nHomeworks are due by 9:00pm Eastern Time on the designed due date (usually a Thursday). Your assignment notebook (which include your writeup and codes) should be submitted to Gradescope as a PDF with the answers to each question tagged (a failure to do this will result in deductions).\nA meta-rubric is provided on the website, under the Homework page. These are not customized for each assignment but the principles will apply generally.\nNo homework assignments will be dropped, but you can turn in assignments within 24 hours of the due date with a 50% penalty. If you need a further accomodation for a particular assignment, talk to Prof. Srikrishnan before the due date. Requests for extensions made after the due date will only be considered under extraordinary and unexpected circumstances. Technical challenges submitting assignments are not acceptable reasons for extensions to be granted, and late penalties will apply.\nYour submitted homework must stand on its own*! We cannot grade you on the basis of information which was not included in the submitted assignment. While regrade requests should include a justification for why your grade is incorrect, we will not consider explanations or additional reasoning outside of the submission.\n\n\n\nPrelims\nTwo in-class prelims will be given as an opportunity to review relevant material. The dates for the exams are Wednesday, 10/09 and Monday, 11/11. The exams are closed-book and closed-note. As a result, the exams will emphasize conceptual material such as model derivations and interpretation of results; any calculations can be done with a pen(cil) and paper. Conflict and extended-time exams will be handled through SDS. Exams will be scanned into Gradescope for grading and feedback.\nSolutions will not be posted for the midterms, but Prof. Srikrishnan will review and discuss midterm problems in class. The review will occur approximately two weeks after the exam to provide time for conflict exams.\n\n\nFinal Term Project\nThis course will culminate with a term project. The goal of this project is to apply and extend the tools and approaches we will learn in class to an application of your choosing. While we encourage drawing on other classes or interests when developing and working on your project, submitting work from another course or work which was completed prior to the course is not permitted.\nThe term project will be completed in groups (3-4 students). The final deliverable for this project will be a report summarizing the project and results, including a section detailing research you have conducted on relevant regulations and how they were incorporated into your project. Ahead of that, you will submit the following a proposal for feedback on the scope of your project as well as a description of task coordination.\nThe project will be assessed on the basis of both group and individual components:\n\nGroup (80 points):\n\n(10 points) Proposal: Groups will develop a proposal for their final project, which will include two main components. The first is a research plan, which should (succinctly) describe the background for the problem and articulate the key question (system overview, model specification) as well as providing a brief overview of proposed methods (data sources, planned analytic approach). The second is a work plan, which will include task assignments across group members, deadlines for interim tasks, and a plan for coordination (meeting frequency, materials sharing, etc).\n(20 points) Presentation: Groups will present their projects to the class at the end of the semester. Due to time restrictions, these may be recorded and uploaded to Canvas if there are too many projects for the time available. Presentations should be no more than 10 minutes long and should be aimed at a general audience.\n(10 points) Peer Review: Each group will be asked to provide a peer review on two of their classmates’ presentations. The format for the review will be made available on the class website included all expected components, but all members of the group(s) should provide their reviews as part of the overall synthesis. =\n(40 points) Final Report: Each group will submit a final report aimed at an engineering audience. A rubric will be provided with detailed expectations.\n\nIndividual (20 points):\n\n(5 points) Self-Assessment: Each individual in a group will submit a short self-assessment of their project, including a description of the work they contributed to the project (&lt; 1/2 page) and reflections on what worked well or less well (&lt; 1/2 page).\n(15 points) Peer Evaluation: Each individual in a group will submit an evaluation of their teammates’ contributions to the final project and the group dynamic, including assessments of participation, work quality, and inclusivity. Points will be awarded based on the evaluations from your group; different scales will be applied for undergraduate (4750) and graduate (5750) students. No points will be given for any student who fails to submit evaluations for their groupmates.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "syllabus.html#grading",
    "href": "syllabus.html#grading",
    "title": "Syllabus",
    "section": "Grading",
    "text": "Grading\n\nGrading Scale\nThe following grading scale will be used to convert the numerical weighted average from the assessments (above) to letter grades.\n\n\n\nGrade\nRange\n\n\n\n\nA+\n97–100\n\n\nA\n93–97\n\n\nA-\n90–93\n\n\nB+\n87–90\n\n\nB\n83–87\n\n\nB-\n80–83\n\n\nC+\n77–80\n\n\nC\n73–77\n\n\nC-\n70–73\n\n\nD+\n67–70\n\n\nD\n63–67\n\n\nD-\n60–63\n\n\nF\n&lt; 60\n\n\n\nWe reserve the right to lower these cutoffs as appropriate, but will not raise them from these levels.\n\n\n\n\n\n\nWill You Round Up or Curve My Grade?\n\n\n\nGrades may be rounded up if they are just below the cutoff, but this is not a given, and requests for grade round-ups will be ignored. For example, you should assume that a score of 92.9% has missed the A cutoff of 93% (it is, after all, below the cutoff). Consider it a pleasant surprise if the round-up is given.\nWhile final grades will not be curved, individual assessments (mainly exams) may be curved if they prove to be more difficult than intended, but this will not be with a view towards achieving a particular grade distribution.\n\n\n\n\nForgiven Assignments\nForgiven assignments (due to extenuating circumstances, discussed with and approved by Prof. Srikrishnan) will be treated as though they do not exist, and the appropriate grading component will be computed without them. This does mean that e.g. submitted homeworks will carry more weight in the overall grade computation. In exceptional cases, we will compute course grades based entirely on exams.\n\n\nExceptions\nWe reserve the right to give any student meeting at least one of the following conditions an automatic F:\n\nOverall exam average below 25%;\nSubmitted less than half of the assigned homework problems;\nExtremely low levels of participation and effort.\n\nThis should not generally be a concern; students putting in a good faith effort by attending class, participating in online discussions, doing most of the work, and taking the exams will not be at risk of this policy.",
    "crumbs": [
      "Course Information",
      "Syllabus"
    ]
  },
  {
    "objectID": "tutorials/julia-jump.html",
    "href": "tutorials/julia-jump.html",
    "title": "Tutorial: Linear Optimization in Julia",
    "section": "",
    "text": "using Plots\nusing JuMP\nusing HiGHS",
    "crumbs": [
      "Tutorials",
      "Solving Linear Programs"
    ]
  },
  {
    "objectID": "tutorials/julia-jump.html#overview",
    "href": "tutorials/julia-jump.html#overview",
    "title": "Tutorial: Linear Optimization in Julia",
    "section": "Overview",
    "text": "Overview\nThis tutorial will demonstrate how to solve linear optimization problems graphically and using the JuMP package in Julia. It draws heavily from this tutorial by Jesse D. Jenkins and Michael R. Davidson.\nJuMP (“Julia for Mathematical Programming”) is an open-source Julia package that adds functionality for formulating and solving a variety of optimization problems. One advantage of JuMP is that its syntax matches the typical mathematical formalism used to specify optimization problems. We will use JuMP in this class for our optimization work.\n\n\n\n\n\n\nRead the Documentation!\n\n\n\nMake sure that you take a look at the JuMP documentation whenever you have a question or want to find out how to do something that we don’t discuss in any of our tutorials or lectures (or how to do it better!).",
    "crumbs": [
      "Tutorials",
      "Solving Linear Programs"
    ]
  },
  {
    "objectID": "tutorials/julia-jump.html#setup",
    "href": "tutorials/julia-jump.html#setup",
    "title": "Tutorial: Linear Optimization in Julia",
    "section": "Setup",
    "text": "Setup\nHere we will outline the basic steps for configuring JuMP, though you can also refer to the official Installation Guide.\nIf JuMP is not already in your environment (it will be for any of your assignments, but may not be if you’re doing something independently), you will need to install it. You will also need to select a solver and install the relevant package. Some of these are commercial, while others are open source. Solvers are also not typically universal, as different types of optimization problems use different algorithms, so be aware of what problem you’re trying to solve instead of just blindly copying code from one task to another.\nFor example, for the linear programming example, we will use the HiGHS solver via the HiGHS.jl package. As seen on the solver table, HiGHS is open source (via the MIT license) and can solve linear programs (LP) and mixed-integer linear programs (MILP), as well as quadratic programs (which we won’t discuss in this course).",
    "crumbs": [
      "Tutorials",
      "Solving Linear Programs"
    ]
  },
  {
    "objectID": "tutorials/julia-jump.html#linear-programming-example-how-many-widgets-should-a-factory-produce",
    "href": "tutorials/julia-jump.html#linear-programming-example-how-many-widgets-should-a-factory-produce",
    "title": "Tutorial: Linear Optimization in Julia",
    "section": "Linear Programming Example: How Many Widgets Should A Factory Produce?",
    "text": "Linear Programming Example: How Many Widgets Should A Factory Produce?\n\nDefining The Problem\nSuppose we own a factory that can produce two types of widgets:\n\nWidget A generates a profit of \\(p_A = \\$100\\) per widget; and\nWidget B generates a profit of \\(p_B = \\$75\\) per widget.\n\nLet \\(x\\) be the number of units of widget A that we want to produce, and \\(y\\) the number of units of widget B. Our goal is to maximize our total profit \\(p_Ax + p_By\\). This is the objective function. We express this objective using the equation \\[\\begin{equation}\n\\max_{x, y} 100x + 75y. \\label{eq:objective}\n\\end{equation}\\]\nThis isn’t a very interesting problem yet! We would simply build as much of both widgets as we could, because there are no constraints on our ability to produce. To make this more realistic, let’s suppose that both widgets are produced using the same raw material \\(M\\), of which we can only procure 300 units. Then, if:\n\nWidget A requires 40 units of \\(M\\) per widget, and\nWidget B requires 20 units of \\(M\\) per widget, we arrive at the following material constraint: \\[\\begin{equation}\n40x + 20y \\leq 300. \\label{eq:constraint1}\n\\end{equation}\\]\n\nBut we might have another constraint: time! Each widget may take a different amount of labor to produce. For example, let’s say that\n\nWidget A takes 6 hours to produce and\nWidget B takes 12 hours to produce. Further, there are only 80 hours per work that can be allocated to widget production. This becomes the time constraint \\[\\begin{equation}\n6x + 12y \\leq 80. \\label{eq:constraint2}\n\\end{equation}\\]\n\nFinally, we cannot build a negative number of either type of widget. This is known as a non-negativity constraint, and can be expressed as\n\\[\\begin{align}\nx &\\geq 0 \\label{eq:constraintx} \\\\\ny &\\geq 0 \\label{eq:constrainty}\n\\end{align}\\]\nConsolidating equations \\(\\eqref{eq:objective}\\)–\\(\\eqref{eq:constrainty}\\) gives us the following constrained optimization problem:\n\\[\\begin{equation}\n\\begin{aligned}\n& \\max_{x, y} & 100x + 75y\\\\\n&\\text{subject to} & \\\\\n& & 40x + 20y \\leq 300\\\\\n& & 6x + 12y \\leq 80\\\\\n& & x \\geq 0\\\\\n& & y \\geq 0\n\\end{aligned} \\label{eq:widget}\n\\end{equation}\\]\n\n\nVisualizing the Problem\nLet’s do some plotting to examine the geometry of our optimization problem. We can do this using the Plots.jl package in Julia.\n\n## set up objective function parameters and variables\npa = 100\npb = 75\na = range(0, 8, step=0.25)\nb = range(0, 8, step=0.25)\n\n## define objective function\nf(a, b) = pa * a + pb * b\n\n## start plotting\ncontour(a,b,(a,b)-&gt;f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a[a.&lt;=11], (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a[a.&lt;=8], (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Decision space for the widget linear program \\(\\eqref{eq:widget}\\). The gradient contours for the objective function are shown, as well as the constraints.\n\n\n\n\nWe can see exactly where the solution will be in Figure 1, at the intersection of the feasible regions imposed by the two constraints!\n\n\n\n\n\n\nObjective Function Gradient and Solution Uniqueness\n\n\n\nWhat would happen if one of the constraints were parallel to the level sets of the objective function?\n\n\nLet’s now use JuMP to identify the location of this point (though we could also solve for it using linear algebra).",
    "crumbs": [
      "Tutorials",
      "Solving Linear Programs"
    ]
  },
  {
    "objectID": "tutorials/julia-jump.html#solving-this-problem-using-jump",
    "href": "tutorials/julia-jump.html#solving-this-problem-using-jump",
    "title": "Tutorial: Linear Optimization in Julia",
    "section": "Solving This Problem Using JuMP",
    "text": "Solving This Problem Using JuMP\n\nSetting Up the Model and Solver\nTo solve our problem, first we need to define the model. The model object has lots of attributes, including the variables, constraints, solver options, etc. We create a new model using the Model() function. Since we are using the HiGHS solver, we need to tell JuMP to use the HiGHS.Optimizer solver function.\n\nfactory_model = Model(HiGHS.Optimizer) \n\nThere are a bunch of attributes and options that we could set, but we won’t in this example. If needed, look at the HiGHS.jl documentation.\n\nDefine Variables\nDecision variables (\\(x\\) and \\(y\\) in this case) in JuMP are defined using the @variable macro. The first argument passed to @variable() is the model object, in this case, factory_model, and the second argument are bounds on that variable, created using &gt;= and &lt;=. JuMP will interpret the bound specification to obtain the variable name. In this case, our only bounds directly on the variables are the non-negativity constraints.\n\n@variable(factory_model, x &gt;= 0)\n@variable(factory_model, y &gt;= 0)\n\nIf we had a free (or unbounded) variable \\(z\\), we could declare that variable using @variable(model, z). JuMP also requires unique names for each variable, or it will throw an error. This is one place where it’s nice that Julia lets us use sub- and superscripts in variable names!\nIf we did want to modify the bounds after defining the variable, we could do so using the set_lower_bound and set_upper_bound functions, or we could remove them using delete_lower_bound and delete_upper_bound.\nFinally, if we want to see all of the variables associated with a model, we can use the all_variables function to obtain an array.\n\nall_variables(factory_model)\n\n2-element Vector{VariableRef}:\n x\n y\n\n\n\n\n\nDefine Constraints\nWhen defining variables, we were able to declare constraints on their values by specifying upper and lower bounds. However, we also have other constraints, which involve multiple decision variables. These are specified using the @constraint macro. Unlike variables, we also need to pass names for each constraint. We will use time for the time constraint and materials for the materials constraint. These names must be unique.\n\n@constraint(factory_model, time, 6x + 12y &lt;= 80) # specify the time constraint\n@constraint(factory_model, materials, 40x + 20y &lt;= 300) # materials constraint\n\n\n\nDefine Objective Function\nSo far, we’ve defined the feasible region of the decision-variable domain by setting the constraints. But we need to specify our objective function to know what we are trying to minimize or maximize over this region. We define the objective function using the @objective macro. In addition to specifying the model objective and the function, we need to tell JuMP whether we want to minimize or maximize.\n\n@objective(factory_model, Max, 100x + 75y)\n\n\n\nLooking At The Full Model\nNow, let’s look at the model specification. print() will print out a formatted version of the model; in a notebook (or on this page), that will be marked up with LaTeX, in a REPL terminal, it will not be.\n\nprint(factory_model)\n\n\\[ \\begin{aligned}\n\\max\\quad & 100 x + 75 y\\\\\n\\text{Subject to} \\quad & 6 x + 12 y \\leq 80\\\\\n& 40 x + 20 y \\leq 300\\\\\n& x \\geq 0\\\\\n& y \\geq 0\\\\\n\\end{aligned} \\]\n\n\nIf you want a LaTeX-marked up version in the REPL, use latex_formulation().\nWe won’t go into detail here, but there are other ways to define the model, which are detailed in the JuMP documentation. For example, we can specify multiple variables using @variables. Similarly, we can use @constraints to define multiple constraints at once. Or we can use loops to define multiple constraints or constraints involving many variables. We can also specify the model in vectorized syntax, which is similar to how linear programs are specified in MATLAB.\n\n\nSolve the Model\nNow it’s time to solve the model and find the optimal values \\((x^*, y^*)\\). Since we specified the solver when we initialized factory_model, all we have to do is call the optimize! function.\n\noptimize!(factory_model)\n\nRunning HiGHS 1.5.3 [date: 1970-01-01, git hash: 45a127b78]\nCopyright (c) 2023 HiGHS under MIT licence terms\nPresolving model\n2 rows, 2 cols, 4 nonzeros\n2 rows, 2 cols, 4 nonzeros\nPresolve : Reductions: rows 2(-0); columns 2(-0); elements 4(-0) - Not reduced\nProblem not reduced by presolve: solving the LP\nUsing EKK dual simplex solver - serial\n  Iteration        Objective     Infeasibilities num(sum)\n          0    -1.0937489944e+01 Ph1: 2(4.125); Du: 2(10.9375) 0s\n          2     8.4722222222e+02 Pr: 0(0) 0s\nModel   status      : Optimal\nSimplex   iterations: 2\nObjective value     :  8.4722222222e+02\nHiGHS run time      :          0.01\n\n\n\n\nQuery the Solution\nTo find the optimal values of our decision variables, we need to query the values of the variables using value.(). We use value.() (the vectorized version of value()) because JuMP stores decision variables differently depending on their number and how they were defined. Uses the dot-syntax here works with any model specification, while the plain value() will not work if a queried decision variable is stored as a vector.\n\nvalue.(x)\n\n5.555555555555554\n\n\n\nvalue.(y)\n\n3.8888888888888897\n\n\nSo we can see that our optimal inputs are \\[(x^*, y^*) = (5.56, 3.89)\\] (and we’ll pretend that we can manufacture and sell parts of widgets).\n\n\nVisualize the Solution\nLet’s take our previous plot and add the solution point to make sure that we got the solution we expected.\n\ncontour(a,b,(a,b)-&gt;f(a,b),nlevels=15, c=:heat, linewidth=10, colorbar = false, contour_labels = true) # objective function contours\ntitle!(\"Factory Optimization Problem\") # add title\nxaxis!(\"x=Widget A\", lims=(0, maximum(a))) # add x-axis title and limits\nyaxis!(\"y=Widget B\", lims=(0, maximum(b))) # add y-axis title and limits\nxticks!(0:maximum(a)) # set x-axis ticks\nyticks!(0:maximum(b)) # set y-axis ticks\nareaplot!(a, (300 .- 40*a)./20, legend=false, opacity=0.3) # plot materials constraint feasible region\nareaplot!(a, (80 .- 6*a)./12, legend=false, opacity=0.3) # plot time constraint feasible region\n\n## now we plot the solution that we obtained\nscatter!([value.(x)],[value.(y)], markercolor=\"blue\", markersize=5)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Solution for the widget problem \\(\\eqref{eq:widget}\\). The blue dot shows the optimal solution.\n\n\n\n\nAs shown in Figure 2, the optimal solution \\[(x^*, y^*)\\] is exactly where we deduced it would be geometrically.\n\n\nOther Stuff We Can Do\nWe can also use value.() to evaluate our constraints without manually using the equations.\n\nvalue.(time)\n\n80.0\n\n\n\nvalue.(materials)\n\n300.0\n\n\nWhat if we also want the optimal objective value? We can obtain this using objective_value().\n\nobjective_value(factory_model)\n\n847.2222222222221\n\n\nWe could also define other expressions via the @expression macro as functions of the decision variables and evaluate those. For example, let’s say that we wanted to know the total number of widgets we’d produce under our optimal allocation of resources.\n\n@expression(factory_model, total_widgets, x+y)\nvalue.(total_widgets)\n\n9.444444444444443\n\n\n\n\nDual Solutions\nWe can identify if our model has a dual solution by calling has_duals().\n\nhas_duals(factory_model)\n\ntrue\n\n\nIf we want to know the dual solution associated with a constraint, we use the shadow_price() function.\n\n\n\n\n\n\nNaming Constraints\n\n\n\nModifying constraints and querying for dual solutions is the reason why it’s important to give constraints individual names.\n\n\n\nshadow_price(time)\n\n2.777777777777777\n\n\n\nshadow_price(materials)\n\n2.0833333333333335\n\n\nIf the binding constraint was a variable bound, we could also query that shadow price by calling reduced_cost() on the variable.\n\nreduced_cost(x)\n\n-0.0\n\n\n\nreduced_cost(y)\n\n-0.0\n\n\nIn this case, the relevant shadow prices are zero because the optimum is in the interior of the domain. If we had added a strong enough upper bound on the value(s) of one or both of our decision variables (say, \\(x \\leq 4\\)), then this would be non-zero.",
    "crumbs": [
      "Tutorials",
      "Solving Linear Programs"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html",
    "href": "tutorials/julia-basics.html",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "This tutorial will give some examples of basic Julia commands and syntax.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#overview",
    "href": "tutorials/julia-basics.html#overview",
    "title": "Tutorial: Julia Basics",
    "section": "",
    "text": "This tutorial will give some examples of basic Julia commands and syntax.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#getting-help",
    "href": "tutorials/julia-basics.html#getting-help",
    "title": "Tutorial: Julia Basics",
    "section": "Getting Help",
    "text": "Getting Help\n\nCheck out the official documentation for Julia: https://docs.julialang.org/en/v1/.\nStack Overflow is a commonly-used resource for programming assistance.\nAt a code prompt or in the REPL, you can always type ?functionname to get help.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#comments",
    "href": "tutorials/julia-basics.html#comments",
    "title": "Tutorial: Julia Basics",
    "section": "Comments",
    "text": "Comments\nComments hide statements from the interpreter or compiler. It’s a good idea to liberally comment your code so readers (including yourself!) know why your code is structured and written the way it is. Single-line comments in Julia are preceded with a #. Multi-line comments are preceded with #= and ended with =#",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#suppressing-output",
    "href": "tutorials/julia-basics.html#suppressing-output",
    "title": "Tutorial: Julia Basics",
    "section": "Suppressing Output",
    "text": "Suppressing Output\nYou can suppress output using a semi-colon (;).\n\n4+8;\n\nThat didn’t show anything, as opposed to:\n\n4+8\n\n12",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#variables",
    "href": "tutorials/julia-basics.html#variables",
    "title": "Tutorial: Julia Basics",
    "section": "Variables",
    "text": "Variables\nVariables are names which correspond to some type of object. These names are bound to objects (and hence their values) using the = operator.\n\nx = 5\n\n5\n\n\nVariables can be manipulated with standard arithmetic operators.\n\n4 + x\n\n9\n\n\nAnother advantage of Julia is the ability to use Greek letters (or other Unicode characters) as variable names. For example, type a backslash followed by the name of the Greek letter (i.e. \\alpha) followed by TAB.\n\nα = 3\n\n3\n\n\nYou can also include subscripts or superscripts in variable names using \\_ and \\^, respectively, followed by TAB. If using a Greek letter followed by a sub- or super-script, make sure you TAB following the name of the letter before the sub- or super-script. Effectively, TAB after you finish typing the name of each \\character.\n\nβ₁ = 10 # The name of this variable was entered with \\beta + TAB + \\_1 + TAB\n\n10\n\n\nHowever, try not to overwrite predefined names! For example, you might not want to use π as a variable name…\n\nπ\n\nπ = 3.1415926535897...\n\n\nIn the grand scheme of things, overwriting π is not a huge deal unless you want to do some trigonometry. However, there are more important predefined functions and variables that you may want to be aware of. Always check that a variable or function name is not predefined!",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#data-types",
    "href": "tutorials/julia-basics.html#data-types",
    "title": "Tutorial: Julia Basics",
    "section": "Data Types",
    "text": "Data Types\nEach datum (importantly, not the variable which is bound to it) has a data type. Julia types are similar to C types, in that they require not only the type of data (Int, Float, String, etc), but also the precision (which is related to the amount of memory allocated to the variable). Issues with precision won’t be a big deal in this class, though they matter when you’re concerned about performance vs. decimal accuracy of code.\nYou can identify the type of a variable or expression with the typeof() function.\n\ntypeof(\"This is a string.\")\n\nString\n\n\n\ntypeof(x)\n\nInt64\n\n\n\nNumeric types\nA key distinction is between an integer type (or Int) and a floating-point number type (or float). Integers only hold whole numbers, while floating-point numbers correspond to numbers with fractional (or decimal) parts. For example, 9 is an integer, while 9.25 is a floating point number. The difference between the two has to do with the way the number is stored in memory. 9, an integer, is handled differently in memory than 9.0, which is a floating-point number, even though they’re mathematically the same value.\n\ntypeof(9)\n\nInt64\n\n\n\ntypeof(9.25)\n\nFloat64\n\n\nSometimes certain function specifications will require you to use a Float variable instead of an Int. One way to force an Int variable to be a Float is to add a decimal point at the end of the integer.\n\ntypeof(9.)\n\nFloat64\n\n\n\n\nStrings\nStrings hold characters, rather than numeric values. Even if a string contains what seems like a number, it is actually stored as the character representation of the digits. As a result, you cannot use arithmetic operators (for example) on this datum.\n\n\"5\" + 5\n\nLoadError: MethodError: no method matching +(::String, ::Int64)\n\n\u001b[0mClosest candidates are:\n\u001b[0m  +(::Any, ::Any, \u001b[91m::Any\u001b[39m, \u001b[91m::Any...\u001b[39m)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m\u001b[4moperators.jl:578\u001b[24m\u001b[39m\n\u001b[0m  +(\u001b[91m::T\u001b[39m, ::T) where T&lt;:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8}\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[90mBase\u001b[39m \u001b[90m\u001b[4mint.jl:87\u001b[24m\u001b[39m\n\u001b[0m  +(\u001b[91m::LinearAlgebra.UniformScaling\u001b[39m, ::Number)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[35mLinearAlgebra\u001b[39m \u001b[90m~/.julia/juliaup/julia-1.9.2+0.x64.apple.darwin14/share/julia/stdlib/v1.9/LinearAlgebra/src/\u001b[39m\u001b[90m\u001b[4muniformscaling.jl:144\u001b[24m\u001b[39m\n\u001b[0m  ...\n\n\nHowever, you can try to tell Julia to interpret a string encoding a numeric character as a numeric value using the parse() function. This can also be used to encode a numeric data as a string.\n\nparse(Int64, \"5\") + 5\n\n10\n\n\nTwo strings can be concatenated using *:\n\n\"Hello\" * \" \" * \"there\"\n\n\"Hello there\"\n\n\n\n\nBooleans\nBoolean variables (or Bools) are logical variables, that can have true or false as values.\n\nb = true\n\ntrue\n\n\nNumerical comparisons, such as ==, !=, or &lt;, return a Bool.\n\nc = 9 &gt; 11\n\nfalse\n\n\nBools are important for logical flows, such as if-then-else blocks or certain types of loops.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#mathematical-operations",
    "href": "tutorials/julia-basics.html#mathematical-operations",
    "title": "Tutorial: Julia Basics",
    "section": "Mathematical operations",
    "text": "Mathematical operations\nAddition, subtraction, multiplication, and division work as you would expect. Just pay attention to types! The type of the output is influenced by the type of the inputs: adding or multiplying an Int by a Float will always result in a Float, even if the Float is mathematically an integer. Division is a little special: dividing an Int by another Int will still return a float, because Julia doesn’t know ahead of time if the denominator is a factor of the numerator.\n\n3 + 5\n\n8\n\n\n\n3 * 2\n\n6\n\n\n\n3 * 2.\n\n6.0\n\n\n\n6 - 2\n\n4\n\n\n\n9 / 3\n\n3.0\n\n\nRaising a base to an exponent uses ^, not **.\n\n3^2\n\n9\n\n\nJulia allows the use of updating operators to simplify updating a variable in place (in other words, using x += 5 instead of x = x + 5.\n\nBoolean algebra\nLogical operations can be used on variables of type Bool. Typical operators are && (and), || (or), and ! (not).\n\ntrue && true\n\ntrue\n\n\n\ntrue && false\n\nfalse\n\n\n\ntrue || false\n\ntrue\n\n\n\n!true\n\nfalse\n\n\nComparisons can be chained together.\n\n3 &lt; 4 || 8 == 12\n\ntrue\n\n\nWe didn’t do this above, since Julia doesn’t require it, but it’s easier to understand these types of compound expressions if you use parentheses to signal the order of operations. This helps with debugging!\n\n(3 &lt; 4) || (8 == 12)\n\ntrue",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#data-structures",
    "href": "tutorials/julia-basics.html#data-structures",
    "title": "Tutorial: Julia Basics",
    "section": "Data Structures",
    "text": "Data Structures\nData structures are containers which hold multiple values in a convenient fashion. Julia has several built-in data structures, and there are many extensions provided in additional packages.\n\nTuples\nTuples are collections of values. Julia will pay attention to the types of these values, but they can be mixed. Tuples are also immutable: their values cannot be changed once they are defined.\nTuples can be defined by just separating values with commas.\n\ntest_tuple = 4, 5, 6\n\n(4, 5, 6)\n\n\nTo access a value, use square brackets and the desired index. Note: Julia indexing starts at 1, not 0!\n\ntest_tuple[1]\n\n4\n\n\nAs mentioned above, tuples are immutable. What happens if we try to change the value of the first element of test_tuple?\n\ntest_tuple[1] = 5\n\nLoadError: MethodError: no method matching setindex!(::Tuple{Int64, Int64, Int64}, ::Int64, ::Int64)\n\n\nTuples also do not have to hold the same types of values.\n\ntest_tuple_2 = 4, 5., 'h'\ntypeof(test_tuple_2)\n\nTuple{Int64, Float64, Char}\n\n\nTuples can also be defined by enclosing the values in parentheses.\ntest_tuple_3 = (4, 5., 'h')\ntypeof(test_tuple_3)\n\n\nArrays\nArrays also hold multiple values, which can be accessed based on their index position. Arrays are commonly defined using square brackets.\n\ntest_array = [1, 4, 7, 8]\ntest_array[2]\n\n4\n\n\nUnlike tuples, arrays are mutable, and their contained values can be changed later.\n\ntest_array[1] = 6\ntest_array\n\n4-element Vector{Int64}:\n 6\n 4\n 7\n 8\n\n\nArrays also can hold multiple types. Unlike tuples, this causes the array to no longer care about types at all.\n\ntest_array_2 = [6, 5., 'h']\ntypeof(test_array_2)\n\n\nVector{Any} (alias for Array{Any, 1})\n\n\n\nCompare this with test_array:\n\ntypeof(test_array)\n\n\nVector{Int64} (alias for Array{Int64, 1})\n\n\n\n\n\nDictionaries\nInstead of using integer indices based on position, dictionaries are indexed by keys. They are specified by passing key-value pairs to the Dict() method.\n\ntest_dict = Dict(\"A\"=&gt;1, \"B\"=&gt;2)\ntest_dict[\"B\"]\n\n2\n\n\n\n\nComprehensions\nCreating a data structure with more than a handful of elements can be tedious to do by hand. If your desired array follows a certain pattern, you can create structures using a comprehension. Comprehensions iterate over some other data structure (such as an array) implicitly and populate the new data structure based on the specified instructions.\n\n[i^2 for i in 0:1:5]\n\n6-element Vector{Int64}:\n  0\n  1\n  4\n  9\n 16\n 25\n\n\nFor dictionaries, make sure that you also specify the keys.\n\nDict(string(i) =&gt; i^2 for i in 0:1:5)\n\nDict{String, Int64} with 6 entries:\n  \"4\" =&gt; 16\n  \"1\" =&gt; 1\n  \"5\" =&gt; 25\n  \"0\" =&gt; 0\n  \"2\" =&gt; 4\n  \"3\" =&gt; 9",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#functions",
    "href": "tutorials/julia-basics.html#functions",
    "title": "Tutorial: Julia Basics",
    "section": "Functions",
    "text": "Functions\nA function is an object which accepts a tuple of arguments and maps them to a return value. In Julia, functions are defined using the following syntax.\n\nfunction my_actual_function(x, y)\n    return x + y\nend\nmy_actual_function(3, 5)\n\n8\n\n\nFunctions in Julia do not require explicit use of a return statement. They will return the last expression evaluated in their definition. However, it’s good style to explicitly return function outputs. This improves readability and debugging, especially when functions can return multiple expressions based on logical control flows (if-then-else blocks).\nFunctions in Julia are objects, and can be treated like other objects. They can be assigned to new variables or passed as arguments to other functions.\n\ng = my_actual_function\ng(3, 5)\n\n8\n\n\n\nfunction function_of_functions(f, x, y)\n    return f(x, y)\nend\nfunction_of_functions(g, 3, 5)\n\n8\n\n\n\nShort and Anonymous Functions\nIn addition to the long form of the function definition shown above, simple functions can be specified in more compact forms when helpful.\nThis is the short form:\n\nh₁(x) = x^2 # make the subscript using \\_1 + &lt;TAB&gt;\nh₁(4)\n\n16\n\n\nThis is the anonymous form:\n\nx-&gt;sin(x)\n(x-&gt;sin(x))(π/4)\n\n0.7071067811865475\n\n\n\n\nMutating Functions\nThe convention in Julia is that functions should not modify (or mutate) their input data. The reason for this is to ensure that the data is preserved. Mutating functions are mainly appropriate for applications where performance needs to be optimized, and making a copy of the input data would be too memory-intensive.\nIf you do write a mutating function in Julia, the convention is to add a ! to its name, like my_mutating_function!(x).\n\n\nOptional arguments\nThere are two extremes with regard to function parameters which do not always need to be changed. The first is to hard-code them into the function body, which has a clear downside: when you do want to change them, the function needs to be edited directly. The other extreme is to treat them as regular arguments, passing them every time the function is called. This has the downside of potentially creating bloated function calls, particularly when there is a standard default value that makes sense for most function evaluations.\nMost modern languages, including Julia, allow an alternate solution, which is to make these arguments optional. This involves setting a default value, which is used unless the argument is explicitly defined in a function call.\n\nfunction setting_optional_arguments(x, y, c=0.5)\n    return c * (x + y)\nend\n\nsetting_optional_arguments (generic function with 2 methods)\n\n\nIf we want to stick with the fixed value \\(c=0.5\\), all we have to do is call setting_optional_arguments with the x and y arguments.\n\nsetting_optional_arguments(3, 5)\n\n4.0\n\n\nOtherwise, we can pass a new value for c.\n\nsetting_optional_arguments(3, 5, 2)\n\n16\n\n\n\n\nPassing data structures as arguments\nInstead of passing variables individually, it may make sense to pass a data structure, such as an array or a tuple, and then unpacking within the function definition. This is straightforward in long form: access the appropriate elements using their index.\nIn short or anonymous form, there is a trick which allows the use of readable variables within the function definition.\n\nh₂((x,y)) = x*y # enclose the input arguments in parentheses to tell Julia to expect and unpack a tuple\n\nh₂ (generic function with 1 method)\n\n\n\nh₂((2, 3)) # this works perfectly, as we passed in a tuple\n\n6\n\n\n\nh₂(2, 3) # this gives an error, as h₂ expects a single tuple, not two different numeric values\n\nLoadError: MethodError: no method matching h₂(::Int64, ::Int64)\n\n\u001b[0mClosest candidates are:\n\u001b[0m  h₂(::Any)\n\u001b[0m\u001b[90m   @\u001b[39m \u001b[32mMain\u001b[39m \u001b[90m\u001b[4mIn[50]:1\u001b[24m\u001b[39m\n\n\n\nh₂([3, 10]) # this also works with arrays instead of tuples\n\n30\n\n\n\n\nVectorized operations\nJulia uses dot syntax to vectorize an operation and apply it element-wise across an array.\nFor example, to calculate the square root of 3:\n\nsqrt(3)\n\n1.7320508075688772\n\n\nTo calculate the square roots of every integer between 1 and 5:\n\nsqrt.([1, 2, 3, 4, 5])\n\n5-element Vector{Float64}:\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n 2.23606797749979\n\n\nThe same dot syntax is used for arithmetic operations over arrays, since these operations are really functions.\n\n[1, 2, 3, 4] .* 2\n\n4-element Vector{Int64}:\n 2\n 4\n 6\n 8\n\n\nVectorization can be faster and is more concise to write and read than applying the same function to multiple variables or objects explicitly, so take advantage!\n\n\nReturning multiple values\nYou can return multiple values by separating them with a comma. This implicitly causes the function to return a tuple of values.\n\nfunction return_multiple_values(x, y)\n    return x + y, x * y\nend\nreturn_multiple_values(3, 5)\n\n(8, 15)\n\n\nThese values can be unpacked into multiple variables.\n\nn, ν = return_multiple_values(3, 5)\nn\n\n8\n\n\n\nν\n\n15\n\n\n\n\nReturning nothing\nSometimes you don’t want a function to return any values at all. For example, you might want a function that only prints a string to the console.\n\nfunction print_some_string(x)\n    println(\"x: $x\")\n    return nothing\nend\nprint_some_string(42)\n\nx: 42",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#printing-text-output",
    "href": "tutorials/julia-basics.html#printing-text-output",
    "title": "Tutorial: Julia Basics",
    "section": "Printing Text Output",
    "text": "Printing Text Output\nThe Text() function returns its argument as a plain text string. Notice how this is different from evaluating a string!\n\nText(\"I'm printing a string.\")\n\nI'm printing a string.\n\n\nText() is used in this tutorial as it returns the string passed to it. To print directly to the console, use println().\n\nprintln(\"I'm writing a string to the console.\")\n\nI'm writing a string to the console.\n\n\n\nPrinting Variables In a String\nWhat if we want to include the value of a variable inside of a string? We do this using string interpolation, using $variablename inside of the string.\n\nbar = 42\nText(\"Now I'm printing a variable: $bar\")\n\nNow I'm printing a variable: 42",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#control-flows",
    "href": "tutorials/julia-basics.html#control-flows",
    "title": "Tutorial: Julia Basics",
    "section": "Control Flows",
    "text": "Control Flows\nOne of the tricky things about learning a new programming language can be getting used to the specifics of control flow syntax. These types of flows include conditional if-then-else statements or loops.\n\nConditional Blocks\nConditional blocks allow different pieces of code to be evaluated depending on the value of a boolean expression or variable. For example, if we wanted to compute the absolute value of a number, rather than using abs():\n\nfunction our_abs(x)\n    if x &gt;= 0\n        return x\n    else\n        return -x\n    end\nend\n\nour_abs (generic function with 1 method)\n\n\n\nour_abs(4)\n\n4\n\n\n\nour_abs(-4)\n\n4\n\n\nTo nest conditional statements, use elseif.\n\nfunction test_sign(x)\n    if x &gt; 0\n        return Text(\"x is positive.\")\n    elseif x &lt; 0\n        return Text(\"x is negative.\")\n    else\n        return Text(\"x is zero.\")\n    end\nend\n\ntest_sign (generic function with 1 method)\n\n\n\ntest_sign(-5)\n\nx is negative.\n\n\n\ntest_sign(0)\n\nx is zero.\n\n\n\n\nLoops\nLoops allow expressions to be evaluated repeatedly until they are terminated. The two main types of loops are while loops and for loops.\n\nWhile loops\nwhile loops continue to evaluate an expression so long as a specified boolean condition is true. This is useful when you don’t know how many iterations it will take for the desired goal to be reached.\n\nfunction compute_factorial(x)\n    factorial = 1\n    while (x &gt; 1)\n        factorial *= x\n        x -= 1\n    end\n    return factorial\nend\ncompute_factorial(5)\n\n120\n\n\n\nWhile loops can easily turn into infinite loops if the condition is never meaningfully updated. Be careful, and look there if your programs are getting stuck. Also, If the expression in a while loop is false when the loop is reached, the loop will never be evaluated.\n\n\n\nFor loops\nfor loops run for a finite number of iterations, based on some defined index variable.\n\nfunction add_some_numbers(x)\n    total_sum = 0 # initialize at zero since we're adding\n    for i=1:x # the counter i is updated every iteration\n        total_sum += i\n    end\n    return total_sum\nend\nadd_some_numbers(4)\n\n10\n\n\nfor loops can also iterate over explicitly passed containers, rather than iterating over an incrementally-updated index sequence. Use the in keyword when defining the loop.\n\nfunction add_passed_numbers(set)\n    total_sum = 0\n    for i in set # this is the syntax we use when we want i to correspond to different container values\n        total_sum += i\n    end\n    return total_sum\nend\nadd_passed_numbers([1, 3, 5])\n\n9",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#linear-algebra",
    "href": "tutorials/julia-basics.html#linear-algebra",
    "title": "Tutorial: Julia Basics",
    "section": "Linear algebra",
    "text": "Linear algebra\nMatrices are defined in Julia as 2d arrays. Unlike basic arrays, matrices need to contain the same data type so Julia knows what operations are allowed. When defining a matrix, use semicolons to separate rows. Row elements should not be separated by commas.\n\ntest_matrix = [1 2 3; 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nYou can also specify matrices using spaces and newlines.\n\ntest_matrix_2 = [1 2 3\n                 4 5 6]\n\n2×3 Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\nFinally, matrices can be created using comprehensions by separating the inputs by a comma.\n\n[i*j for i in 1:1:5, j in 1:1:5]\n\n5×5 Matrix{Int64}:\n 1   2   3   4   5\n 2   4   6   8  10\n 3   6   9  12  15\n 4   8  12  16  20\n 5  10  15  20  25\n\n\nVectors are treated as 1d matrices.\n\ntest_row_vector = [1 2 3]\n\n1×3 Matrix{Int64}:\n 1  2  3\n\n\n\ntest_col_vector = [1; 2; 3]\n\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\nMany linear algebra operations on vectors and matrices can be loaded using the LinearAlgebra package.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "tutorials/julia-basics.html#package-management",
    "href": "tutorials/julia-basics.html#package-management",
    "title": "Tutorial: Julia Basics",
    "section": "Package management",
    "text": "Package management\nSometimes you might need functionality that does not exist in base Julia. Julia handles packages using the Pkg package manager. After finding a package which has the functions that you need, you have two options:\n\nUse the package management prompt in the Julia REPL (the standard Julia interface; what you get when you type julia in your terminal). Enter this by typing ] at the standard green Julia prompt julia&gt;. This will become a blue pkg&gt;. You can then add new packages using add packagename.\nFrom the standard prompt, enter import Pkg; Pkg.add(packagename). The packagename package can then be used by adding using packagename to the start of the script.",
    "crumbs": [
      "Tutorials",
      "Julia Basics"
    ]
  },
  {
    "objectID": "rubrics/evaluation.html",
    "href": "rubrics/evaluation.html",
    "title": "Team Evaluation Rubric",
    "section": "",
    "text": "You will be graded on completing the team evaluation form in Canvas. The outcome of this evaluation will impact grades if teammates were evaluated as not having contributed to their project outcomes."
  },
  {
    "objectID": "rubrics/evaluation.html#rubric",
    "href": "rubrics/evaluation.html#rubric",
    "title": "Team Evaluation Rubric",
    "section": "",
    "text": "You will be graded on completing the team evaluation form in Canvas. The outcome of this evaluation will impact grades if teammates were evaluated as not having contributed to their project outcomes."
  },
  {
    "objectID": "project/proposal.html",
    "href": "project/proposal.html",
    "title": "Project Proposal Instructions",
    "section": "",
    "text": "The project proposal is intended to provide an initial idea of your project to formalize:\n\nThe scope of the systems model;\nThe specific design or management problem.\n\nThe proposal is not binding: you can change aspects of the project later, for example, if you find that you cannot formulate your proposed problem appropriately or cannot find data. However, please discuss these changes with Prof. Srikrishnan as soon as possible to make sure the revised project satisfies the project requirement.\nWhile you may have to submit the proposal before we can discuss prescriptive problems in class, your project can focus on decision-making. Provide an idea of the decision problem you would like to study, and you will have the opportunity to refine your problem formulation through discussions with Prof. Srikrishnan and in the project update based on the course content."
  },
  {
    "objectID": "project/proposal.html#overview",
    "href": "project/proposal.html#overview",
    "title": "Project Proposal Instructions",
    "section": "",
    "text": "The project proposal is intended to provide an initial idea of your project to formalize:\n\nThe scope of the systems model;\nThe specific design or management problem.\n\nThe proposal is not binding: you can change aspects of the project later, for example, if you find that you cannot formulate your proposed problem appropriately or cannot find data. However, please discuss these changes with Prof. Srikrishnan as soon as possible to make sure the revised project satisfies the project requirement.\nWhile you may have to submit the proposal before we can discuss prescriptive problems in class, your project can focus on decision-making. Provide an idea of the decision problem you would like to study, and you will have the opportunity to refine your problem formulation through discussions with Prof. Srikrishnan and in the project update based on the course content."
  },
  {
    "objectID": "project/proposal.html#instructions",
    "href": "project/proposal.html#instructions",
    "title": "Project Proposal Instructions",
    "section": "Instructions",
    "text": "Instructions\n\nYour proposal should be no more than 1 page, not including figures or references.\nProvide a brief overview of the system you would like to analyze, a motivation for the choice, and the problem you will study. Your proposal should include:\n\nAn overview of your system (including a diagram showing the control volume of your study, relevant metrics, and what exogenous factors you will consider).\nA rough idea of the experimental design, possible data sources and including what uncertainties you will consider.\nReferences for any sources consulted, including academic literature, websites, and news articles.\n\nInclude the name(s) of the project team at the top of the PDF.\nThe proposal should have the following format:\n\n1/2 inch margins on each side;\n12 point Calibri font;\n1.5x line spacing.\n\nSubmit a PDF of the proposal to Gradescope by 9:00 PM on the due date."
  },
  {
    "objectID": "project/regulation.html",
    "href": "project/regulation.html",
    "title": "Regulations Report Instructions",
    "section": "",
    "text": "The goal of the regulations report is to identify the regulatory context for the system you are analyzing for your project. You will focus on one regulation which is applicable to your selected problem. An important component of the report is the identification of appropriate sources for research."
  },
  {
    "objectID": "project/regulation.html#overview",
    "href": "project/regulation.html#overview",
    "title": "Regulations Report Instructions",
    "section": "",
    "text": "The goal of the regulations report is to identify the regulatory context for the system you are analyzing for your project. You will focus on one regulation which is applicable to your selected problem. An important component of the report is the identification of appropriate sources for research."
  },
  {
    "objectID": "project/regulation.html#instructions",
    "href": "project/regulation.html#instructions",
    "title": "Regulations Report Instructions",
    "section": "Instructions",
    "text": "Instructions\n\nYour report should be no more than 3 pages, not including figures or references.\nYou should include the following information in your report (written as a narrative, rather than as a list):\n\nThe regulation you are researching;\nThe problem the regulation was intended to solve;\nThe history of the regulation’s proposal, amendments, and current state;\nAt least three specific instances of proposed rule-making, revision, or public comment in the regulatory process that applied to your regulation1;\nHow you plan to incorporate your regulation into your systems model;\nReferences for any sources consulted, including academic literature, websites, and news articles.\n\nInclude the name(s) of the project team at the top of the PDF.\nThe report should have the following format:\n\n1/2 inch margins on each side;\n12 point Calibri font;\n1.5x line spacing.\n\nSubmit a PDF of the proposal to Gradescope by 9:00 PM on the due date.\n\n\n\n1 If you cannot find three instances, document your search process and those you were able to find"
  },
  {
    "objectID": "slides/notebooks/economic-dispatch.html",
    "href": "slides/notebooks/economic-dispatch.html",
    "title": "Economic Dispatch with JuMP",
    "section": "",
    "text": "Code\nusing Pkg\nPkg.activate(dirname(@__DIR__))\nPkg.instantiate()\n\n\n  Activating project at `~/Teaching/environmental-systems-analysis/website/slides`\nCode\nusing DataFrames\nusing LaTeXStrings\nusing PrettyTables\nusing JuMP\nusing HiGHS\nusing Plots\nusing Measures"
  },
  {
    "objectID": "slides/notebooks/economic-dispatch.html#overview-of-economic-dispatch",
    "href": "slides/notebooks/economic-dispatch.html#overview-of-economic-dispatch",
    "title": "Economic Dispatch with JuMP",
    "section": "Overview of Economic Dispatch",
    "text": "Overview of Economic Dispatch\nA key goal in power systems operations is how to meet demand by generating electricity from a variety of generators with varying costs and engineering constraints, including: * ramping limits; * minimum/maximum power outputs; * network constraints (we will ignore these here).\nEconomic dispatch refers to solving this problem with an objective of minimizing total costs of production. Economic dispatch is typically formulated as a linear programming problem, and we will use JuMP to formulate and solve it for a simple portfolio of generators over: * a single period * multiple periods with ramping constraints."
  },
  {
    "objectID": "slides/notebooks/economic-dispatch.html#single-period-economic-dispatch",
    "href": "slides/notebooks/economic-dispatch.html#single-period-economic-dispatch",
    "title": "Economic Dispatch with JuMP",
    "section": "Single-Period Economic Dispatch",
    "text": "Single-Period Economic Dispatch\nLet’s say that we have a fleet of the following generators.\n\n\nCode\nheader = [\"Plant\", \"P&lt;sub&gt;min&lt;/sub&gt; (MW)\", \"P&lt;sub&gt;max&lt;/sub&gt; (MW)\", \"VarCost (\\$/MW)\"]\ngen_names = [\"Hydro\", \"Wind\", \"Nuclear\", \"Coal\", \"Natural Gas\"]\ngen_minpower = [0, 0, 200, 160, 40]\ngen_maxpower = [150, 200, 1000, 700, 500]\ngen_varcost = [0, 0, 2, 21.50, 23]\ngen_data = DataFrame(name=gen_names, Pmin=gen_minpower, Pmax=gen_maxpower, varcost=gen_varcost)\npretty_table(gen_data; backend = Val(:html), header=header, allow_html_in_cells=true)\n\n\n\n\n\n\nPlant\nPmin (MW)\nPmax (MW)\nVarCost ($/MW)\n\n\n\n\nHydro\n0\n150\n0.0\n\n\nWind\n0\n200\n0.0\n\n\nNuclear\n200\n1000\n2.0\n\n\nCoal\n160\n700\n21.5\n\n\nNatural Gas\n40\n500\n23.0\n\n\n\n\n\n\nLet’s also assume that demand in this period is 1800 MW."
  },
  {
    "objectID": "slides/notebooks/economic-dispatch.html#jump-formulation",
    "href": "slides/notebooks/economic-dispatch.html#jump-formulation",
    "title": "Economic Dispatch with JuMP",
    "section": "JuMP Formulation",
    "text": "JuMP Formulation\n\n\nCode\ndemand = 1800\n\nG = 1:nrow(gen_data)\ndispatch = Model(HiGHS.Optimizer)\n@variable(dispatch, gen_minpower[g] &lt;= y[g in G] &lt;= gen_maxpower[g])\n@objective(dispatch, Min, sum(gen_varcost .* y))\n@constraint(dispatch, load, sum(y) == demand)\n\nlatex_formulation(dispatch)\n\n\n\\[ \\begin{aligned}\n\\min\\quad & 2 y_{3} + 21.5 y_{4} + 23 y_{5}\\\\\n\\text{Subject to} \\quad & y_{1} + y_{2} + y_{3} + y_{4} + y_{5} = 1800.0\\\\\n& y_{1} \\geq 0.0\\\\\n& y_{2} \\geq 0.0\\\\\n& y_{3} \\geq 200.0\\\\\n& y_{4} \\geq 160.0\\\\\n& y_{5} \\geq 40.0\\\\\n& y_{1} \\leq 150.0\\\\\n& y_{2} \\leq 200.0\\\\\n& y_{3} \\leq 1000.0\\\\\n& y_{4} \\leq 700.0\\\\\n& y_{5} \\leq 500.0\\\\\n\\end{aligned} \\]\n\n\n\n\nCode\nset_silent(dispatch)\noptimize!(dispatch)\n\n\n\n\nCode\ngen_sol = value.(y).data\nresults = DataFrame(name=gen_names, dispatch=gen_sol\n, pmin=gen_minpower, pmax=gen_maxpower)\nresults_header = [\"Plant\", \"Dispatch (MW)\", \"P&lt;sub&gt;min&lt;/sub&gt; (MW)\", \"P&lt;sub&gt;max&lt;/sub&gt; (MW)\"]\npretty_table(results; backend = Val(:html), header=results_header, allow_html_in_cells=true)\n\n\n\n\n\n\nPlant\nDispatch (MW)\nPmin (MW)\nPmax (MW)\n\n\n\n\nHydro\n150.0\n0\n150\n\n\nWind\n200.0\n0\n200\n\n\nNuclear\n1000.0\n200\n1000\n\n\nCoal\n410.0\n160\n700\n\n\nNatural Gas\n40.0\n40\n500\n\n\n\n\n\n\n\nMarginal Generators\nOnce we hit the minimum for each generator, we then “fill up” capacity from lowest-cost generators first, then move on.\nFor this problem, the coal generator is the marginal generator. If we had used all of our coal capacity, the natural gas unit would be the marginal generator. The concept of the marginal generator is important, as the marginal generation unit sets the price of electricity.\n\n\nMerit Order and the Dispatch Stack\nThis procedure of starting with the lowest-cost generation and adding generation sequentially from generators in order of cost is the concept of merit order: plants are scheduled to supply additional electricity based (mostly) on their variable costs. We can visualize the supply curve (or the dispatch stack) to see the order in which electricity is dispatched.\n\n\nCode\nsupply_curve = DataFrame( \n    name = gen_names, \n    pmin = gen_minpower, \n    cap = gen_maxpower .- gen_minpower,\n    varcost = gen_varcost \n)\n\nsort!(supply_curve, [:varcost, order(:cap, rev=true)])\n\n\n\n5×4 DataFrame\n\n\n\nRow\nname\npmin\ncap\nvarcost\n\n\n\nString\nInt64\nInt64\nFloat64\n\n\n\n\n1\nWind\n0\n200\n0.0\n\n\n2\nHydro\n0\n150\n0.0\n\n\n3\nNuclear\n200\n800\n2.0\n\n\n4\nCoal\n160\n540\n21.5\n\n\n5\nNatural Gas\n40\n460\n23.0\n\n\n\n\n\n\n\n\n\nCode\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h]) \n\np = plot(grid=:false, color_palette=:tol_muted, legend=:left, legendfontsize=20, tickfontsize=20, guidefontsize=20) \nmarg_gen = 0 \nmarg_price = 0 \nx = 0 \n\nplot!(p, rectangle(sum(supply_curve.pmin), 0.5, x, 0), opacity=.5, label = \"minimum\", color=\"black\") \nx = x + sum(supply_curve.pmin) \nfor i in 1:nrow(supply_curve) \n    if supply_curve[i, :varcost] == 0 \n        plot!(p, rectangle(supply_curve[i, :cap], 0.5,x,0), opacity=.5, label = supply_curve[i, :name]) \n    else \n        plot!(p, rectangle(supply_curve[i, :cap], supply_curve[i, :varcost],x,0), opacity=.5, label = supply_curve[i, :name]) \n    end \n    if (x &lt; demand) && (x + supply_curve[i,:cap] &gt; demand) \n        marg_gen = i \n        marg_price = supply_curve[i,:varcost] \n    end \n    x = x + supply_curve[i,:cap] \nend \nvline!([demand],linecolor=\"black\",linewidth=5, linestyle=:dash, label = \"demand\") \nhline!([marg_price],linecolor=\"blue\", linestyle=:dot, linewidth=5, label = \"Electricity Price\") \nxlabel!(\"Capacity (MW)\") \nylabel!(\"Marginal Cost (\\$/MW)\") \nplot!(size=(800, 600))\nplot!(right_margin=13mm, left_margin=5mm, bottom_margin=5mm)"
  },
  {
    "objectID": "slides/notebooks/economic-dispatch.html#multiple-period-dispatch",
    "href": "slides/notebooks/economic-dispatch.html#multiple-period-dispatch",
    "title": "Economic Dispatch with JuMP",
    "section": "Multiple-Period Dispatch",
    "text": "Multiple-Period Dispatch\nWhat changes for multiple periods?\n\nNeed to meet demand at every time period\nWe have additional ramping constraints: plants can only increase and decrease their output by so much from time to time, by \\(R_g\\).\n\n\nJuMP Implementation\n\n\nCode\nramp = [150, 200, 100, 250, 300]\ndemand = [1725, 1596, 1476, 1408, 1530, 1714, 1820, 1973, 2081, 2202, 2105, 2065, \n    2045, 2195, 2309, 2390, 2486, 2515, 2075, 2006, 1956, 1902, 1865, 1820]\nh = length(demand)\nT = 1:h\n\ndispatch2 = Model(HiGHS.Optimizer)\n@variable(dispatch2, gen_minpower[g] &lt;= y[g in G, t in T] &lt;= gen_maxpower[g])\n@objective(dispatch2, Min, sum(gen_varcost .* sum([y[:, t] for t in T])))\n@constraint(dispatch2, load[t in T], sum(y[:, t]) == demand[t])\n@constraint(dispatch2, rampup[g in G, t in 1:h-1], y[g, t+1] - y[g, t] &lt;= ramp[g])\n@constraint(dispatch2, rampdown[g in G, t in 1:h-1], y[g, t] - y[g, t+1] &lt;= ramp[g])\n\nlatex_formulation(dispatch2)\n\n\n\\[ \\begin{aligned}\n\\min\\quad & 2 y_{3,1} + 2 y_{3,2} + 2 y_{3,3} + 2 y_{3,4} + 2 y_{3,5} + 2 y_{3,6} + 2 y_{3,7} + 2 y_{3,8} + 2 y_{3,9} + 2 y_{3,10} + 2 y_{3,11} + 2 y_{3,12} + 2 y_{3,13} + 2 y_{3,14} + 2 y_{3,15} + 2 y_{3,16} + 2 y_{3,17} + 2 y_{3,18} + 2 y_{3,19} + 2 y_{3,20} + 2 y_{3,21} + 2 y_{3,22} + 2 y_{3,23} + 2 y_{3,24} + 21.5 y_{4,1} + 21.5 y_{4,2} + 21.5 y_{4,3} + 21.5 y_{4,4} + 21.5 y_{4,5} + 21.5 y_{4,6} + 21.5 y_{4,7} + 21.5 y_{4,8} + 21.5 y_{4,9} + 21.5 y_{4,10} + 21.5 y_{4,11} + 21.5 y_{4,12} + 21.5 y_{4,13} + 21.5 y_{4,14} + 21.5 y_{4,15} + 21.5 y_{4,16} + 21.5 y_{4,17} + 21.5 y_{4,18} + 21.5 y_{4,19} + 21.5 y_{4,20} + 21.5 y_{4,21} + 21.5 y_{4,22} + 21.5 y_{4,23} + 21.5 y_{4,24} + 23 y_{5,1} + 23 y_{5,2} + 23 y_{5,3} + 23 y_{5,4} + 23 y_{5,5} + 23 y_{5,6} + 23 y_{5,7} + 23 y_{5,8} + 23 y_{5,9} + 23 y_{5,10} + 23 y_{5,11} + 23 y_{5,12} + 23 y_{5,13} + 23 y_{5,14} + 23 y_{5,15} + 23 y_{5,16} + 23 y_{5,17} + 23 y_{5,18} + 23 y_{5,19} + 23 y_{5,20} + 23 y_{5,21} + 23 y_{5,22} + 23 y_{5,23} + 23 y_{5,24}\\\\\n\\text{Subject to} \\quad & y_{1,1} + y_{2,1} + y_{3,1} + y_{4,1} + y_{5,1} = 1725.0\\\\\n& y_{1,2} + y_{2,2} + y_{3,2} + y_{4,2} + y_{5,2} = 1596.0\\\\\n& y_{1,3} + y_{2,3} + y_{3,3} + y_{4,3} + y_{5,3} = 1476.0\\\\\n& y_{1,4} + y_{2,4} + y_{3,4} + y_{4,4} + y_{5,4} = 1408.0\\\\\n& y_{1,5} + y_{2,5} + y_{3,5} + y_{4,5} + y_{5,5} = 1530.0\\\\\n& y_{1,6} + y_{2,6} + y_{3,6} + y_{4,6} + y_{5,6} = 1714.0\\\\\n& y_{1,7} + y_{2,7} + y_{3,7} + y_{4,7} + y_{5,7} = 1820.0\\\\\n& y_{1,8} + y_{2,8} + y_{3,8} + y_{4,8} + y_{5,8} = 1973.0\\\\\n& y_{1,9} + y_{2,9} + y_{3,9} + y_{4,9} + y_{5,9} = 2081.0\\\\\n& y_{1,10} + y_{2,10} + y_{3,10} + y_{4,10} + y_{5,10} = 2202.0\\\\\n& y_{1,11} + y_{2,11} + y_{3,11} + y_{4,11} + y_{5,11} = 2105.0\\\\\n& y_{1,12} + y_{2,12} + y_{3,12} + y_{4,12} + y_{5,12} = 2065.0\\\\\n& y_{1,13} + y_{2,13} + y_{3,13} + y_{4,13} + y_{5,13} = 2045.0\\\\\n& y_{1,14} + y_{2,14} + y_{3,14} + y_{4,14} + y_{5,14} = 2195.0\\\\\n& y_{1,15} + y_{2,15} + y_{3,15} + y_{4,15} + y_{5,15} = 2309.0\\\\\n& y_{1,16} + y_{2,16} + y_{3,16} + y_{4,16} + y_{5,16} = 2390.0\\\\\n& y_{1,17} + y_{2,17} + y_{3,17} + y_{4,17} + y_{5,17} = 2486.0\\\\\n& y_{1,18} + y_{2,18} + y_{3,18} + y_{4,18} + y_{5,18} = 2515.0\\\\\n& y_{1,19} + y_{2,19} + y_{3,19} + y_{4,19} + y_{5,19} = 2075.0\\\\\n& y_{1,20} + y_{2,20} + y_{3,20} + y_{4,20} + y_{5,20} = 2006.0\\\\\n& y_{1,21} + y_{2,21} + y_{3,21} + y_{4,21} + y_{5,21} = 1956.0\\\\\n& y_{1,22} + y_{2,22} + y_{3,22} + y_{4,22} + y_{5,22} = 1902.0\\\\\n& y_{1,23} + y_{2,23} + y_{3,23} + y_{4,23} + y_{5,23} = 1865.0\\\\\n& y_{1,24} + y_{2,24} + y_{3,24} + y_{4,24} + y_{5,24} = 1820.0\\\\\n& -y_{1,1} + y_{1,2} \\leq 150.0\\\\\n& -y_{2,1} + y_{2,2} \\leq 200.0\\\\\n& -y_{3,1} + y_{3,2} \\leq 100.0\\\\\n& -y_{4,1} + y_{4,2} \\leq 250.0\\\\\n& -y_{5,1} + y_{5,2} \\leq 300.0\\\\\n& -y_{1,2} + y_{1,3} \\leq 150.0\\\\\n& -y_{2,2} + y_{2,3} \\leq 200.0\\\\\n& -y_{3,2} + y_{3,3} \\leq 100.0\\\\\n& -y_{4,2} + y_{4,3} \\leq 250.0\\\\\n& -y_{5,2} + y_{5,3} \\leq 300.0\\\\\n& -y_{1,3} + y_{1,4} \\leq 150.0\\\\\n& -y_{2,3} + y_{2,4} \\leq 200.0\\\\\n& -y_{3,3} + y_{3,4} \\leq 100.0\\\\\n& -y_{4,3} + y_{4,4} \\leq 250.0\\\\\n& -y_{5,3} + y_{5,4} \\leq 300.0\\\\\n& -y_{1,4} + y_{1,5} \\leq 150.0\\\\\n& -y_{2,4} + y_{2,5} \\leq 200.0\\\\\n& -y_{3,4} + y_{3,5} \\leq 100.0\\\\\n& -y_{4,4} + y_{4,5} \\leq 250.0\\\\\n& -y_{5,4} + y_{5,5} \\leq 300.0\\\\\n& -y_{1,5} + y_{1,6} \\leq 150.0\\\\\n& -y_{2,5} + y_{2,6} \\leq 200.0\\\\\n& -y_{3,5} + y_{3,6} \\leq 100.0\\\\\n& -y_{4,5} + y_{4,6} \\leq 250.0\\\\\n& -y_{5,5} + y_{5,6} \\leq 300.0\\\\\n& -y_{1,6} + y_{1,7} \\leq 150.0\\\\\n& -y_{2,6} + y_{2,7} \\leq 200.0\\\\\n& -y_{3,6} + y_{3,7} \\leq 100.0\\\\\n& -y_{4,6} + y_{4,7} \\leq 250.0\\\\\n& -y_{5,6} + y_{5,7} \\leq 300.0\\\\\n& -y_{1,7} + y_{1,8} \\leq 150.0\\\\\n& -y_{2,7} + y_{2,8} \\leq 200.0\\\\\n& -y_{3,7} + y_{3,8} \\leq 100.0\\\\\n& -y_{4,7} + y_{4,8} \\leq 250.0\\\\\n& -y_{5,7} + y_{5,8} \\leq 300.0\\\\\n& -y_{1,8} + y_{1,9} \\leq 150.0\\\\\n& -y_{2,8} + y_{2,9} \\leq 200.0\\\\\n& -y_{3,8} + y_{3,9} \\leq 100.0\\\\\n& -y_{4,8} + y_{4,9} \\leq 250.0\\\\\n& -y_{5,8} + y_{5,9} \\leq 300.0\\\\\n& -y_{1,9} + y_{1,10} \\leq 150.0\\\\\n& -y_{2,9} + y_{2,10} \\leq 200.0\\\\\n& -y_{3,9} + y_{3,10} \\leq 100.0\\\\\n& -y_{4,9} + y_{4,10} \\leq 250.0\\\\\n& -y_{5,9} + y_{5,10} \\leq 300.0\\\\\n& -y_{1,10} + y_{1,11} \\leq 150.0\\\\\n& -y_{2,10} + y_{2,11} \\leq 200.0\\\\\n& -y_{3,10} + y_{3,11} \\leq 100.0\\\\\n& -y_{4,10} + y_{4,11} \\leq 250.0\\\\\n& -y_{5,10} + y_{5,11} \\leq 300.0\\\\\n& -y_{1,11} + y_{1,12} \\leq 150.0\\\\\n& -y_{2,11} + y_{2,12} \\leq 200.0\\\\\n& -y_{3,11} + y_{3,12} \\leq 100.0\\\\\n& -y_{4,11} + y_{4,12} \\leq 250.0\\\\\n& -y_{5,11} + y_{5,12} \\leq 300.0\\\\\n& -y_{1,12} + y_{1,13} \\leq 150.0\\\\\n& -y_{2,12} + y_{2,13} \\leq 200.0\\\\\n& -y_{3,12} + y_{3,13} \\leq 100.0\\\\\n& -y_{4,12} + y_{4,13} \\leq 250.0\\\\\n& -y_{5,12} + y_{5,13} \\leq 300.0\\\\\n& -y_{1,13} + y_{1,14} \\leq 150.0\\\\\n& -y_{2,13} + y_{2,14} \\leq 200.0\\\\\n& -y_{3,13} + y_{3,14} \\leq 100.0\\\\\n& -y_{4,13} + y_{4,14} \\leq 250.0\\\\\n& -y_{5,13} + y_{5,14} \\leq 300.0\\\\\n& -y_{1,14} + y_{1,15} \\leq 150.0\\\\\n& -y_{2,14} + y_{2,15} \\leq 200.0\\\\\n& -y_{3,14} + y_{3,15} \\leq 100.0\\\\\n& -y_{4,14} + y_{4,15} \\leq 250.0\\\\\n& -y_{5,14} + y_{5,15} \\leq 300.0\\\\\n& -y_{1,15} + y_{1,16} \\leq 150.0\\\\\n& -y_{2,15} + y_{2,16} \\leq 200.0\\\\\n& -y_{3,15} + y_{3,16} \\leq 100.0\\\\\n& -y_{4,15} + y_{4,16} \\leq 250.0\\\\\n& -y_{5,15} + y_{5,16} \\leq 300.0\\\\\n& -y_{1,16} + y_{1,17} \\leq 150.0\\\\\n& -y_{2,16} + y_{2,17} \\leq 200.0\\\\\n& -y_{3,16} + y_{3,17} \\leq 100.0\\\\\n& -y_{4,16} + y_{4,17} \\leq 250.0\\\\\n& -y_{5,16} + y_{5,17} \\leq 300.0\\\\\n& -y_{1,17} + y_{1,18} \\leq 150.0\\\\\n& -y_{2,17} + y_{2,18} \\leq 200.0\\\\\n& -y_{3,17} + y_{3,18} \\leq 100.0\\\\\n& -y_{4,17} + y_{4,18} \\leq 250.0\\\\\n& -y_{5,17} + y_{5,18} \\leq 300.0\\\\\n& -y_{1,18} + y_{1,19} \\leq 150.0\\\\\n& -y_{2,18} + y_{2,19} \\leq 200.0\\\\\n& -y_{3,18} + y_{3,19} \\leq 100.0\\\\\n& -y_{4,18} + y_{4,19} \\leq 250.0\\\\\n& -y_{5,18} + y_{5,19} \\leq 300.0\\\\\n& -y_{1,19} + y_{1,20} \\leq 150.0\\\\\n& -y_{2,19} + y_{2,20} \\leq 200.0\\\\\n& -y_{3,19} + y_{3,20} \\leq 100.0\\\\\n& -y_{4,19} + y_{4,20} \\leq 250.0\\\\\n& -y_{5,19} + y_{5,20} \\leq 300.0\\\\\n& -y_{1,20} + y_{1,21} \\leq 150.0\\\\\n& -y_{2,20} + y_{2,21} \\leq 200.0\\\\\n& -y_{3,20} + y_{3,21} \\leq 100.0\\\\\n& -y_{4,20} + y_{4,21} \\leq 250.0\\\\\n& -y_{5,20} + y_{5,21} \\leq 300.0\\\\\n& -y_{1,21} + y_{1,22} \\leq 150.0\\\\\n& -y_{2,21} + y_{2,22} \\leq 200.0\\\\\n& -y_{3,21} + y_{3,22} \\leq 100.0\\\\\n& -y_{4,21} + y_{4,22} \\leq 250.0\\\\\n& -y_{5,21} + y_{5,22} \\leq 300.0\\\\\n& -y_{1,22} + y_{1,23} \\leq 150.0\\\\\n& -y_{2,22} + y_{2,23} \\leq 200.0\\\\\n& -y_{3,22} + y_{3,23} \\leq 100.0\\\\\n& -y_{4,22} + y_{4,23} \\leq 250.0\\\\\n& -y_{5,22} + y_{5,23} \\leq 300.0\\\\\n& -y_{1,23} + y_{1,24} \\leq 150.0\\\\\n& -y_{2,23} + y_{2,24} \\leq 200.0\\\\\n& -y_{3,23} + y_{3,24} \\leq 100.0\\\\\n& -y_{4,23} + y_{4,24} \\leq 250.0\\\\\n& -y_{5,23} + y_{5,24} \\leq 300.0\\\\\n& y_{1,1} - y_{1,2} \\leq 150.0\\\\\n& y_{2,1} - y_{2,2} \\leq 200.0\\\\\n& y_{3,1} - y_{3,2} \\leq 100.0\\\\\n& y_{4,1} - y_{4,2} \\leq 250.0\\\\\n& y_{5,1} - y_{5,2} \\leq 300.0\\\\\n& y_{1,2} - y_{1,3} \\leq 150.0\\\\\n& y_{2,2} - y_{2,3} \\leq 200.0\\\\\n& y_{3,2} - y_{3,3} \\leq 100.0\\\\\n& y_{4,2} - y_{4,3} \\leq 250.0\\\\\n& y_{5,2} - y_{5,3} \\leq 300.0\\\\\n& y_{1,3} - y_{1,4} \\leq 150.0\\\\\n& y_{2,3} - y_{2,4} \\leq 200.0\\\\\n& y_{3,3} - y_{3,4} \\leq 100.0\\\\\n& y_{4,3} - y_{4,4} \\leq 250.0\\\\\n& y_{5,3} - y_{5,4} \\leq 300.0\\\\\n& y_{1,4} - y_{1,5} \\leq 150.0\\\\\n& y_{2,4} - y_{2,5} \\leq 200.0\\\\\n& y_{3,4} - y_{3,5} \\leq 100.0\\\\\n& y_{4,4} - y_{4,5} \\leq 250.0\\\\\n& y_{5,4} - y_{5,5} \\leq 300.0\\\\\n& y_{1,5} - y_{1,6} \\leq 150.0\\\\\n& y_{2,5} - y_{2,6} \\leq 200.0\\\\\n& y_{3,5} - y_{3,6} \\leq 100.0\\\\\n& y_{4,5} - y_{4,6} \\leq 250.0\\\\\n& y_{5,5} - y_{5,6} \\leq 300.0\\\\\n& y_{1,6} - y_{1,7} \\leq 150.0\\\\\n& y_{2,6} - y_{2,7} \\leq 200.0\\\\\n& y_{3,6} - y_{3,7} \\leq 100.0\\\\\n& y_{4,6} - y_{4,7} \\leq 250.0\\\\\n& y_{5,6} - y_{5,7} \\leq 300.0\\\\\n& y_{1,7} - y_{1,8} \\leq 150.0\\\\\n& y_{2,7} - y_{2,8} \\leq 200.0\\\\\n& y_{3,7} - y_{3,8} \\leq 100.0\\\\\n& y_{4,7} - y_{4,8} \\leq 250.0\\\\\n& y_{5,7} - y_{5,8} \\leq 300.0\\\\\n& y_{1,8} - y_{1,9} \\leq 150.0\\\\\n& y_{2,8} - y_{2,9} \\leq 200.0\\\\\n& y_{3,8} - y_{3,9} \\leq 100.0\\\\\n& y_{4,8} - y_{4,9} \\leq 250.0\\\\\n& y_{5,8} - y_{5,9} \\leq 300.0\\\\\n& y_{1,9} - y_{1,10} \\leq 150.0\\\\\n& y_{2,9} - y_{2,10} \\leq 200.0\\\\\n& y_{3,9} - y_{3,10} \\leq 100.0\\\\\n& y_{4,9} - y_{4,10} \\leq 250.0\\\\\n& y_{5,9} - y_{5,10} \\leq 300.0\\\\\n& y_{1,10} - y_{1,11} \\leq 150.0\\\\\n& y_{2,10} - y_{2,11} \\leq 200.0\\\\\n& y_{3,10} - y_{3,11} \\leq 100.0\\\\\n& y_{4,10} - y_{4,11} \\leq 250.0\\\\\n& y_{5,10} - y_{5,11} \\leq 300.0\\\\\n& y_{1,11} - y_{1,12} \\leq 150.0\\\\\n& y_{2,11} - y_{2,12} \\leq 200.0\\\\\n& y_{3,11} - y_{3,12} \\leq 100.0\\\\\n& y_{4,11} - y_{4,12} \\leq 250.0\\\\\n& y_{5,11} - y_{5,12} \\leq 300.0\\\\\n& y_{1,12} - y_{1,13} \\leq 150.0\\\\\n& y_{2,12} - y_{2,13} \\leq 200.0\\\\\n& y_{3,12} - y_{3,13} \\leq 100.0\\\\\n& y_{4,12} - y_{4,13} \\leq 250.0\\\\\n& y_{5,12} - y_{5,13} \\leq 300.0\\\\\n& y_{1,13} - y_{1,14} \\leq 150.0\\\\\n& y_{2,13} - y_{2,14} \\leq 200.0\\\\\n& y_{3,13} - y_{3,14} \\leq 100.0\\\\\n& y_{4,13} - y_{4,14} \\leq 250.0\\\\\n& y_{5,13} - y_{5,14} \\leq 300.0\\\\\n& y_{1,14} - y_{1,15} \\leq 150.0\\\\\n& y_{2,14} - y_{2,15} \\leq 200.0\\\\\n& y_{3,14} - y_{3,15} \\leq 100.0\\\\\n& y_{4,14} - y_{4,15} \\leq 250.0\\\\\n& y_{5,14} - y_{5,15} \\leq 300.0\\\\\n& y_{1,15} - y_{1,16} \\leq 150.0\\\\\n& y_{2,15} - y_{2,16} \\leq 200.0\\\\\n& y_{3,15} - y_{3,16} \\leq 100.0\\\\\n& y_{4,15} - y_{4,16} \\leq 250.0\\\\\n& y_{5,15} - y_{5,16} \\leq 300.0\\\\\n& y_{1,16} - y_{1,17} \\leq 150.0\\\\\n& y_{2,16} - y_{2,17} \\leq 200.0\\\\\n& y_{3,16} - y_{3,17} \\leq 100.0\\\\\n& y_{4,16} - y_{4,17} \\leq 250.0\\\\\n& y_{5,16} - y_{5,17} \\leq 300.0\\\\\n& y_{1,17} - y_{1,18} \\leq 150.0\\\\\n& y_{2,17} - y_{2,18} \\leq 200.0\\\\\n& y_{3,17} - y_{3,18} \\leq 100.0\\\\\n& y_{4,17} - y_{4,18} \\leq 250.0\\\\\n& y_{5,17} - y_{5,18} \\leq 300.0\\\\\n& y_{1,18} - y_{1,19} \\leq 150.0\\\\\n& y_{2,18} - y_{2,19} \\leq 200.0\\\\\n& y_{3,18} - y_{3,19} \\leq 100.0\\\\\n& y_{4,18} - y_{4,19} \\leq 250.0\\\\\n& y_{5,18} - y_{5,19} \\leq 300.0\\\\\n& y_{1,19} - y_{1,20} \\leq 150.0\\\\\n& y_{2,19} - y_{2,20} \\leq 200.0\\\\\n& y_{3,19} - y_{3,20} \\leq 100.0\\\\\n& y_{4,19} - y_{4,20} \\leq 250.0\\\\\n& y_{5,19} - y_{5,20} \\leq 300.0\\\\\n& y_{1,20} - y_{1,21} \\leq 150.0\\\\\n& y_{2,20} - y_{2,21} \\leq 200.0\\\\\n& y_{3,20} - y_{3,21} \\leq 100.0\\\\\n& y_{4,20} - y_{4,21} \\leq 250.0\\\\\n& y_{5,20} - y_{5,21} \\leq 300.0\\\\\n& y_{1,21} - y_{1,22} \\leq 150.0\\\\\n& y_{2,21} - y_{2,22} \\leq 200.0\\\\\n& y_{3,21} - y_{3,22} \\leq 100.0\\\\\n& y_{4,21} - y_{4,22} \\leq 250.0\\\\\n& y_{5,21} - y_{5,22} \\leq 300.0\\\\\n& y_{1,22} - y_{1,23} \\leq 150.0\\\\\n& y_{2,22} - y_{2,23} \\leq 200.0\\\\\n& y_{3,22} - y_{3,23} \\leq 100.0\\\\\n& y_{4,22} - y_{4,23} \\leq 250.0\\\\\n& y_{5,22} - y_{5,23} \\leq 300.0\\\\\n& y_{1,23} - y_{1,24} \\leq 150.0\\\\\n& y_{2,23} - y_{2,24} \\leq 200.0\\\\\n& y_{3,23} - y_{3,24} \\leq 100.0\\\\\n& y_{4,23} - y_{4,24} \\leq 250.0\\\\\n& y_{5,23} - y_{5,24} \\leq 300.0\\\\\n& y_{1,1} \\geq 0.0\\\\\n& y_{2,1} \\geq 0.0\\\\\n& y_{3,1} \\geq 200.0\\\\\n& y_{4,1} \\geq 160.0\\\\\n& y_{5,1} \\geq 40.0\\\\\n& y_{1,2} \\geq 0.0\\\\\n& y_{2,2} \\geq 0.0\\\\\n& y_{3,2} \\geq 200.0\\\\\n& y_{4,2} \\geq 160.0\\\\\n& y_{5,2} \\geq 40.0\\\\\n& y_{1,3} \\geq 0.0\\\\\n& y_{2,3} \\geq 0.0\\\\\n& y_{3,3} \\geq 200.0\\\\\n& y_{4,3} \\geq 160.0\\\\\n& y_{5,3} \\geq 40.0\\\\\n& y_{1,4} \\geq 0.0\\\\\n& y_{2,4} \\geq 0.0\\\\\n& y_{3,4} \\geq 200.0\\\\\n& y_{4,4} \\geq 160.0\\\\\n& y_{5,4} \\geq 40.0\\\\\n& y_{1,5} \\geq 0.0\\\\\n& y_{2,5} \\geq 0.0\\\\\n& y_{3,5} \\geq 200.0\\\\\n& y_{4,5} \\geq 160.0\\\\\n& y_{5,5} \\geq 40.0\\\\\n& y_{1,6} \\geq 0.0\\\\\n& y_{2,6} \\geq 0.0\\\\\n& y_{3,6} \\geq 200.0\\\\\n& y_{4,6} \\geq 160.0\\\\\n& y_{5,6} \\geq 40.0\\\\\n& y_{1,7} \\geq 0.0\\\\\n& y_{2,7} \\geq 0.0\\\\\n& y_{3,7} \\geq 200.0\\\\\n& y_{4,7} \\geq 160.0\\\\\n& y_{5,7} \\geq 40.0\\\\\n& y_{1,8} \\geq 0.0\\\\\n& y_{2,8} \\geq 0.0\\\\\n& y_{3,8} \\geq 200.0\\\\\n& y_{4,8} \\geq 160.0\\\\\n& y_{5,8} \\geq 40.0\\\\\n& y_{1,9} \\geq 0.0\\\\\n& y_{2,9} \\geq 0.0\\\\\n& y_{3,9} \\geq 200.0\\\\\n& y_{4,9} \\geq 160.0\\\\\n& y_{5,9} \\geq 40.0\\\\\n& y_{1,10} \\geq 0.0\\\\\n& y_{2,10} \\geq 0.0\\\\\n& y_{3,10} \\geq 200.0\\\\\n& y_{4,10} \\geq 160.0\\\\\n& y_{5,10} \\geq 40.0\\\\\n& y_{1,11} \\geq 0.0\\\\\n& y_{2,11} \\geq 0.0\\\\\n& y_{3,11} \\geq 200.0\\\\\n& y_{4,11} \\geq 160.0\\\\\n& y_{5,11} \\geq 40.0\\\\\n& y_{1,12} \\geq 0.0\\\\\n& y_{2,12} \\geq 0.0\\\\\n& y_{3,12} \\geq 200.0\\\\\n& y_{4,12} \\geq 160.0\\\\\n& y_{5,12} \\geq 40.0\\\\\n& y_{1,13} \\geq 0.0\\\\\n& y_{2,13} \\geq 0.0\\\\\n& y_{3,13} \\geq 200.0\\\\\n& y_{4,13} \\geq 160.0\\\\\n& y_{5,13} \\geq 40.0\\\\\n& y_{1,14} \\geq 0.0\\\\\n& y_{2,14} \\geq 0.0\\\\\n& y_{3,14} \\geq 200.0\\\\\n& y_{4,14} \\geq 160.0\\\\\n& y_{5,14} \\geq 40.0\\\\\n& y_{1,15} \\geq 0.0\\\\\n& y_{2,15} \\geq 0.0\\\\\n& y_{3,15} \\geq 200.0\\\\\n& y_{4,15} \\geq 160.0\\\\\n& y_{5,15} \\geq 40.0\\\\\n& y_{1,16} \\geq 0.0\\\\\n& y_{2,16} \\geq 0.0\\\\\n& y_{3,16} \\geq 200.0\\\\\n& y_{4,16} \\geq 160.0\\\\\n& y_{5,16} \\geq 40.0\\\\\n& y_{1,17} \\geq 0.0\\\\\n& y_{2,17} \\geq 0.0\\\\\n& y_{3,17} \\geq 200.0\\\\\n& y_{4,17} \\geq 160.0\\\\\n& y_{5,17} \\geq 40.0\\\\\n& y_{1,18} \\geq 0.0\\\\\n& y_{2,18} \\geq 0.0\\\\\n& y_{3,18} \\geq 200.0\\\\\n& y_{4,18} \\geq 160.0\\\\\n& y_{5,18} \\geq 40.0\\\\\n& y_{1,19} \\geq 0.0\\\\\n& y_{2,19} \\geq 0.0\\\\\n& y_{3,19} \\geq 200.0\\\\\n& y_{4,19} \\geq 160.0\\\\\n& y_{5,19} \\geq 40.0\\\\\n& y_{1,20} \\geq 0.0\\\\\n& y_{2,20} \\geq 0.0\\\\\n& y_{3,20} \\geq 200.0\\\\\n& y_{4,20} \\geq 160.0\\\\\n& y_{5,20} \\geq 40.0\\\\\n& y_{1,21} \\geq 0.0\\\\\n& y_{2,21} \\geq 0.0\\\\\n& y_{3,21} \\geq 200.0\\\\\n& y_{4,21} \\geq 160.0\\\\\n& y_{5,21} \\geq 40.0\\\\\n& y_{1,22} \\geq 0.0\\\\\n& y_{2,22} \\geq 0.0\\\\\n& y_{3,22} \\geq 200.0\\\\\n& y_{4,22} \\geq 160.0\\\\\n& y_{5,22} \\geq 40.0\\\\\n& y_{1,23} \\geq 0.0\\\\\n& y_{2,23} \\geq 0.0\\\\\n& y_{3,23} \\geq 200.0\\\\\n& y_{4,23} \\geq 160.0\\\\\n& y_{5,23} \\geq 40.0\\\\\n& y_{1,24} \\geq 0.0\\\\\n& y_{2,24} \\geq 0.0\\\\\n& y_{3,24} \\geq 200.0\\\\\n& y_{4,24} \\geq 160.0\\\\\n& y_{5,24} \\geq 40.0\\\\\n& y_{1,1} \\leq 150.0\\\\\n& y_{2,1} \\leq 200.0\\\\\n& y_{3,1} \\leq 1000.0\\\\\n& y_{4,1} \\leq 700.0\\\\\n& y_{5,1} \\leq 500.0\\\\\n& y_{1,2} \\leq 150.0\\\\\n& y_{2,2} \\leq 200.0\\\\\n& y_{3,2} \\leq 1000.0\\\\\n& y_{4,2} \\leq 700.0\\\\\n& y_{5,2} \\leq 500.0\\\\\n& y_{1,3} \\leq 150.0\\\\\n& y_{2,3} \\leq 200.0\\\\\n& y_{3,3} \\leq 1000.0\\\\\n& y_{4,3} \\leq 700.0\\\\\n& y_{5,3} \\leq 500.0\\\\\n& y_{1,4} \\leq 150.0\\\\\n& y_{2,4} \\leq 200.0\\\\\n& y_{3,4} \\leq 1000.0\\\\\n& y_{4,4} \\leq 700.0\\\\\n& y_{5,4} \\leq 500.0\\\\\n& y_{1,5} \\leq 150.0\\\\\n& y_{2,5} \\leq 200.0\\\\\n& y_{3,5} \\leq 1000.0\\\\\n& y_{4,5} \\leq 700.0\\\\\n& y_{5,5} \\leq 500.0\\\\\n& y_{1,6} \\leq 150.0\\\\\n& y_{2,6} \\leq 200.0\\\\\n& y_{3,6} \\leq 1000.0\\\\\n& y_{4,6} \\leq 700.0\\\\\n& y_{5,6} \\leq 500.0\\\\\n& y_{1,7} \\leq 150.0\\\\\n& y_{2,7} \\leq 200.0\\\\\n& y_{3,7} \\leq 1000.0\\\\\n& y_{4,7} \\leq 700.0\\\\\n& y_{5,7} \\leq 500.0\\\\\n& y_{1,8} \\leq 150.0\\\\\n& y_{2,8} \\leq 200.0\\\\\n& y_{3,8} \\leq 1000.0\\\\\n& y_{4,8} \\leq 700.0\\\\\n& y_{5,8} \\leq 500.0\\\\\n& y_{1,9} \\leq 150.0\\\\\n& y_{2,9} \\leq 200.0\\\\\n& y_{3,9} \\leq 1000.0\\\\\n& y_{4,9} \\leq 700.0\\\\\n& y_{5,9} \\leq 500.0\\\\\n& y_{1,10} \\leq 150.0\\\\\n& y_{2,10} \\leq 200.0\\\\\n& y_{3,10} \\leq 1000.0\\\\\n& y_{4,10} \\leq 700.0\\\\\n& y_{5,10} \\leq 500.0\\\\\n& y_{1,11} \\leq 150.0\\\\\n& y_{2,11} \\leq 200.0\\\\\n& y_{3,11} \\leq 1000.0\\\\\n& y_{4,11} \\leq 700.0\\\\\n& y_{5,11} \\leq 500.0\\\\\n& y_{1,12} \\leq 150.0\\\\\n& y_{2,12} \\leq 200.0\\\\\n& y_{3,12} \\leq 1000.0\\\\\n& y_{4,12} \\leq 700.0\\\\\n& y_{5,12} \\leq 500.0\\\\\n& y_{1,13} \\leq 150.0\\\\\n& y_{2,13} \\leq 200.0\\\\\n& y_{3,13} \\leq 1000.0\\\\\n& y_{4,13} \\leq 700.0\\\\\n& y_{5,13} \\leq 500.0\\\\\n& y_{1,14} \\leq 150.0\\\\\n& y_{2,14} \\leq 200.0\\\\\n& y_{3,14} \\leq 1000.0\\\\\n& y_{4,14} \\leq 700.0\\\\\n& y_{5,14} \\leq 500.0\\\\\n& y_{1,15} \\leq 150.0\\\\\n& y_{2,15} \\leq 200.0\\\\\n& y_{3,15} \\leq 1000.0\\\\\n& y_{4,15} \\leq 700.0\\\\\n& y_{5,15} \\leq 500.0\\\\\n& y_{1,16} \\leq 150.0\\\\\n& y_{2,16} \\leq 200.0\\\\\n& y_{3,16} \\leq 1000.0\\\\\n& y_{4,16} \\leq 700.0\\\\\n& y_{5,16} \\leq 500.0\\\\\n& y_{1,17} \\leq 150.0\\\\\n& y_{2,17} \\leq 200.0\\\\\n& y_{3,17} \\leq 1000.0\\\\\n& y_{4,17} \\leq 700.0\\\\\n& y_{5,17} \\leq 500.0\\\\\n& y_{1,18} \\leq 150.0\\\\\n& y_{2,18} \\leq 200.0\\\\\n& y_{3,18} \\leq 1000.0\\\\\n& y_{4,18} \\leq 700.0\\\\\n& y_{5,18} \\leq 500.0\\\\\n& y_{1,19} \\leq 150.0\\\\\n& y_{2,19} \\leq 200.0\\\\\n& y_{3,19} \\leq 1000.0\\\\\n& y_{4,19} \\leq 700.0\\\\\n& y_{5,19} \\leq 500.0\\\\\n& y_{1,20} \\leq 150.0\\\\\n& y_{2,20} \\leq 200.0\\\\\n& y_{3,20} \\leq 1000.0\\\\\n& y_{4,20} \\leq 700.0\\\\\n& y_{5,20} \\leq 500.0\\\\\n& y_{1,21} \\leq 150.0\\\\\n& y_{2,21} \\leq 200.0\\\\\n& y_{3,21} \\leq 1000.0\\\\\n& y_{4,21} \\leq 700.0\\\\\n& y_{5,21} \\leq 500.0\\\\\n& y_{1,22} \\leq 150.0\\\\\n& y_{2,22} \\leq 200.0\\\\\n& y_{3,22} \\leq 1000.0\\\\\n& y_{4,22} \\leq 700.0\\\\\n& y_{5,22} \\leq 500.0\\\\\n& y_{1,23} \\leq 150.0\\\\\n& y_{2,23} \\leq 200.0\\\\\n& y_{3,23} \\leq 1000.0\\\\\n& y_{4,23} \\leq 700.0\\\\\n& y_{5,23} \\leq 500.0\\\\\n& y_{1,24} \\leq 150.0\\\\\n& y_{2,24} \\leq 200.0\\\\\n& y_{3,24} \\leq 1000.0\\\\\n& y_{4,24} \\leq 700.0\\\\\n& y_{5,24} \\leq 500.0\\\\\n\\end{aligned} \\]\n\n\n\n\nCode\n\nset_silent(dispatch2)\noptimize!(dispatch2)\n\ngen = value.(y).data\n\n\n5×24 Matrix{Float64}:\n  150.0   150.0  150.0  128.0  150.0  …   150.0   150.0   150.0   150.0\n  200.0   200.0  200.0  200.0  200.0      200.0   200.0   200.0   200.0\n 1000.0  1000.0  926.0  880.0  980.0     1000.0  1000.0  1000.0  1000.0\n  335.0   206.0  160.0  160.0  160.0      566.0   512.0   475.0   430.0\n   40.0    40.0   40.0   40.0   40.0       40.0    40.0    40.0    40.0\n\n\n\n\nCode\nareaplot(gen', \n    label=permutedims(gen_names), \n    xlabel = \"Hour\", \n    ylabel =\"Generated Electricity (MW)\", \n    color_palette=:tol_muted, \n    size=(1200, 600), \n    left_margin=6mm, \n    bottom_margin=6mm,\n    grid=:false,\n    legend = :outerright, ylim=(0, 2800),\n    legendfontsize=20, tickfontsize=20, \n    guidefontsize=20\n)\nplot!(demand, color=:red, \n    label=\"demand\", linestyle=:dash,\n    linewidth=5)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np = plot(gen', \n    label=permutedims(gen_names), \n    xlabel = \"Hour\", \n    ylabel =\"Generated Electricity (MW)\", \n    color_palette=:tol_muted, \n    linewidth=5,\n    size=(1200, 600), left_margin=6mm, \n    bottom_margin=6mm,\n    legendfontsize=20, tickfontsize=20, \n    guidefontsize=20,\n    legend=:outerright\n)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNotice that even though hydro is effectively zero-cost, we reduce dispatched hydropower in hour 4 because coal is at its minimum generating capacity and nuclear can’t be ramped down further. These constraints complicate the simple merit order that we previously saw.\nThese constraints also play a major role in systems with high levels of renewable penetration. For example, the so-called California “duck curve” is created by the challenges of ramping generation between the early afternoon, when solar generation is at its maximum, and in the evening, when solar generation is decreasing and demand increases rapidly.\n\n\n\nCalifornia Duck Curve"
  },
  {
    "objectID": "slides/notebooks/dissolved-oxygen.html",
    "href": "slides/notebooks/dissolved-oxygen.html",
    "title": "BEE 4750 - Fall 2024",
    "section": "",
    "text": "---\ntitle: \"Dissolved Oxygen\"\nauthor: \"Vivek Srikrishnan\"\ndate: \"5/13/2023\"\nformat:\n  html:\n    code-fold: true\n  ipynb: default\njupyter: julia-1.9\n---\n\nErrorException: syntax: invalid operator \"--\"\nsyntax: invalid operator \"--\"\n\n\n\nStacktrace:\n\n [1] top-level scope\n\n   @ ~/Teaching/environmental-systems-analysis/website/slides/notebooks/dissolved-oxygen.ipynb:1\n\n\n\nimport Pkg\nPkg.activate(\"..\")\nPkg.instantiate()\n\n  Activating project at `~/Teaching/environmental-systems-analysis/website/slides`\n\n\n\nusing Plots\nusing Measures\nusing LaTeXStrings\n\nA first-order model for dissolved oxygen (DO) is\n\\[\\begin{align}\nU \\frac{dC}{dx} &= k_a (C_s - C) + P - R - S_B - k_cB_0\\exp\\left(\\frac{-k_cx}{U}\\right) - k_n N_0\\exp\\left(\\frac{-k_nx}{U}\\right)\n\\end{align}\\]\nwhich has solution\n\\[C(x) = C_s(1 - \\alpha_1) + C_0 \\alpha_1 - B_0 \\alpha_2 - N_0 \\alpha_3 + \\left(\\frac{P-R-S_B}{k_a}\\right) (1-\\alpha_1),\\]\nbut we’ll ignore \\(P\\), \\(R\\), and \\(S_B\\) as these just modify \\(C_s\\).\n\n## function to simulate DO given parameters\n\nfunction do_simulate(x, C0, B0, N0, ka, kn, kc, Cs, U)\n    B = B0 .* exp.(-kc .* x ./ U)\n    N = N0 .* exp.(-kn .* x ./ U)\n    alpha1 = exp.(-ka .* x ./ U)\n    alpha2 = (kc/(ka-kc)) .* (exp.(-kc .* x / U) - exp.(-ka .* x / U))\n    alpha3 = (kn/(ka-kn)) .* (exp.(-kn .* x / U) - exp.(-ka .* x / U))\n    C = Cs .* (1 .- alpha1) + (C0 .* alpha1) - (B0 .* alpha2) - (N0 .* alpha3)\n    return (C, B, N)\nend  \n\ndo_simulate (generic function with 1 method)\n\n\n\n\nka = 0.8\nkc = 0.4\nkn = 0.25\n\nx = 0:40\n\nC, B, N = do_simulate(x, 12, 10, 6, ka, kc, kn, 10, 6)\n\n([12.0, 11.00645310548937, 10.175859173274619, 9.485735592776512, 8.916529246889715, 8.451243511008714, 8.075112259659466, 7.7753149851202945, 7.540727870097758, 7.3617063020117754  …  8.192305787065738, 8.267173709636479, 8.339934969497461, 8.410487111173717, 8.47875989610827, 8.544710197112913, 8.608317593145037, 8.669580573208266, 8.72851326979175, 8.785142652415068], [10.0, 9.591894571091382, 9.200444146293233, 8.824969025845954, 8.464817248906142, 8.11936346150635, 7.788007830714049, 7.470175003104326, 7.1653131057378925, 6.872892787909723  …  2.748123805594897, 2.6359713811572676, 2.5283959580474646, 2.425210746356487, 2.326236579172927, 2.231301601484298, 2.140240971774475, 2.052896575799093, 1.9691167520419406, 1.8887560283756186], [6.0, 5.613041910189707, 5.251039914257685, 4.912384518467891, 4.595570030187892, 4.299187863442736, 4.0219202762138355, 3.7625345116383366, 3.5198773170601907, 3.292869816564159  …  0.7596426167345016, 0.7106509740828222, 0.6648189501740032, 0.6219427716691671, 0.5818318071864303, 0.5443077197364751, 0.5092036738201045, 0.47636359366246933, 0.44564146928600323, 0.4169007073368093])\n\n\n\np1 = plot(x, C, grid=false, color=:black, ylabel=\"DO/OD (mg/l)\", xlabel=\"Distance (km)\", label=\"DO\", linewidth=3, left_margin=8mm, top_margin=10mm, guidefontsize=16, legendfontsize=16, tickfontsize=14, xticks=:false, yticks=:false, legend=:right)\nplot!(x, B, color=:green, label=\"CBOD\", linestyle=:dash, linewidth=3)\nplot!(x, N, color=:blue, label=\"NBOD\", linestyle=:dash, linewidth=3)\nplot!(x, 10 * ones(length(x)), color=:purple, label=L\"C_s\", linestyle=:dot, linewidth=3)\n\nannotate!(1.5, 12.75, text(\"Waste Discharge\", pointsize=16, color=:red))\nvline!([0], color=:red, linewidth=2, label=:false)\nplot!(size=(700, 500))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Sag curve for dissolved oxygen.\n\n\n\n\n\nC0 = 6.2\nB0 = 9\nN0 = 7\n\nka = 0.8\nkc = 0.5\nkn = 0.4\nCs = 7\nU = 5\n\n5\n\n\n\nfunction dissolved_oxygen(x, Cs, C0, B0, N0, ka, kc, kn, U)\n    α1 = exp(-ka * x / U)\n    α2 = (kc / (ka - kc)) * (exp(-kc * x / U) - α1)\n    α3 = (kn / (ka - kn)) * (exp(-kn * x / U) - α1)\n    C = (Cs * (1 - α1)) + (C0 * α1) - (B0 * α2) - (N0 * α3)\n    return C\nend\n\nx = 0:0.1:20\nC = (y -&gt; dissolved_oxygen(y, Cs, C0, B0, N0, ka, kc, kn, U)).(x)\n\n\n\nCode\nplot(x, C; linewidth=3, \n    label=\"Dissolved Oxygen\", \n    tickfontsize=16, \n    guidefontsize=16, \n    legendfontsize=16)\nxlabel!(L\"$x$ (km)\")\nylabel!(\"DO Concentration (mg/L)\")\nhline!([3], color=:red, \n    linestyle=:dash, \n    label=\"Regulatory Standard\")\nplot!(size=(500, 500))\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Single-Release Dissolved Oxygen Example\n\n\n\n\n\nQ1 = 100000\nQ2 = 20000\nQ3 = 25000\n\nx0 = 0\nx1 = 18\nx2 = 30\nx3 = 45\n\nC01 = 6\nB01 = 5\nN01 = 4.5\n\nC1, B1, N1 = do_simulate(x0:x1, C01, B01, N01, ka, kc, kn, 9, 6)\n\nC02 = (C1[length(C1)] * Q1 + 3 * Q2) / (Q1 + Q2)\nB02 = (B1[length(B1)] * Q1 + 50 * Q2) / (Q1 + Q2)\nN02 = (N1[length(N1)] * Q1 + 45 * Q2) / (Q1 + Q2)\n\nC2, B2, N2 = do_simulate(x0:(x2-x1), C02, B02, N02, ka, kc, kn, 9, 6)\n\nC03 = (C2[length(C2)] * (Q1 + Q2) + 4 * Q3) / (Q1 + Q2 + Q3)\nB03 = (B2[length(B2)] * (Q1 + Q2) + 40 * Q3) / (Q1 + Q2 + Q3)\nN03 = (N2[length(N2)] * (Q1 + Q2) + 30 * Q3) / (Q1 + Q2 + Q3)\n\nC3, B3, N3 = do_simulate(x0:(x3-x2), C03, B03, N03, ka, kc, kn, 9, 6)\n\nplot(x0:x1, C1, grid=false, color=:black, ylabel=\"DO (mg/L)\", xlabel=\"Distance (km)\", label=\"DO\", xticks=:false, yticks=:false, linewidth=3, left_margin=12mm, top_margin=10mm, bottom_margin=20mm, guidefontsize=16, tickfontsize=16, legendfontsize=16)\nplot!(x1:x2, C2, color=:black, label=false, linewidth=3)\nplot!(x2:x3, C3, color=:black, label=false, linewidth=3)\nplot!(size=(1200, 500))\n\nvline!([x0, x1, x2], color=:green, linewidth=3, label=\"Discharge\")\nhline!([3], color=:red, linewidth=3, label=\"Regulation\", linestyle=:dash)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Multi-Release Dissolved Oxygen Example"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#about-me",
    "href": "slides/lecture02-lab-setup.html#about-me",
    "title": "Welcome to BEE 4750/5750!",
    "section": "About Me",
    "text": "About Me\nProf. Vivek Srikrishnan, viveks at cornell dot edu, 318 Riley-Robb\n\nFrom Wappingers Falls, NY (via Champaign-Urbana, IL and State College, PA);\nNon-academic highlight: Was on Jeopardy! in 2016;\nResearches climate risk management;\nParticular interested in unintended consequences which result from neglecting uncertainty or system dynamics."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#meet-my-supervisors",
    "href": "slides/lecture02-lab-setup.html#meet-my-supervisors",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Meet My Supervisors",
    "text": "Meet My Supervisors\n\n\n\n\nMy Supervisors"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#about-the-ta",
    "href": "slides/lecture02-lab-setup.html#about-the-ta",
    "title": "Welcome to BEE 4750/5750!",
    "section": "About the TA",
    "text": "About the TA\nGabriela Ackermann Logan, M.S./Ph.D. student, ga345 at cornell dot edu, 319 Riley-Robb\n\nFrom (via Medford, MA)\nInterested in energy system transitions and supply chain/logistical needs."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#what-is-a-system",
    "href": "slides/lecture02-lab-setup.html#what-is-a-system",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Is A System?",
    "text": "What Is A System?\nA system is:\n\n\n“an interconnected set of elements that is coherently organized in a way that achieves something…\nA system must consist of three kinds of things: elements, interconnections and a function or purpose.”\n\n\n— Donella Meadows, Thinking in Systems: A Primer, 2008"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#examples-of-systems",
    "href": "slides/lecture02-lab-setup.html#examples-of-systems",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Examples of Systems",
    "text": "Examples of Systems\nCan we think of any examples of systems?\n\nWhat about things that are not systems?"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#why-are-systems-interesting",
    "href": "slides/lecture02-lab-setup.html#why-are-systems-interesting",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Why Are Systems Interesting?",
    "text": "Why Are Systems Interesting?\nIn other words, a system involves an interconnected set of components.\nThose interconnections can lead to very different dynamics and outcomes than if the component processes were studied in isolation."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#example-topics",
    "href": "slides/lecture02-lab-setup.html#example-topics",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Example Topics",
    "text": "Example Topics\n\n\nTopics\n\n\nDefine systems\nSimulate system dynamics\nAnalyze and assess risk\nMake decisions with optimization\nExplore trade-offs across objectives\n\n\n\n\n\nExample Systems\n\n\nAir pollution\nWastewater management\nElectric power systems\nSolid waste management"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#what-do-you-hope-to-get-out-of-this-course",
    "href": "slides/lecture02-lab-setup.html#what-do-you-hope-to-get-out-of-this-course",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Do You Hope To Get Out Of This Course?",
    "text": "What Do You Hope To Get Out Of This Course?\n\n\n\n\n\n\n\n\nText: VSRIKRISH to 22333\nURL: https://pollev.com/vsrikrish  See Results"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#course-organization",
    "href": "slides/lecture02-lab-setup.html#course-organization",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Course Organization",
    "text": "Course Organization\n\nIntroduction to Systems Analysis\nSimulating Systems and Risk\nSystems Management and Optimization\nDecision-Making Under Uncertainty"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#disclaimer",
    "href": "slides/lecture02-lab-setup.html#disclaimer",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Disclaimer",
    "text": "Disclaimer\nSitting in class/looking at these notes is not a substitute for reading the syllabus."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#attendance",
    "href": "slides/lecture02-lab-setup.html#attendance",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Attendance",
    "text": "Attendance\nNot required, but students tend to do better when they’re actively engaged in class"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#office-hours",
    "href": "slides/lecture02-lab-setup.html#office-hours",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Office Hours",
    "text": "Office Hours\n\nTime TBD (will send out poll)\nAlmost impossible to find a time that works for all (or even most); please feel free to email to make appointments as/if needed.\nCan be busy, will triage based on urgency (e.g. if you want code help but have not done basic debugging steps, you will be asked to wait until others are helped)."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#accomodations",
    "href": "slides/lecture02-lab-setup.html#accomodations",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Accomodations",
    "text": "Accomodations\nIf you have any access barriers in this class, please seek out any helpful accomodations.\n\nGet an SDS letter.\nIf you need an accomodation before you have an official letter, please reach out to me ASAP!"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#course-website",
    "href": "slides/lecture02-lab-setup.html#course-website",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Course Website",
    "text": "Course Website\nhttps://viveks.me/environmental-systems-analysis\n\nCentral hub for information, schedule, and policies\nWill add link and some information to Canvas (assignment due dates, etc)"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#communications",
    "href": "slides/lecture02-lab-setup.html#communications",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Communications",
    "text": "Communications\nUse Ed Discussion for questions and discussions about class, homework assignments, etc.\n\nTry to use public posts so others can benefit from questions and can weigh in.\nI will make announcements through Ed, so check regularly.\nUrgent announcements will also be emailed.\n\nWhen urgency or privacy is required, email is ok."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#julia",
    "href": "slides/lecture02-lab-setup.html#julia",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Julia",
    "text": "Julia\nIn this course, we will use the Julia programming language.\nAll assignments, labs, and AEs will be provided as Jupyter Notebooks."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#what-is-your-programming-experience",
    "href": "slides/lecture02-lab-setup.html#what-is-your-programming-experience",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Is Your Programming Experience?",
    "text": "What Is Your Programming Experience?\n\n\n\n\n\n\n\n\nText: VSRIKRISH to 22333\nURL: https://pollev.com/vsrikrish  See Results"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#jupyter-notebooks",
    "href": "slides/lecture02-lab-setup.html#jupyter-notebooks",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\nWe will use Jupyter Notebooks for most computing tasks (including assignments).\n\nAllow for interactive evaluation of code and integration with text (including nicely typeset mathematics)\nCan export to PDF (or HTML -&gt; PDF) for submission to Gradescope.\nBe careful before submitting: Evaluate all cells in order"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#github-classroom",
    "href": "slides/lecture02-lab-setup.html#github-classroom",
    "title": "Welcome to BEE 4750/5750!",
    "section": "GitHub Classroom",
    "text": "GitHub Classroom\nHomework assignments and labs will be distributed using GitHub Classroom.\n\nEvery student will have a unique “repository.”\nWhen assignment is released, I will share the link for repository creation on Ed Discussion.\nMakes it easy to share code for assistance and debugging (share links to repositories, not out-of-context code and screenshots)."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#debugging-code",
    "href": "slides/lecture02-lab-setup.html#debugging-code",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Debugging Code",
    "text": "Debugging Code\n\nLook at the class FAQ!\nSearch for the error message you’re seeing.\nTry to divide code into logical “chunks” and test each one to isolate the error where there’s a syntax or conceptual error.\nPost on Ed. Do not include a screenshot, link to GitHub or provide a small snippet showing the syntax you’re trying.\nCome to office hours (last recourse!)."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#assessments",
    "href": "slides/lecture02-lab-setup.html#assessments",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Assessments",
    "text": "Assessments\n\n\n\nCategory\nWeight\n\n\n\n\nParticipation\n10% (5% for 5750)\n\n\nReadings (5750 only)\n5%\n\n\nExercises\n10%\n\n\nLabs\n10%\n\n\nHomework\n20%\n\n\nPrelims\n30%\n\n\nTerm Project\n20%"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#overall-guidelines",
    "href": "slides/lecture02-lab-setup.html#overall-guidelines",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Overall Guidelines",
    "text": "Overall Guidelines\n\nCollaboration highly encouraged, but all work must reflect your own understanding\nSubmit PDFs on Gradescope\n24 hour late submissions, 10% penalty\n“Standard” rubric available for HW/exams\nAlways cite external references\nCurve unlikely (not worth asking about…)"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#late-work-policy",
    "href": "slides/lecture02-lab-setup.html#late-work-policy",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nMost work can be submitted up to 24 hours late at a 50% penalty.\nIf you have an approved reason (illness, injury, etc), let me know ahead of time and we will make accomodations."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#regrade-requests",
    "href": "slides/lecture02-lab-setup.html#regrade-requests",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Regrade Requests",
    "text": "Regrade Requests\n\nCan be submitted on Gradescope up to 1 week after grades are released.\nMust include a brief justification.\nWill be evaluated only on the basis of the work in the submission.\nCan lose points if me/TA notice we missed a mistake initially!"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#regrade-requests-special-cases",
    "href": "slides/lecture02-lab-setup.html#regrade-requests-special-cases",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Regrade Requests: Special Cases",
    "text": "Regrade Requests: Special Cases\n\nIf you (correctly) point out that your grade was graded too leniently, you will get bonus points back.\nIf a significant error (as defined by me) is found in the solutions, everyone in the class will receive full credit for that (sub)problem."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#labs",
    "href": "slides/lecture02-lab-setup.html#labs",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Labs",
    "text": "Labs\n\nIn-class guided activities, but may need some time after class to complete\nFocus on “how” to apply methods and concepts from class\nIf you can’t bring a laptop to these classes, you can work with someone else\nCan work in groups, but must submit your own work.\nDue by 9:00pm on the lab day, will drop one.\nGraded on a scale of 0-3, largely based on effort."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#exercises",
    "href": "slides/lecture02-lab-setup.html#exercises",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Exercises",
    "text": "Exercises\n\nAuto-graded “quizzes” on Canvas, auto-graded\nFocus on conceptual questions or quick setups/calculations (no coding)\nCan submit as many times as you like.\nDue by 9:00pm by the end of the week (Friday).\nWill drop one."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#homework-assignments",
    "href": "slides/lecture02-lab-setup.html#homework-assignments",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Homework Assignments",
    "text": "Homework Assignments\n\n5 in total, due two weeks after assignment.\nFocus on new or extended applications\nManaged with GitHub Classroom\nDue by 9:00pm on the due date (usually Friday)\nNo drops.\nGraded on correctness."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#term-project",
    "href": "slides/lecture02-lab-setup.html#term-project",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Term Project",
    "text": "Term Project\n\nAnalyze a system of interest, including the regulatory environment, going beyond class examples/methods.\nWork in groups of 3–4.\nSubmit proposal on 11/1/24.\nRecord presentation by end of semester for peer review by classmates.\nSubmit report, peer reviews, group/self evaluations by end of finals week."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#participation",
    "href": "slides/lecture02-lab-setup.html#participation",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Participation",
    "text": "Participation\n\nThe class works best when everyone is engaged and collaborative\n\nAttending every class;\nAsking questions in class or on Ed;\nAnswering questions in class or on Ed;\nComing to office hours.\n\nWe’re paying attention! Participation points not “free”."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#prelims",
    "href": "slides/lecture02-lab-setup.html#prelims",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Prelims",
    "text": "Prelims\n\nTwo in-class prelims (10/09, 11/11);\nWill resemble exercises/labs more than homework.\nFocus on concepts, problem formulations, interpretation.\nNot trying to make these long or particularly difficult!\nExams will be scanned and put on Gradescope for grades/feedback.\nWill discuss two weeks after the exams after grades are returned."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#readings",
    "href": "slides/lecture02-lab-setup.html#readings",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Readings",
    "text": "Readings\n\nStudents in 5750 will be assigned one-two readings per module.\nOption to peer annotate on Canvas.\nWill need to submit a written summary/synthesis.\nStudents in 4750 should feel free to do the reading to go more deeply, but optional."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#hopefully-not-a-concern",
    "href": "slides/lecture02-lab-setup.html#hopefully-not-a-concern",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Hopefully Not a Concern…",
    "text": "Hopefully Not a Concern…\n\nCollaboration is great and is encouraged!\nKnowing how to find, evaluate, and use helpful resources is a skill we want to develop.\nDon’t just copy…learn from others and give credit.\nSubmit your own original work."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-1",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nObviously, just copying down answers from Chegg or ChatGPT and passing them off as your own is not ok.\nBut often lines aren’t that simple. Let’s quickly consider some scenarios (h/t to Tony Wong for these)."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-scenario-1",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-scenario-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 1",
    "text": "Academic Integrity: Scenario 1\nDan searches the internet for relevant code and copy-pastes it into his Jupyter notebook. They cites the source of the codes.\n\n\n\n\n\n\nIs this ok?\n\n\n\nProbably Not\n\nWhat portion of the work is Dan’s?\nHow important were the codes?\nDid Dan understand what they copied?"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-scenario-1-1",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-scenario-1-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 1",
    "text": "Academic Integrity: Scenario 1\nDan searches the internet for relevant code and copy-pastes it into his Jupyter notebook. They cites the source of the codes.\n\n\n\n\n\n\nWhat Should Dan Do?\n\n\n\nDan should paraphrase the codes they found to incorporate them with his own code, and then also cite them."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-scenario-2",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-scenario-2",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 2",
    "text": "Academic Integrity: Scenario 2\nMatthew and Rhonda work together to figure out how to implement the codes, but each works on their own computer and develops their own solutions.\n\n\n\n\n\n\nIs this ok?\n\n\n\nDefinitely!\n\nIndependent implementations shows understanding."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-scenario-3",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-scenario-3",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 3",
    "text": "Academic Integrity: Scenario 3\nFelix and Rachel are working together on a problem involving a derivation. Rachel types it up in LaTeX and sends the code to Felix, who pastes it into his Jupyter notebook.\n\n\n\n\n\n\nIs this ok?\n\n\n\nLikely Not\n\nDid Felix contribute enough to the derivation?\nDefinitely not OK if Felix doesn’t give Rachel credit for their contribution."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#academic-integrity-scenario-4",
    "href": "slides/lecture02-lab-setup.html#academic-integrity-scenario-4",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 4",
    "text": "Academic Integrity: Scenario 4\nDarren uses ChatGPT to debug an error in their homework code. They fix the error and credits ChatGPT in his References section.\n\n\n\n\n\n\nIs this ok?\n\n\n\nWell-meaning, but no!\n\nUsing ChatGPT (or other ML tools) can be ok, but…\nNeed to ask permission and thoroughly document the query and the exact response."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#chatgpt-the-stochastic-parrot",
    "href": "slides/lecture02-lab-setup.html#chatgpt-the-stochastic-parrot",
    "title": "Welcome to BEE 4750/5750!",
    "section": "ChatGPT: The Stochastic Parrot",
    "text": "ChatGPT: The Stochastic Parrot\nWhy is ChatGPT (and other ML/AI tools) singled out?\n\n\nLack of Transparency: Not clear what the training data is, so documentation is essential (ML is not great at extrapolation).\nNot Well-Suited to All Tasks: Can be useful for getting a skeleton, starter code, or debugging. Really (and obviously) bad at interpretation and analysis.\nHallucinations: ChatGPT often just makes stuff up. Do you want to be credited for a ChatGPT hallucination?"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#chatgpt-the-stochastic-parrot-1",
    "href": "slides/lecture02-lab-setup.html#chatgpt-the-stochastic-parrot-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "ChatGPT: The Stochastic Parrot",
    "text": "ChatGPT: The Stochastic Parrot\n\nThink of ChatGPT as a ranting drunk\nIt’s stringing together words or code it heard in a way that sounds reasonable, but there’s no sense of concept.\nChatGPT debugging can be useful, but can also lead to new errors with no clear way to fix them, since you don’t understand what you did."
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#next-classes",
    "href": "slides/lecture02-lab-setup.html#next-classes",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Next Classes",
    "text": "Next Classes\nWednesday: Lab 1: Setting up Julia and GitHub\n\nLab 1 link is available on Ed. Click it to accept the lab before class.\nCome to class with downloaded lab and try to follow the setup instructions on the website.\n\nNext Week: Introduction to Systems Analysis"
  },
  {
    "objectID": "slides/lecture02-lab-setup.html#assessments-1",
    "href": "slides/lecture02-lab-setup.html#assessments-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Assessments",
    "text": "Assessments\n\nLab 1: Wednesday\nHW 1: Available, due 9/6."
  },
  {
    "objectID": "policies/exam.html",
    "href": "policies/exam.html",
    "title": "Exam Policies",
    "section": "",
    "text": "This page includes some information on the exams for BEE 4750/5750, including policies and logistics.",
    "crumbs": [
      "Policies",
      "Exam Policies"
    ]
  },
  {
    "objectID": "policies/exam.html#exam-logistics",
    "href": "policies/exam.html#exam-logistics",
    "title": "Exam Policies",
    "section": "Exam Logistics",
    "text": "Exam Logistics\nThis class has two prelims, both in class:\n\nPrelim 1: Wednesday, October 09;\nPrelim 2: Monday, November 11.\n\nEach is worth 10% of your grade. Exams will be hand-written and then will be scanned into Gradescope (by course staff) for grading and feedback; the physical copy of your exam will not be returned.\n\nExam Topics and Structure\nThe emphasis is on concepts; there will be no major formulas that you will need to use, and no programming. You will be potentially be asked to derive mathematical versions of models, apply concepts from class, and interpret model outputs. The problems are largely short- or medium-answer.\nIn general, the same homework grading rubric applies to exam problems, as appropriate (.e.g. nothing about code). The deadly sins will still be penalized, and your solutions should be clear with transparent and well-communicated reasoning.\n\n\nAcademic Integrity\nThe exams are closed-book and closed-note, and closed everything else. No medically unnecessary electronic devices are allowed to be used during the exam, including headphones and smart watches.\nExams are also strictly confidential until the conflict and accomodation exams have been taken. Do not discuss your exam with anyone in person or online. Once all exams are taken, we will discuss the exams in class.\n\n\nDifficulty\nWhile we will not hand out sample exams, exam problems will be closer in difficulty to lab or exercise problems than the homework, since you have two full weeks to solve the problem and have full acccess to external resources, course staff, and classmates. The goal is to assess your ability to set up problems, determine appropriateness of methods, and interpret the output, rather than on doing computations. We cannot, and do not, expect you to solve problems with homework-level difficulty in the restricted exam setting.",
    "crumbs": [
      "Policies",
      "Exam Policies"
    ]
  },
  {
    "objectID": "policies/exam.html#accomodations-conflicts-and-makeup-exams",
    "href": "policies/exam.html#accomodations-conflicts-and-makeup-exams",
    "title": "Exam Policies",
    "section": "Accomodations, Conflicts, and Makeup Exams",
    "text": "Accomodations, Conflicts, and Makeup Exams\n\nSDS Accomodations\nPlease make sure that any exam-related accomodations have been provided to the course staff ahead of the first exam. All exams requiring accomodations will be scheduled and delivered through the Alternative Testing Program.\n\n\nConflict and Makeup Exams\nIf you have an academic conflict or a university-approved reason why you cannot take the exam in class, you should schedule your conflict exam through the Alternative Testing Program.\nIn extreme circumstances, such as long-term illnesses or injuries, that prevent taking both the regular and the conflict exam, we may forgive the prelim and compute your grade without it. This will dramatically increase the weight given to other assessments.",
    "crumbs": [
      "Policies",
      "Exam Policies"
    ]
  },
  {
    "objectID": "policies/grading.html",
    "href": "policies/grading.html",
    "title": "Grading Policies",
    "section": "",
    "text": "Application exercises are auto-graded on Gradescope. These can be submitted as often as you’d like prior to the deadline.\nHomework assignments are graded by the TA on Gradescope based on the rubrics. Homework will be graded as soon as possible, ideally within a couple of weeks.\nExams are graded by Prof. Srikrishnan and the TA using similar rubrics to the homework, though exams will focus less on solving problems. These will be scanned and graded on Gradescope.\nProjects are graded by Prof. Srikrishnan. The proposals will be graded primarily for completeness and for feedback and will be returned ASAP. Presentations will be graded by a combination of peer reviewers and Prof. Srikrishnan.",
    "crumbs": [
      "Policies",
      "Grading Policies"
    ]
  },
  {
    "objectID": "policies/grading.html#how-work-is-graded",
    "href": "policies/grading.html#how-work-is-graded",
    "title": "Grading Policies",
    "section": "",
    "text": "Application exercises are auto-graded on Gradescope. These can be submitted as often as you’d like prior to the deadline.\nHomework assignments are graded by the TA on Gradescope based on the rubrics. Homework will be graded as soon as possible, ideally within a couple of weeks.\nExams are graded by Prof. Srikrishnan and the TA using similar rubrics to the homework, though exams will focus less on solving problems. These will be scanned and graded on Gradescope.\nProjects are graded by Prof. Srikrishnan. The proposals will be graded primarily for completeness and for feedback and will be returned ASAP. Presentations will be graded by a combination of peer reviewers and Prof. Srikrishnan.",
    "crumbs": [
      "Policies",
      "Grading Policies"
    ]
  },
  {
    "objectID": "policies/grading.html#late-policies-and-extension-requests",
    "href": "policies/grading.html#late-policies-and-extension-requests",
    "title": "Grading Policies",
    "section": "Late Policies and Extension requests",
    "text": "Late Policies and Extension requests\n\nAssignments (exercises and homeworks) can be submitted up to 24 hours late for 50% credit. Submissions after 24 hours will not be accepted unless an extension was granted (in which case there is no late penalty until the extension date). This lets us release solutions and return grades ASAP.\nRequest extensions ahead of the deadline. Justified extensions will only be granted for university-approved reasons or emergencies such as illness, injury, learning accomodations, etc and will be limited to 1-2 days, depending on the circumstance. Deadlines in other courses, job interviews, etc. are not reasons for extensions. Ask yourself if the circumstances leading to your extension request only interfered with submission due to poor planning or because they rendered you incapable of work and/or submission. Extensions requested after the deadline will only be considered prior to solution release and for extreme circumstances (e.g. hospitalization during the last day; hence limited communication access).\nUnder extreme circumstances, we will forgive assignments. There are circumstances under which a 24 hour extension is insufficient, such as long-term illness or serious injury. In these cases, we will compute your course grade as if the forgiven assignment never occurred, which will result in your exams and other assignments having more weight.",
    "crumbs": [
      "Policies",
      "Grading Policies"
    ]
  },
  {
    "objectID": "policies/grading.html#regrade-requests",
    "href": "policies/grading.html#regrade-requests",
    "title": "Grading Policies",
    "section": "Regrade Requests",
    "text": "Regrade Requests\n\nSubmit regrade requests on Gradescope within one week of the grade release. We recommend talking to Prof. Srikrishnan or your TA about grading concerns before submitting a regrade request, but no grades will be changed outside of a formal request through Gradescope.\nAll regrade requests must include a brief justification for the request or they will not be considered. Good justifications include (but are not limited to):\n\nMy answer agrees with the posted solution, but I still lost points.\nI lost 4 points for something, but the rubric says it should only be worth 2 points.\nYou took points off for something, but it’s right here.\nMy answer is correct, even though it does not match the posted solution.\nThere is no explanation for my grade.\nI got a perfect score, but my solution has a mistake (you will receive extra credit for this! see below!)\nThere is a major error in the posted solution; here is an explanation (full credit for everyone, but Prof. Srikrishnan will decide what constitutes a “major error”! see below!).\n\nWe will only regrade what you submitted. Any “new” information in the regrade request will not be considered beyond the justification (any explanation may help us identify where to look if your solution is different than the official solution but correct, but the submitted answer must be interpretable as a correct solution on its own merits.\nThe first regrade request will be handled by the member of the course staff who graded the problem. If Prof. Srikrishnan did not review the first request, he will handle any subsequent regrade requests for the same submission. Once Prof. Srikrishnan issues a response to a regrade request, further requests for that submission will be ignored.\nIf you submit a regrade request correctly reporting that your problem was graded too leniently, your score will be increased by the difference (we want to reward this type of honesty and self-awareness!). For example, if your score was 8/10, and you point out that you should have gotten a 3/10, your score will be a 13/10.\nIf a significant error is found in the official solutions, everyone in the class will receive full credit for the relevant (sub)problem. Prof. Srikrishnan has discretion as to what errors are “significant.”",
    "crumbs": [
      "Policies",
      "Grading Policies"
    ]
  },
  {
    "objectID": "website.html",
    "href": "website.html",
    "title": "website",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "website.html#quarto",
    "href": "website.html#quarto",
    "title": "website",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "Labs",
    "section": "",
    "text": "This page contains information about and a schedule of the lab assignments for the semester.",
    "crumbs": [
      "Labs"
    ]
  },
  {
    "objectID": "labs.html#general-information",
    "href": "labs.html#general-information",
    "title": "Labs",
    "section": "General Information",
    "text": "General Information\n\nYou can download each lab notebook through the link below..\nSubmit assignments by 9:00pm Eastern Time on the due date on Gradescope.\nSubmissions must be PDFs. Make sure that you tag the pages corresponding to each question; points will be deducted otherwise.\nTo convert the assignment notebook to PDF, you can use VS Code to render the notebook to HTML, and then use your browser to print to PDF. If you have set up LaTeX with VS Code, you can convert directly to a PDF.",
    "crumbs": [
      "Labs"
    ]
  },
  {
    "objectID": "labs.html#grading",
    "href": "labs.html#grading",
    "title": "Labs",
    "section": "Grading",
    "text": "Grading\nLabs will be graded on a scale of 0-3:\n\nMissing (0/3): Lab solution is missing or is not responsive to the lab prompt(s);\nNeeds Improvement (1/3): Lab is largely incomplete or is missing key concepts;\nDeveloping (2/3): Lab is mostly complete but may contain major conceptual or implementation errors;\nAcceptable (3/3): Lab is mostly or fully complete without any major errors.",
    "crumbs": [
      "Labs"
    ]
  },
  {
    "objectID": "labs.html#schedule",
    "href": "labs.html#schedule",
    "title": "Labs",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\n\nLab\nInstructions\nSolutions\nDue Date\n\n\n\n\nLab 1\n\n\nAug 28, 2024\n\n\nLab 2\n\n\nSep 25, 2024\n\n\nLab 3\n\n\nOct 16, 2023\n\n\nLab 4\n\n\nNov 06, 2023\n\n\nLab 5\n\n\nNov 20, 2023",
    "crumbs": [
      "Labs"
    ]
  },
  {
    "objectID": "resources/optimization.html",
    "href": "resources/optimization.html",
    "title": "Optimization Resources",
    "section": "",
    "text": "Decision Modeling e-Book: this uses Excel Solver, but may have useful information on problem setup and optimization methods.\nAlgorithms for Decision-Making: open-access book based on Julia with more depth on optimization and decision-making algorithms than we will cover in this class.",
    "crumbs": [
      "Resources",
      "Optimization and Decision-Making"
    ]
  },
  {
    "objectID": "resources/github.html",
    "href": "resources/github.html",
    "title": "GitHub Resources",
    "section": "",
    "text": "Git Basics from The Odin Project.\nLearn Git Branching: An interactive, visual tutorial to how git works.\nVersion Control from MIT’s “CS: Your Missing Semester” course.\nGit and GitHub for Poets: YouTube playlist covering the basics of git and GitHub.",
    "crumbs": [
      "Resources",
      "GitHub"
    ]
  },
  {
    "objectID": "hw/hw01/hw01.html",
    "href": "hw/hw01/hw01.html",
    "title": "BEE 4750 Homework 1: Introduction to Using Julia",
    "section": "",
    "text": "Due Date\n\n\n\nFriday, 9/8/23, 9:00pm",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw01/hw01.html#overview",
    "href": "hw/hw01/hw01.html#overview",
    "title": "BEE 4750 Homework 1: Introduction to Using Julia",
    "section": "Overview",
    "text": "Overview\n\nInstructions\n\nProblems 1-3 consist of a series of code snippets for you to interpret and debug. For Problems 1 and 2, you will be asked to identify relevant error(s) and fix the code. For Problem 3, the code works as intended; your goal is to identify the code’s purpose by following its logic.\nProblem 4 asks you to convert a verbal description of a wastewater treatment system into a Julia function, and then to use that function to explore the impact of different wastewater allocation strategies.\n\n\n\nLoad Environment\nThe following code loads the environment and makes sure all needed packages are installed. This should be at the start of most Julia scripts.\n\nimport Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n\n\nusing Plots\nusing GraphRecipes\nusing LaTeXStrings",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw01/hw01.html#problems-total-40-points",
    "href": "hw/hw01/hw01.html#problems-total-40-points",
    "title": "BEE 4750 Homework 1: Introduction to Using Julia",
    "section": "Problems (Total: 40 Points)",
    "text": "Problems (Total: 40 Points)\n\nProblem 1 (8 points)\nYou’ve been tasked with writing code to identify the minimum value in an array. You cannot use a predefined function. Your colleague suggested the function below, but it does not return the minimum value.\n\nfunction minimum(array)\n    min_value = 0\n    for i in 1:length(array)\n        if array[i] &lt; min_value\n            min_value = array[i]\n        end\n    end\n    return min_value\nend\n\narray_values = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\n@show minimum(array_values);\n\nminimum(array_values) = 0\n\n\n\nProblem 1.1 (3 points)\nDescribe the logic error.\n\n\nProblem 1.2 (3 points)\nWrite a fixed version of the function.\n\n\nProblem 1.3 (2 points)\nUse your fixed function to find the minimum value of array_values.\n\n\n\nProblem 2 (8 points)\nYour team is trying to compute the average grade for your class, but the following code produces an error.\n\n\nstudent_grades = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\nfunction class_average(grades)\n  average_grade = mean(student_grades)\n  return average_grade\nend\n\n@show average_grade;\n\nLoadError: UndefVarError: `average_grade` not defined\nUndefVarError: `average_grade` not defined\n\nStacktrace:\n [1] top-level scope\n   @ show.jl:1128\n\n\n\nProblem 2.1 (3 points)\nDescribe the logic and/or syntax error.\n\n\nProblem 2.2 (3 points)\nWrite a fixed version of the code.\n\n\nProblem 2.3 (2 points)\nUse your fixed code to compute the average grade for the class.\n\n\nProblem 3 (8 points)\nYou’ve been handed some code to analyze. The original coder was not very considerate of other potential users: the function is called mystery_function and there are no comments explaining the purpose of the code. It appears to take in an array and return some numbers, and you’ve been assured that the code works as intended.\n\n\nfunction mystery_function(values)\n    y = []\n    for v in values\n        if !(v in y)\n            append!(y, v)\n        end\n    end\n    return y\nend\n\nlist_of_values = [1, 2, 3, 4, 3, 4, 2, 1]\n@show mystery_function(list_of_values);\n\nmystery_function(list_of_values) = Any[1, 2, 3, 4]\n\n\n\nProblem 3.1 (4 points)\nExplain the purpose of mystery_function.\n\n\nProblem 3.2 (4 points)\nAdd comments to the code, explaining why and how it works. Refer to “Best Practices for Writing Code Comments”, and remember that bad comments can be just as bad as no comments at all. You do not need to add comments to every line (in fact, this is very bad practice), but you should note the purpose of every “section” of code, and add comments explaining any code sequences that you don’t immediately understand.\n\n\nProblem 4 (16 points)\nCheap Plastic Products, Inc. is operating a plant that produces \\(100 \\text{m}^3\\text{/day}\\) of wastewater that is discharged into Pristine Brook. The wastewater contains \\(1 \\text{kg/m}^3\\) of YUK, a toxic substance. The US Environmental Protection Agency has imposed an effluent standard on the plant prohibiting discharge of more than \\(20 \\text{kg/day}\\) of YUK into Pristine Brook.\nCheap Plastic Products has analyzed two methods for reducing its discharges of YUK. Method 1 is land disposal, which costs \\(X_1^2/20\\) dollars per day, where \\(X_1\\) is the amount of wastewater disposed of on the land (\\(\\text{m}^3\\text{/day}\\)). With this method, 20% of the YUK applied to the land will eventually drain into the stream (i.e., 80% of the YUK is removed by the soil).\nMethod 2 is a chemical treatment procedure which costs $1.50 per \\(\\text{m}^3\\) of wastewater treated. The chemical treatment has an efficiency of \\(e= 1 - 0.005X_2\\), where \\(X_2\\) is the quantity of wastewater (\\(\\text{m}^3\\text{/day}\\)) treated. For example, if \\(X_2 = 50 \\text{m}^3\\text{/day}\\), then \\(e = 1 - 0.005(50) = 0.75\\), so that 75% of the YUK is removed.\nCheap Plastic Products is wondering how to allocate their wastewater between these three disposal and treatment methods (land disposal, and chemical treatment, and land disposal) to meet the effluent standard while keeping costs manageable.\n\n\nProblem 4.1 (3 points)\nThe flow of wastewater through this treatment system is shown in Figure 1. Modify the edge labels (by editing the edge_labels dictionary in the code producing Figure 1) to show how the wastewater allocations result in the final YUK discharge into Pristine Brook. For the edge_label dictionary, the tuple \\((i, j)\\) corresponds to the arrow going from node \\(i\\) to node \\(j\\). The syntax for any entry is (i, j) =&gt; \"label text\", and the label text can include mathematical notation if the string is prefaced with an L, as in L\"x_1\" will produce \\(x_1\\).\n\n\nusing GraphRecipes, Plots\n\nA = [0 1 1 1;\n    0 0 0 1;\n    0 0 0 1;\n    0 0 0 0]\n\nnames = [\"Plant\", \"Land Treatment\", \"Chem Treatment\", \"Pristine Brook\"]\n# modify this dictionary to add labels\nedge_labels = Dict((1, 2) =&gt; \"\", (1,3) =&gt; \"\", (1, 4) =&gt; \"\",(2, 4) =&gt; \"\",(3, 4) =&gt; \"\")\nshapes=[:hexagon, :rect, :rect, :hexagon]\nxpos = [0, -1.5, -0.25, 1]\nypos = [1, 0, 0, -1]\n\ngraphplot(A, names=names,edgelabel=edge_labels, markersize=0.15, markershapes=shapes, markercolor=:white, x=xpos, y=ypos)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: System diagram of the wastewater treatment options in Problem 4.\n\n\n\n\n\nProblem 4.2 (4 points)\nFormulate a mathematical model for the treatment cost and the amount of YUK that will be discharged into Pristine Brook based on the wastewater allocations. This is best done with some equations and supporting text explaining the derivation. Make sure you include, as additional equations in the model, any needed constraints on relevant values. You can find some basics on writing mathematical equations using the LaTeX typesetting syntax here, and a cheatsheet with LaTeX commands can be found on the course website’s Resources page.\n\n\nProblem 4.3 (4 points)\nImplement this systems model as a Julia function which computes the resulting YUK concentration and cost for a particular treatment plan. You can return multiple values from a function with a tuple, as in:\n\n\nfunction multiple_return_values(x, y)\n    return (x+y, x*y)\nend\n\na, b = multiple_return_values(2, 5)\n@show a;\n@show b;\n\na = 7\nb = 10\n\n\nMake sure you comment your code appropriately to make it clear what is going on and why.\n\nProblem 4.4 (5 points)\nUse your function to experiment with some different combinations of wastewater discharge and treatment. Can you find one that satisfies the YUK effluent standard? What was the cost? You don’t have to find an “optimal” solution to this problem, but what do you think would be needed to find a better solution?",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "hw/hw01/hw01.html#references",
    "href": "hw/hw01/hw01.html#references",
    "title": "BEE 4750 Homework 1: Introduction to Using Julia",
    "section": "References",
    "text": "References\nList any external references consulted, including classmates.",
    "crumbs": [
      "Homework",
      "HW 1"
    ]
  },
  {
    "objectID": "resources/markdown.html",
    "href": "resources/markdown.html",
    "title": "Markdown Resources",
    "section": "",
    "text": "Markdown Cheatsheet\nGitHub Markdown Cheatsheet (note that not all of these commands may work in Jupyter notebooks, as GitHub Markdown is an expanded syntax\nLaTeX Cheatsheet",
    "crumbs": [
      "Resources",
      "Markdown"
    ]
  },
  {
    "objectID": "resources/julia.html",
    "href": "resources/julia.html",
    "title": "Julia Resources",
    "section": "",
    "text": "Setting up VS Code and Julia (Youtube)\nJulia Documentation\nJuliaAcademy: Check out the “Introduction to Julia (for programmers)” or “Julia Programming for Nervous Beginners” courses\nQuantEcon MATLAB-Python-Julia cheatsheet\nFastTrack to Julia cheatsheet\nPlotting cheatsheet\nIntroduction to Computational Thinking: a great Julia based course at MIT!\nComprehensive Julia Tutorials: YouTube playlist covering a variety of Julia topics, starting with an introduciton to the language.",
    "crumbs": [
      "Resources",
      "Julia"
    ]
  },
  {
    "objectID": "solutions/hw01/hw01.html",
    "href": "solutions/hw01/hw01.html",
    "title": "Homework 1 Solutions",
    "section": "",
    "text": "import Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n\n\nusing Random\nusing Plots\nusing GraphRecipes\nusing LaTeXStrings\n\n\n# this sets a random seed, which ensures reproducibility of random number generation. You should always set a seed when working with random numbers.\nRandom.seed!(1)\n\nTaskLocalRNG()"
  },
  {
    "objectID": "solutions/hw01/hw01.html#overview",
    "href": "solutions/hw01/hw01.html#overview",
    "title": "Homework 1 Solutions",
    "section": "",
    "text": "import Pkg\nPkg.activate(@__DIR__)\nPkg.instantiate()\n\n\nusing Random\nusing Plots\nusing GraphRecipes\nusing LaTeXStrings\n\n\n# this sets a random seed, which ensures reproducibility of random number generation. You should always set a seed when working with random numbers.\nRandom.seed!(1)\n\nTaskLocalRNG()"
  },
  {
    "objectID": "solutions/hw01/hw01.html#problems-total-50-points",
    "href": "solutions/hw01/hw01.html#problems-total-50-points",
    "title": "Homework 1 Solutions",
    "section": "Problems (Total: 50 Points)",
    "text": "Problems (Total: 50 Points)\n\nProblem 1 (15 points)\nThe following subproblems all involve code snippets that require debugging. For each of them:\n\nidentify and describe the logic and/or syntax error;\nwrite a fixed version of the function;\nuse your fixed function to solve the problem.\n\n\nProblem 1.1\nThe problem is with the initialization min_value = 0, which means no other values can be below it. Instead, we can initialize min_value to be array[1] and start looping at index i=2:\n\nfunction minimum(array)\n1    min_value = array[1]\n    for i in 2:length(array)\n        if array[i] &lt; min_value\n            min_value = array[i]\n        end\n    end\n    return min_value\nend\n\narray_values = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\n@show minimum(array_values);\n\n\n1\n\nInitializing min_value at array[1] ensures that we start with a candidate value; then we can loop beginning with index 2.\n\n\n\n\nminimum(array_values) = 78\n\n\n\n\nProblem 1.2\nThere are two issues here.\n\nThe first error is trying to access average_grades, which is only defined inside the class_average() function. This is an issue of scope: the variable average_grades doesn’t exist globally.\nThe second error is that mean() is not part of the Base Julia library, but rather the Statistics package (part of the usual Julia installation, but needs to be explicitly imported). We could import it with using Statistics and use mean(), but in this case let’s just take the sum and divide by the length.\n\n\nstudent_grades = [89, 90, 95, 100, 100, 78, 99, 98, 100, 95]\nfunction class_average(grades)\n  average_grade = sum(grades) / length(grades)\n  return average_grade\nend\n\n1avg_grade = class_average(student_grades)\n@show avg_grade;\n\n\n1\n\nNow avg_grade exists after being assigned the output of class_average(). Note that we didn’t reuse the name average_grade as that could result in strange outcomes if notebook cells were run out of order.\n\n\n\n\navg_grade = 94.4\n\n\n\n\nProblem 1.3\nThe setindex error comes from the use of zero() instead of zeros():\n\nzero(n) creates a zero variable of the same type of the argument n (e.g. zero(1) is 0 and zero(1.5) is 0.0).\nzeros(n) creates an array of zeroes of dimension n, where n can be an integer or a tuple (for a matrix or higher-dimensional array).\n\nAs a result, the original call outcomes = zero(n_trials) sets outcomes=0, but then when we try to set outcomes[1] in the loop, this is undefined as a scalar does not have an index, resulting in the error.\n\nfunction passadieci()\n    # this rand() call samples 3 values from the vector [1, 6]\n    roll = rand(1:6, 3) \n    return roll\nend\nn_trials = 1_000\n1outcomes = zeros(n_trials)\nfor i = 1:n_trials\n2    outcomes[i] = (sum(passadieci()) &gt; 11)\nend\nwin_prob = sum(outcomes) / n_trials # compute average number of wins\n@show win_prob;\n\n\n1\n\nChanged zero to zeroes; note that it’s generally preferable to initialize an array of the desired size instead of creating an empty vector and using append, as that approach can get quite slow as the number of append calls increases.\n\n2\n\nNow that outcomes is a vector, we can access its indexed values.\n\n\n\n\nwin_prob = 0.387\n\n\nWe could also use comprehensions and broadcasting (applying a function across each element of an array) instead of initializing outcomes as a zero vector and looping to fill it:\n\n1rolls = [passadieci() for i in 1:n_trials]\n2outcomes = sum.(rolls) .&gt; 11\n\nwin_prob = sum(outcomes) / n_trials # compute average number of wins\n@show win_prob;\n\n\n1\n\nThis is an example of a comprehension, which is an inline loop that produces an array; the advantage is that this is sometimes more readable than an explicit loop when the in-loop commands are short.\n\n2\n\nThis is an example of broadcasting (actually twice), indicated by the use of the decimal . in function calls. sum.(v) applies the function sum to every element of v, so that adds each of the individual roll vectors to get the sum of those three dice, and .&gt; does an element-wise comparison of each of those sums to 11. You would get an error if you tried sum.(rolls) &gt; 11 because Julia does not want to make assumptions about your intent in comparing a vector with a scalar.\n\n\n\n\nwin_prob = 0.372\n\n\n\n\n\nProblem 2 (5 points)\nLet’s outline the steps in mystery_function:\n\nInitialize an empty vector.\nIf a value v is not already in y, add v to y.\nReturn after looking at all values.\n\nThis means that mystery_function selects and returns the unique values in values, which is confirmed by the test case.\nThere are many ways to add comments, but we could comment as follows:\n\n# mystery_function: \n#    Inputs: \n#       - values: vector of numeric values\n#    Outputs: \n#       - vector of unique values from the input \nfunction mystery_function(values)\n    y = [] # initialize as an empty vector because we don't know how many values we will end up with\n    for v in values\n        if !(v in y) # if a value is not already in y\n            append!(y, v) # append to y\n        end\n    end\n    return y\nend\n\nlist_of_values = [1, 2, 3, 4, 3, 4, 2, 1]\n@show mystery_function(list_of_values);\n\nmystery_function(list_of_values) = Any[1, 2, 3, 4]\n\n\nThe built-in Julia function which does the same thing is unique() (found using a Google search for “unique Julia vector function”).\n\n@show unique(list_of_values);\n\nunique(list_of_values) = [1, 2, 3, 4]\n\n\n\n\nProblem 3 (10 points)\nYou’re interested in writing some code to remove the mean of a vector.\n\nWrite a function compute_mean(v) which sums all of the elements of a vector v using a for loop and computes the mean.\nMake a random vector random_vect of length 10 using Julia’s rand() function. Use your compute_mean() function to calculate its mean and subtract it from random_vect without a loop (using a Julia technique called broadcasting; feel free to consult the Julia documentation and search as necessary). Check that the new vector has mean zero.\n\nOur compute_mean function should:\n\nInitialize a running sum at 0;\nLoop over all elements of v;\nAdd each element in turn to the running sum;\nDivide the running sum by the number of elements and return.\n\n\nfunction compute_mean(v)\n    v_sum = 0\n    for val in v\n        v_sum += val\n    end\n    return v_sum / length(v)\nend\n\nrandom_vect = rand(10)\nrand_mean = compute_mean(random_vect)\n@show rand_mean;\n\nrand_mean = 0.37973091026710837\n\n\nTo subtract off the mean from random_vect, we can broadcast the subtraction operator by putting a decimal in front: .-.1\n1 As a reminder, broadcasting involves applying a function element-wise. If we just tried to subtract random_vect - rand_mean, Julia would throw an error because it doesn’t know if it should try element-wise subtraction or if we made a mistake in trying to subtract a scalar from a vector, and Julia’s design is to err on the side of throwing an error unless we specifically say that we want an element-wise operation through broadcasting.\nrandom_vect_demean = random_vect .- rand_mean\n@show compute_mean(random_vect_demean);\n\ncompute_mean(random_vect_demean) = -3.3306690738754695e-17\n\n\nWe have produced a mean-zero random vector!\n\n\nProblem 4 (20 points)\n\nA = [0 1 1 1;\n    0 0 0 1;\n    0 0 0 1;\n    0 0 0 0]\n\nnames = [\"Plant\", \"Land Treatment\", \"Chem Treatment\", \"Pristine Brook\"]\n# modify this dictionary to add labels\nedge_labels = Dict((1, 2) =&gt; \"\", (1,3) =&gt; \"\", (1, 4) =&gt; \"\",(2, 4) =&gt; \"\",(3, 4) =&gt; \"\")\nshapes=[:hexagon, :rect, :rect, :hexagon]\nxpos = [0, -1.5, -0.25, 1]\nypos = [1, 0, 0, -1]\n\np = graphplot(A, names=names,edgelabel=edge_labels, markersize=0.15, markershapes=shapes, markercolor=:white, x=xpos, y=ypos)\ndisplay(p)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: System diagram of the wastewater treatment options in Problem 4.\n\n\n\n\nThese equations will be derived in terms of \\(X_1\\) (the land disposal amount, in kg/day) and \\(X_2\\) (the chemically treated amount, in kg/day), where \\(X_1 + X_2 \\leq 100\\ \\mathrm{kg/day}\\). Note that we don’t need to explicitly represent the amount of directly disposed YUK, as this is \\(100 - X_1 - X_2\\) and so is not a free variable.\nThe amount of YUK which will be discharged is \\[\n\\begin{align*}\nD(X_1, X_2) &= 100 - X_1 - X_2 + 0.2 X_1 + 0.005X_2^2 \\\\\n&= 100 - 0.8 X_1 + (0.005X_2 - 1)X_2 \\\\\n&= 100 - 0.8 X_1 + 0.005 X_2^2 - X_2\n\\end{align*}\n\\]\nThe cost is \\[\nC(X_1, X_2) = X_1^2/20 + 1.5 X_2.\n\\]\nA Julia function for this model could look like:\n\n# we will assume that X₁, X₂ are vectors so we can vectorize\n# the function; hence the use of broadcasting. This makes unpacking\n# the different outputs easier as each will be returned as a vector.\n# Note that even though this is vectorized, passing scalar inputs\n# will still work fine.\nfunction yuk_discharge(X₁, X₂)\n    # Make sure X₁ + X₂ &lt;= 100! Throw an error if not.\n1    if any(X₁ .+ X₂ .&gt; 100)\n        error(\"X₁ + X₂ must be less than 200\")\n    end\n2    yuk = 100 .- 0.8X₁ .+ (0.005X₂ .- 1) .* X₂\n    cost = X₁.^2/20 .+ 1.5X₂\n    return (yuk, cost)\nend\n\n\n1\n\nChecking for these kinds of errors is useful when there are hard limits on what arguments can be passed in. This syntax lets you throw an error which says something is going wrong in the code. In general, Julia style is to try to do a computation and throw an error if something goes wrong.\n\n2\n\nWe use broadcasting here to work on vectors of arguments for efficiency. This is in no way required.\n\n\n\n\nyuk_discharge (generic function with 1 method)\n\n\nNow, let’s experiment with different outcomes.2 Some other options include just randomly sampling values (but be careful of not sampling impossible combinations of \\(X_1\\) and \\(X_2\\)), manually searching, or setting up a grid of combinations.\n2 We left this intentionally open for you to conceptualize how to generate combinations and to look into different ways of implementing these in Julia. For a more systematic approach, we can sample combinations from a Dirichlet distribution, which samples combinations which add up to 1. This will require installing and loading the Distributions.jl package (we will spend more time working with Distributions.jl later).\n# Install and load Distributions.jl\n1Pkg.add(\"Distributions\")\nusing Distributions\n\n2yuk_distribution = Dirichlet(3, 1)\n# Need to scale samples from 0 to 200, not 0 to 1\nyuk_samples = 100 * rand(yuk_distribution, 1000)\nD, C = yuk_discharge(yuk_samples[1,:], yuk_samples[2, :])\n\n# Plot the discharge vs. cost and add a line for the regulatory limit\n3p = scatter(D, C, markersize=2, label=\"Treatment Samples\")\n4vline!(p, [20], color=:red, label=\"Regulatory Limit\")\n# Label axes\n5xaxis!(p, \"YUK Discharge (kg/day)\")\n# For the y-axis label, we need to \"escape\" the $ by adding a slash\n# otherwise it interprets that as starting math mode\nyaxis!(p, \"Treatment Cost (\\$/day)\")\n\n\n1\n\nThis is how we add new packages that are not in the existing environment and then load them.\n\n2\n\nThe Dirichlet distribution is over combinations of values which add up to 1, which is what we want for shares of the total YUK discharge. The 3D Dirichlet distribution with parameters equal to 1 is basically uniform over these combinations. See: https://juliastats.org/Distributions.jl/stable/multivariate/#Distributions.Dirichlet.\n\n3\n\nThis is a basic scatter plot with a label for the plot elements. If we wanted to turn the legend off in any plot, use legend=false as an argument.\n\n4\n\nThis is how to add a vertical line to a plot with a label. The syntax for a horizontal line is hline(...). The ! at the end of vline!() is important: this is standard Julia syntax to distinguish commands which mutate (or change) their input (in this case, the first argument p, the plot object), as this is not always desirable behavior.\n\n5\n\nThis is how to change axis labels. Notice that this also mutates the input plot.\n\n\n\n\n   Resolving package versions...\n  No Changes to `~/Teaching/environmental-systems-analysis/website/solutions/hw01/Project.toml`\n  No Changes to `~/Teaching/environmental-systems-analysis/website/solutions/hw01/Manifest.toml`\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Sampled solutions for the wastewater allocation problem in Problem 4, showing cost vs. YUK concentration. The red line marks the regulatory discharge limit of 20kg/day.\n\n\n\n\nWe can see that there are a few treatment strategies which comply with the limit, but they are fairly expensive. This is an example of a tradeoff between two objectives3, where one has to make a choice between what objectives to prioritize. But one thing to note is that just choosing an expensive strategy does not guarantee compliance\n\n\n3 More on this later in the semester!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BEE 4750/5750: Environmental Systems Analysis",
    "section": "",
    "text": "This is the course website for the Fall 2024 edition of BEE 4750/5750, Environmental Systems Analysis, taught at Cornell University by Vivek Srikrishnan.",
    "crumbs": [
      "Course Information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#course-information",
    "href": "index.html#course-information",
    "title": "BEE 4750/5750: Environmental Systems Analysis",
    "section": "Course Information",
    "text": "Course Information\n\nDetails on the class and course policies are provided in the syllabus.\nTopics and weekly materials can be found in the schedule.\nMake sure you familiarize yourself with the FAQ.",
    "crumbs": [
      "Course Information",
      "Overview"
    ]
  },
  {
    "objectID": "index.html#software-tools",
    "href": "index.html#software-tools",
    "title": "BEE 4750/5750: Environmental Systems Analysis",
    "section": "Software Tools",
    "text": "Software Tools\n\nThis course will use the Julia programming language. Julia is a modern, free, open source language which is designed for scientific computing. No prior knowledge of Julia is required. My recommendation is to use Visual Studio Code with the official Julia extension for coding.\nAssignments will be distributed using GitHub Classroom. You should create a GitHub account, but we will walk through how to use it.",
    "crumbs": [
      "Course Information",
      "Overview"
    ]
  },
  {
    "objectID": "policies/homework.html",
    "href": "policies/homework.html",
    "title": "Homework Policies",
    "section": "",
    "text": "This page includes some information on the homework assignments for BEE 4750/5750, including policies and logistics. The goal is to help you get as many points on your homework as possible and to return them as soon as possible.\nThis document is long, but please do read the whole thing (particularly What Homework Is Forand the Logistics). Hopefully most of this is obvious, but some of it may not be.",
    "crumbs": [
      "Policies",
      "Homework Policies"
    ]
  },
  {
    "objectID": "policies/homework.html#what-homework-is-for",
    "href": "policies/homework.html#what-homework-is-for",
    "title": "Homework Policies",
    "section": "What Homework Is For",
    "text": "What Homework Is For\nThis class involves two components which are somewhat in tension pedagogically:\n\nConceptual what are systems, how do they behave, what are methods for their analysis and why do we use them;\nComputational how to implement systems analysis methods.\n\nOut of these, we are more interested in the conceptual: the computational methods are a means to an end. What matters more is the act of translating an environmental system into an appropriate mathematical model and interpreting the results of that model to provide insights into the design and management of the system. Getting better at that act requires practice: this is what homework is for! It’s easy to nod and follow along in lecture, or read a derivation, but that’s a trap. You can only learn by doing, and often, failing.\nHomework is the opportunity to practice doing. The practice is more important than the solution, which is why the solution is the least “rewarded” part of the homework rubrics. You can only learn by trying to solve the problem, and, often, getting stuck, because these are new skills that you are developing. And that’s ok — we encourage you to collaborate so you can share ideas and suggestions and give feedback, not to get solutions (and that’s also true for office hours, TA sessions, etc).\nYou also may not even be able to tell what parts of your homework solution are correct. And that’s also ok! We grade your homework and give you homework solutions so you can identify what, if anything, went wrong, and how to do better next time. We always aim for improvement, not perfection, and every homework problem is an opportunity to practice doing that type of problem.\nBut this emphasis on homework as practice also means that you should start the homework early. If you start early, and get stuck, you have the opportunity to get yourself unstuck, either by banging your head against the problem or by talking to others, and that’s how you learn. If you start late and get stuck, you either have to not finish or cheat.",
    "crumbs": [
      "Policies",
      "Homework Policies"
    ]
  },
  {
    "objectID": "policies/homework.html#homework-logistics",
    "href": "policies/homework.html#homework-logistics",
    "title": "Homework Policies",
    "section": "Homework Logistics",
    "text": "Homework Logistics",
    "crumbs": [
      "Policies",
      "Homework Policies"
    ]
  },
  {
    "objectID": "policies/homework.html#how-to-write-assignments",
    "href": "policies/homework.html#how-to-write-assignments",
    "title": "Homework Policies",
    "section": "How To Write Assignments",
    "text": "How To Write Assignments\nHere are some tips for how to make the grader (the TA or Prof. Srikrishnan) understand what you mean in the time they’re looking at your problem: as noted in the rubrics, if your solution isn’t clear enough for us to follow, you will not receive the points even if your answer is technically correct, because part of demonstrating understanding is the ability to organize and communicate.\n\nBe Honest\n\nWrite everything in your own words. It’s perfectly ok to work with others; in fact, we encourage it! But you should write up and implement everything yourself; it’s very easy to convince yourself that you understand something when you’re mimicking someone else’s solution, and often we realize we don’t actually understand something when we try to write it ourselves.\nCite every outside source you use. You are allowed, in fact encouraged, to use any outside source1 Getting an idea from an outside source is not a problem, and will not lower your grade; if you’re critically evaluating the idea and implementing and writing your solution yourself (see above), then you’re demonstrating understanding even if the idea originated with someone else. But you must give appropriate credit to that source. Taking credit for someone else’s ideas and failing to properly cite an outside source, including your classmates, is plagiarism, and will be treated accordingly.\nThe only sources you do not have to cite are official class materials. If you use the lectures, lecture notes, website materials, homework solutions, etc, you do not have to cite these.\nList everyone that you worked with. Give your classmates proper credit for their assistance. If you get an idea from Ed Discussion, credit the poster. If you’re not sure if you should list someone as a collaborator, err on the side of including them. For discussions in class or in office hours, you don’t have to list everyone who participated in the discussion (though you should if you worked one on one with them), but mention that the class discussion or the office hour was useful.\n\n1 Yes, including ChatGPT, though you should ask and describe how you used it.\n\nBe Clear\n\nWrite legibly. This doesn’t refer to handwriting (since you’ll be submitting PDFs of Jupyter notebooks), but the text itself should be clearly written and well organized, so that it’s easy for the grader to follow your reasoning or explanation. Structuring your solution, and not writing in a stream of consciousness, helps you think more clearly. To reiterate: You will be given no points if the grader cannot easily follow your answer, and the graders have complete discretion to determine this.\nWrite clearly. Use proper spelling, grammar, logic, etc. We will try not to penalize people for not having complete mastery of English, but again, we need to be able to follow your reasoning.\nWrite carefully and completely. We can only grade what you write; nobody can read your mind, and we will not try. The solution that you submit must stand on its own. If your answer is ambiguous, the TA has been instructed to interpret it the wrong way. Regrade requests also cannot be used to add more information to a solution.\nDon’t submit your first draft. For most people, first drafts are terrible. They are often poorly organized, unclear, and contain gaps or jumps in reasoning. You will likely need to revise, possibly several times, for your answer to be clear, careful, and complete. This is another reason to start the assignment early — if you start late, you may be stuck with your first draft, and your grade is likely to suffer for it.\nState your assumptions. If you think a problem statement is ambiguous and your solution depends on a particular interpretation, or you need to make some assumptions to solve the problem, make it explicit (though do also ask for clarification in class or on Ed Discussion).\nDon’t rely on your code. The TA will not try to scrutinize your code, which is a waste of time (again, the code is a means to an end — it works or it doesn’t). If you make it clear what your code is supposed to do, then the TA can tell if this logic is correct and any mistake must be something minor in the code. If you just provide code (even if commented), the TA can’t do this without running your code and debugging, which is not a valuable use of time. We want to focus on your ideas.",
    "crumbs": [
      "Policies",
      "Homework Policies"
    ]
  },
  {
    "objectID": "policies/homework.html#be-concise",
    "href": "policies/homework.html#be-concise",
    "title": "Homework Policies",
    "section": "Be Concise",
    "text": "Be Concise\n\nKeep solutions short. Organized answers should not be long. There’s a fine balance between conciseness and completeness: find it!\nDon’t regurgitate. You can reference concepts, models, etc from class without repeating them. Just make it clear what you’re modifying and how you’re using those concepts for that particular problem.\nDon’t bullshit. You will get no points for word salad, even if you accidentally hit on the right answer.",
    "crumbs": [
      "Policies",
      "Homework Policies"
    ]
  },
  {
    "objectID": "slides/lecture01-intro.html#about-me",
    "href": "slides/lecture01-intro.html#about-me",
    "title": "Welcome to BEE 4750/5750!",
    "section": "About Me",
    "text": "About Me\nProf. Vivek Srikrishnan, viveks at cornell dot edu, 318 Riley-Robb\n\nFrom Wappingers Falls, NY (via Champaign-Urbana, IL and State College, PA);\nNon-academic highlight: Was on Jeopardy! in 2016;\nResearches climate risk management;\nParticular interested in unintended consequences which result from neglecting uncertainty or system dynamics."
  },
  {
    "objectID": "slides/lecture01-intro.html#meet-my-supervisors",
    "href": "slides/lecture01-intro.html#meet-my-supervisors",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Meet My Supervisors",
    "text": "Meet My Supervisors\n\n\n\n\nMy Supervisors"
  },
  {
    "objectID": "slides/lecture01-intro.html#about-the-ta",
    "href": "slides/lecture01-intro.html#about-the-ta",
    "title": "Welcome to BEE 4750/5750!",
    "section": "About the TA",
    "text": "About the TA\nGabriela Ackermann Logan, M.S./Ph.D. student, ga345 at cornell dot edu, 319 Riley-Robb\n\nFrom (via Medford, MA)\nInterested in energy system transitions and supply chain/logistical needs."
  },
  {
    "objectID": "slides/lecture01-intro.html#what-is-a-system",
    "href": "slides/lecture01-intro.html#what-is-a-system",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Is A System?",
    "text": "What Is A System?\nA system is:\n\n\n“an interconnected set of elements that is coherently organized in a way that achieves something…\nA system must consist of three kinds of things: elements, interconnections and a function or purpose.”\n\n\n— Donella Meadows, Thinking in Systems: A Primer, 2008"
  },
  {
    "objectID": "slides/lecture01-intro.html#examples-of-systems",
    "href": "slides/lecture01-intro.html#examples-of-systems",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Examples of Systems",
    "text": "Examples of Systems\nCan we think of any examples of systems?\n\nWhat about things that are not systems?"
  },
  {
    "objectID": "slides/lecture01-intro.html#why-are-systems-interesting",
    "href": "slides/lecture01-intro.html#why-are-systems-interesting",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Why Are Systems Interesting?",
    "text": "Why Are Systems Interesting?\nIn other words, a system involves an interconnected set of components.\nThose interconnections can lead to very different dynamics and outcomes than if the component processes were studied in isolation."
  },
  {
    "objectID": "slides/lecture01-intro.html#example-topics",
    "href": "slides/lecture01-intro.html#example-topics",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Example Topics",
    "text": "Example Topics\n\n\nTopics\n\n\nDefine systems\nSimulate system dynamics\nAnalyze and assess risk\nMake decisions with optimization\nExplore trade-offs across objectives\n\n\n\n\n\nExample Systems\n\n\nAir pollution\nWastewater management\nElectric power systems\nSolid waste management"
  },
  {
    "objectID": "slides/lecture01-intro.html#what-do-you-hope-to-get-out-of-this-course",
    "href": "slides/lecture01-intro.html#what-do-you-hope-to-get-out-of-this-course",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Do You Hope To Get Out Of This Course?",
    "text": "What Do You Hope To Get Out Of This Course?\n\n\n\n\n\n\n\n\nText: VSRIKRISH to 22333\nURL: https://pollev.com/vsrikrish  See Results"
  },
  {
    "objectID": "slides/lecture01-intro.html#course-organization",
    "href": "slides/lecture01-intro.html#course-organization",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Course Organization",
    "text": "Course Organization\n\nIntroduction to Systems Analysis\nSimulating Systems and Risk\nSystems Management and Optimization\nDecision-Making Under Uncertainty"
  },
  {
    "objectID": "slides/lecture01-intro.html#disclaimer",
    "href": "slides/lecture01-intro.html#disclaimer",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Disclaimer",
    "text": "Disclaimer\nSitting in class/looking at these notes is not a substitute for reading the syllabus."
  },
  {
    "objectID": "slides/lecture01-intro.html#attendance",
    "href": "slides/lecture01-intro.html#attendance",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Attendance",
    "text": "Attendance\nNot required, but students tend to do better when they’re actively engaged in class"
  },
  {
    "objectID": "slides/lecture01-intro.html#office-hours",
    "href": "slides/lecture01-intro.html#office-hours",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Office Hours",
    "text": "Office Hours\n\nTime TBD (will send out poll)\nAlmost impossible to find a time that works for all (or even most); please feel free to email to make appointments as/if needed.\nCan be busy, will triage based on urgency (e.g. if you want code help but have not done basic debugging steps, you will be asked to wait until others are helped)."
  },
  {
    "objectID": "slides/lecture01-intro.html#accomodations",
    "href": "slides/lecture01-intro.html#accomodations",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Accomodations",
    "text": "Accomodations\nIf you have any access barriers in this class, please seek out any helpful accomodations.\n\nGet an SDS letter.\nIf you need an accomodation before you have an official letter, please reach out to me ASAP!"
  },
  {
    "objectID": "slides/lecture01-intro.html#course-website",
    "href": "slides/lecture01-intro.html#course-website",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Course Website",
    "text": "Course Website\nhttps://viveks.me/environmental-systems-analysis\n\nCentral hub for information, schedule, and policies\nWill add link and some information to Canvas (assignment due dates, etc)"
  },
  {
    "objectID": "slides/lecture01-intro.html#communications",
    "href": "slides/lecture01-intro.html#communications",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Communications",
    "text": "Communications\nUse Ed Discussion for questions and discussions about class, homework assignments, etc.\n\nTry to use public posts so others can benefit from questions and can weigh in.\nI will make announcements through Ed, so check regularly.\nUrgent announcements will also be emailed.\n\nWhen urgency or privacy is required, email is ok."
  },
  {
    "objectID": "slides/lecture01-intro.html#julia",
    "href": "slides/lecture01-intro.html#julia",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Julia",
    "text": "Julia\nIn this course, we will use the Julia programming language.\nAll assignments, labs, and AEs will be provided as Jupyter Notebooks."
  },
  {
    "objectID": "slides/lecture01-intro.html#what-is-your-programming-experience",
    "href": "slides/lecture01-intro.html#what-is-your-programming-experience",
    "title": "Welcome to BEE 4750/5750!",
    "section": "What Is Your Programming Experience?",
    "text": "What Is Your Programming Experience?\n\n\n\n\n\n\n\n\nText: VSRIKRISH to 22333\nURL: https://pollev.com/vsrikrish  See Results"
  },
  {
    "objectID": "slides/lecture01-intro.html#jupyter-notebooks",
    "href": "slides/lecture01-intro.html#jupyter-notebooks",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Jupyter Notebooks",
    "text": "Jupyter Notebooks\nWe will use Jupyter Notebooks for most computing tasks (including assignments).\n\nAllow for interactive evaluation of code and integration with text (including nicely typeset mathematics)\nCan export to PDF (or HTML -&gt; PDF) for submission to Gradescope.\nBe careful before submitting: Evaluate all cells in order"
  },
  {
    "objectID": "slides/lecture01-intro.html#github-classroom",
    "href": "slides/lecture01-intro.html#github-classroom",
    "title": "Welcome to BEE 4750/5750!",
    "section": "GitHub Classroom",
    "text": "GitHub Classroom\nHomework assignments and labs will be distributed using GitHub Classroom.\n\nEvery student will have a unique “repository.”\nWhen assignment is released, I will share the link for repository creation on Ed Discussion.\nMakes it easy to share code for assistance and debugging (share links to repositories, not out-of-context code and screenshots)."
  },
  {
    "objectID": "slides/lecture01-intro.html#debugging-code",
    "href": "slides/lecture01-intro.html#debugging-code",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Debugging Code",
    "text": "Debugging Code\n\nLook at the class FAQ!\nSearch for the error message you’re seeing.\nTry to divide code into logical “chunks” and test each one to isolate the error where there’s a syntax or conceptual error.\nPost on Ed. Do not include a screenshot, link to GitHub or provide a small snippet showing the syntax you’re trying.\nCome to office hours (last recourse!)."
  },
  {
    "objectID": "slides/lecture01-intro.html#assessments",
    "href": "slides/lecture01-intro.html#assessments",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Assessments",
    "text": "Assessments\n\n\n\nCategory\nWeight\n\n\n\n\nParticipation\n10% (5% for 5750)\n\n\nReadings (5750 only)\n5%\n\n\nExercises\n10%\n\n\nLabs\n10%\n\n\nHomework\n20%\n\n\nPrelims\n30%\n\n\nTerm Project\n20%"
  },
  {
    "objectID": "slides/lecture01-intro.html#overall-guidelines",
    "href": "slides/lecture01-intro.html#overall-guidelines",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Overall Guidelines",
    "text": "Overall Guidelines\n\nCollaboration highly encouraged, but all work must reflect your own understanding\nSubmit PDFs on Gradescope\n24 hour late submissions, 10% penalty\n“Standard” rubric available for HW/exams\nAlways cite external references\nCurve unlikely (not worth asking about…)"
  },
  {
    "objectID": "slides/lecture01-intro.html#late-work-policy",
    "href": "slides/lecture01-intro.html#late-work-policy",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Late Work Policy",
    "text": "Late Work Policy\n\nMost work can be submitted up to 24 hours late at a 50% penalty.\nIf you have an approved reason (illness, injury, etc), let me know ahead of time and we will make accomodations."
  },
  {
    "objectID": "slides/lecture01-intro.html#regrade-requests",
    "href": "slides/lecture01-intro.html#regrade-requests",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Regrade Requests",
    "text": "Regrade Requests\n\nCan be submitted on Gradescope up to 1 week after grades are released.\nMust include a brief justification.\nWill be evaluated only on the basis of the work in the submission.\nCan lose points if me/TA notice we missed a mistake initially!"
  },
  {
    "objectID": "slides/lecture01-intro.html#regrade-requests-special-cases",
    "href": "slides/lecture01-intro.html#regrade-requests-special-cases",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Regrade Requests: Special Cases",
    "text": "Regrade Requests: Special Cases\n\nIf you (correctly) point out that your grade was graded too leniently, you will get bonus points back.\nIf a significant error (as defined by me) is found in the solutions, everyone in the class will receive full credit for that (sub)problem."
  },
  {
    "objectID": "slides/lecture01-intro.html#labs",
    "href": "slides/lecture01-intro.html#labs",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Labs",
    "text": "Labs\n\nIn-class guided activities, but may need some time after class to complete\nFocus on “how” to apply methods and concepts from class\nIf you can’t bring a laptop to these classes, you can work with someone else\nCan work in groups, but must submit your own work.\nDue by 9:00pm on the lab day, will drop one.\nGraded on a scale of 0-3, largely based on effort."
  },
  {
    "objectID": "slides/lecture01-intro.html#exercises",
    "href": "slides/lecture01-intro.html#exercises",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Exercises",
    "text": "Exercises\n\nAuto-graded “quizzes” on Canvas, auto-graded\nFocus on conceptual questions or quick setups/calculations (no coding)\nCan submit as many times as you like.\nDue by 9:00pm by the end of the week (Friday).\nWill drop one."
  },
  {
    "objectID": "slides/lecture01-intro.html#homework-assignments",
    "href": "slides/lecture01-intro.html#homework-assignments",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Homework Assignments",
    "text": "Homework Assignments\n\n5 in total, due two weeks after assignment.\nFocus on new or extended applications\nManaged with GitHub Classroom\nDue by 9:00pm on the due date (usually Friday)\nNo drops.\nGraded on correctness."
  },
  {
    "objectID": "slides/lecture01-intro.html#term-project",
    "href": "slides/lecture01-intro.html#term-project",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Term Project",
    "text": "Term Project\n\nAnalyze a system of interest, including the regulatory environment, going beyond class examples/methods.\nWork in groups of 3–4.\nSubmit proposal on 11/1/24.\nRecord presentation by end of semester for peer review by classmates.\nSubmit report, peer reviews, group/self evaluations by end of finals week."
  },
  {
    "objectID": "slides/lecture01-intro.html#participation",
    "href": "slides/lecture01-intro.html#participation",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Participation",
    "text": "Participation\n\nThe class works best when everyone is engaged and collaborative\n\nAttending every class;\nAsking questions in class or on Ed;\nAnswering questions in class or on Ed;\nComing to office hours.\n\nWe’re paying attention! Participation points not “free”."
  },
  {
    "objectID": "slides/lecture01-intro.html#prelims",
    "href": "slides/lecture01-intro.html#prelims",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Prelims",
    "text": "Prelims\n\nTwo in-class prelims (10/09, 11/11);\nWill resemble exercises/labs more than homework.\nFocus on concepts, problem formulations, interpretation.\nNot trying to make these long or particularly difficult!\nExams will be scanned and put on Gradescope for grades/feedback.\nWill discuss two weeks after the exams after grades are returned."
  },
  {
    "objectID": "slides/lecture01-intro.html#readings",
    "href": "slides/lecture01-intro.html#readings",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Readings",
    "text": "Readings\n\nStudents in 5750 will be assigned one-two readings per module.\nOption to peer annotate on Canvas.\nWill need to submit a written summary/synthesis.\nStudents in 4750 should feel free to do the reading to go more deeply, but optional."
  },
  {
    "objectID": "slides/lecture01-intro.html#hopefully-not-a-concern",
    "href": "slides/lecture01-intro.html#hopefully-not-a-concern",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Hopefully Not a Concern…",
    "text": "Hopefully Not a Concern…\n\nCollaboration is great and is encouraged!\nKnowing how to find, evaluate, and use helpful resources is a skill we want to develop.\nDon’t just copy…learn from others and give credit.\nSubmit your own original work."
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-1",
    "href": "slides/lecture01-intro.html#academic-integrity-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity",
    "text": "Academic Integrity\nObviously, just copying down answers from Chegg or ChatGPT and passing them off as your own is not ok.\nBut often lines aren’t that simple. Let’s quickly consider some scenarios (h/t to Tony Wong for these)."
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-scenario-1",
    "href": "slides/lecture01-intro.html#academic-integrity-scenario-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 1",
    "text": "Academic Integrity: Scenario 1\nDan searches the internet for relevant code and copy-pastes it into his Jupyter notebook. They cites the source of the codes.\n\n\n\n\n\n\nIs this ok?\n\n\n\nProbably Not\n\nWhat portion of the work is Dan’s?\nHow important were the codes?\nDid Dan understand what they copied?"
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-scenario-1-1",
    "href": "slides/lecture01-intro.html#academic-integrity-scenario-1-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 1",
    "text": "Academic Integrity: Scenario 1\nDan searches the internet for relevant code and copy-pastes it into his Jupyter notebook. They cites the source of the codes.\n\n\n\n\n\n\nWhat Should Dan Do?\n\n\n\nDan should paraphrase the codes they found to incorporate them with his own code, and then also cite them."
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-scenario-2",
    "href": "slides/lecture01-intro.html#academic-integrity-scenario-2",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 2",
    "text": "Academic Integrity: Scenario 2\nMatthew and Rhonda work together to figure out how to implement the codes, but each works on their own computer and develops their own solutions.\n\n\n\n\n\n\nIs this ok?\n\n\n\nDefinitely!\n\nIndependent implementations shows understanding."
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-scenario-3",
    "href": "slides/lecture01-intro.html#academic-integrity-scenario-3",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 3",
    "text": "Academic Integrity: Scenario 3\nFelix and Rachel are working together on a problem involving a derivation. Rachel types it up in LaTeX and sends the code to Felix, who pastes it into his Jupyter notebook.\n\n\n\n\n\n\nIs this ok?\n\n\n\nLikely Not\n\nDid Felix contribute enough to the derivation?\nDefinitely not OK if Felix doesn’t give Rachel credit for their contribution."
  },
  {
    "objectID": "slides/lecture01-intro.html#academic-integrity-scenario-4",
    "href": "slides/lecture01-intro.html#academic-integrity-scenario-4",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Academic Integrity: Scenario 4",
    "text": "Academic Integrity: Scenario 4\nDarren uses ChatGPT to debug an error in their homework code. They fix the error and credits ChatGPT in his References section.\n\n\n\n\n\n\nIs this ok?\n\n\n\nWell-meaning, but no!\n\nUsing ChatGPT (or other ML tools) can be ok, but…\nNeed to ask permission and thoroughly document the query and the exact response."
  },
  {
    "objectID": "slides/lecture01-intro.html#chatgpt-the-stochastic-parrot",
    "href": "slides/lecture01-intro.html#chatgpt-the-stochastic-parrot",
    "title": "Welcome to BEE 4750/5750!",
    "section": "ChatGPT: The Stochastic Parrot",
    "text": "ChatGPT: The Stochastic Parrot\nWhy is ChatGPT (and other ML/AI tools) singled out?\n\n\nLack of Transparency: Not clear what the training data is, so documentation is essential (ML is not great at extrapolation).\nNot Well-Suited to All Tasks: Can be useful for getting a skeleton, starter code, or debugging. Really (and obviously) bad at interpretation and analysis.\nHallucinations: ChatGPT often just makes stuff up. Do you want to be credited for a ChatGPT hallucination?"
  },
  {
    "objectID": "slides/lecture01-intro.html#chatgpt-the-stochastic-parrot-1",
    "href": "slides/lecture01-intro.html#chatgpt-the-stochastic-parrot-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "ChatGPT: The Stochastic Parrot",
    "text": "ChatGPT: The Stochastic Parrot\n\nThink of ChatGPT as a ranting drunk\nIt’s stringing together words or code it heard in a way that sounds reasonable, but there’s no sense of concept.\nChatGPT debugging can be useful, but can also lead to new errors with no clear way to fix them, since you don’t understand what you did."
  },
  {
    "objectID": "slides/lecture01-intro.html#next-classes",
    "href": "slides/lecture01-intro.html#next-classes",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Next Classes",
    "text": "Next Classes\nWednesday: Lab 1: Setting up Julia and GitHub\n\nLab 1 link is available on Ed. Click it to accept the lab before class.\nCome to class with downloaded lab and try to follow the setup instructions on the website.\n\nNext Week: Introduction to Systems Analysis"
  },
  {
    "objectID": "slides/lecture01-intro.html#assessments-1",
    "href": "slides/lecture01-intro.html#assessments-1",
    "title": "Welcome to BEE 4750/5750!",
    "section": "Assessments",
    "text": "Assessments\n\nLab 1: Wednesday\nHW 1: Available, due 9/6."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#course-policies",
    "href": "slides/lecture03-systems-intro.html#course-policies",
    "title": "Introduction to Systems Analysis",
    "section": "Course Policies",
    "text": "Course Policies\nIf you missed last class, make sure you read the syllabus!."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#tools-setup-lab",
    "href": "slides/lecture03-systems-intro.html#tools-setup-lab",
    "title": "Introduction to Systems Analysis",
    "section": "Tools Setup Lab",
    "text": "Tools Setup Lab\nIf you missed last Wednesday:\n\nGo through the lab by Wednesday to make sure you’re set up for the semester.\nEmail Prof. Srikrishnan to get an extension so you can submit.\nCome to office hours for help if something isn’t working."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#questions",
    "href": "slides/lecture03-systems-intro.html#questions",
    "title": "Introduction to Systems Analysis",
    "section": "Questions?",
    "text": "Questions?\n\n\n\n\n\n\n\n\nText: VSRIKRISH to 22333\nURL: https://pollev.com/vsrikrish  See Results"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#what-is-a-system",
    "href": "slides/lecture03-systems-intro.html#what-is-a-system",
    "title": "Introduction to Systems Analysis",
    "section": "What Is A System?",
    "text": "What Is A System?\nA system is:\n\n\n“an interconnected set of elements that is coherently organized in a way that achieves something…\nA system must consist of three kinds of things: elements, interconnections and a function or purpose.”\n\n\n— Donella Meadows, Thinking in Systems: A Primer, 2008"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#why-are-systems-interesting",
    "href": "slides/lecture03-systems-intro.html#why-are-systems-interesting",
    "title": "Introduction to Systems Analysis",
    "section": "Why Are Systems Interesting?",
    "text": "Why Are Systems Interesting?\n\n\n“Interconnected set of elements”\n“Function or purpose”"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#example-climate-change",
    "href": "slides/lecture03-systems-intro.html#example-climate-change",
    "title": "Introduction to Systems Analysis",
    "section": "Example: Climate Change",
    "text": "Example: Climate Change\nChanges to climate occur bassed on a variety of processes across scales, including:\n\ncarbon sources/sinks;\naerosol emissions;\nocean heat uptake;\nsurface albedo;\nEl Niño/La Niña (ENSO)"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#example-climate-change-1",
    "href": "slides/lecture03-systems-intro.html#example-climate-change-1",
    "title": "Introduction to Systems Analysis",
    "section": "Example: Climate Change",
    "text": "Example: Climate Change\n\nCorrelations among Climate Parameters\nSource: Errickson et al. (2021)"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#example-climate-change-2",
    "href": "slides/lecture03-systems-intro.html#example-climate-change-2",
    "title": "Introduction to Systems Analysis",
    "section": "Example: Climate Change",
    "text": "Example: Climate Change\n\nCorrelations among Climate Parameters\nSource: Errickson et al. (2021)"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#example-water-pollution",
    "href": "slides/lecture03-systems-intro.html#example-water-pollution",
    "title": "Introduction to Systems Analysis",
    "section": "Example: Water Pollution",
    "text": "Example: Water Pollution\nContaminant levels in a body of water also depend on a number of processes which may have different scales and rates.\nCan we think of some?"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#system-state",
    "href": "slides/lecture03-systems-intro.html#system-state",
    "title": "Introduction to Systems Analysis",
    "section": "System State",
    "text": "System State\nSystem State: quantities or variables which evolve over time based on external inputs and system dynamics.\nThe state gives you a “snapshot” of the system at a given point in time."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#stocks-and-flows",
    "href": "slides/lecture03-systems-intro.html#stocks-and-flows",
    "title": "Introduction to Systems Analysis",
    "section": "Stocks and Flows",
    "text": "Stocks and Flows\n\n\nA stock is the amount of a system property: concentrations of a pollutant, numbers of currency units, etc.\nA flow is the way in which a stock changes: decay, diffusion, production, consumption, etc."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#how-do-we-develop-models",
    "href": "slides/lecture03-systems-intro.html#how-do-we-develop-models",
    "title": "Introduction to Systems Analysis",
    "section": "How Do We Develop Models?",
    "text": "How Do We Develop Models?\n\n\nMass balance equations let us track changes in stocks at particular points;\nEquilibrium conditions are requirements that there is no net flow, and thus that stocks are preserved;\nFate and transport modeling involves quantifying how stocks change as they move through the system."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#systems-analysis",
    "href": "slides/lecture03-systems-intro.html#systems-analysis",
    "title": "Introduction to Systems Analysis",
    "section": "Systems Analysis",
    "text": "Systems Analysis\n\n\nWhat We Study\n\nSystem dynamics;\nResponse to inputs;\nAlternatives for management or design.\n\n\nNeeds\n\n\nDefinition of the system\nSystem model"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#what-do-we-need-to-define-a-system",
    "href": "slides/lecture03-systems-intro.html#what-do-we-need-to-define-a-system",
    "title": "Introduction to Systems Analysis",
    "section": "What Do We Need To Define A System?",
    "text": "What Do We Need To Define A System?\n\n\nComponents: relevant processes, agents, etc\nInterconnections: relationships between system components\nControl volume: unit of the system we are trying to model and/or manage\nInputs: control policies and/or external forcings\nOutputs: measured quantities of interest"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#example-river-system",
    "href": "slides/lecture03-systems-intro.html#example-river-system",
    "title": "Introduction to Systems Analysis",
    "section": "Example: River System",
    "text": "Example: River System\n\n\nFigure 1: Illustration of a system, including notation."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#what-is-a-model",
    "href": "slides/lecture03-systems-intro.html#what-is-a-model",
    "title": "Introduction to Systems Analysis",
    "section": "What Is A Model?",
    "text": "What Is A Model?\n\n\nPhysical Models\n\n\n\nFalling Water Miniature Model\n\n\n\nSource: Wikimedia\n\n\n\n\nMathematical Models\n\n\n\nMathematical Model Machine"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#mathematical-models-of-systems",
    "href": "slides/lecture03-systems-intro.html#mathematical-models-of-systems",
    "title": "Introduction to Systems Analysis",
    "section": "Mathematical Models of Systems",
    "text": "Mathematical Models of Systems\n\nConceptual Model of a System"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#environmental-systems",
    "href": "slides/lecture03-systems-intro.html#environmental-systems",
    "title": "Introduction to Systems Analysis",
    "section": "Environmental Systems",
    "text": "Environmental Systems\n\n\n\n\n\nConceptual Model of an Environmental System\n\n\n\n\nMunicipal sewage into lakes, rivers, etc.\nPower plant emissions into air\nSolid waste placed on landfill\nCO2 into atmosphere"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#deterministic-vs.-stochastic-models",
    "href": "slides/lecture03-systems-intro.html#deterministic-vs.-stochastic-models",
    "title": "Introduction to Systems Analysis",
    "section": "Deterministic vs. Stochastic Models",
    "text": "Deterministic vs. Stochastic Models\n\n\nDeterministic Models\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nStochastic Models"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#descriptive-vs.-prescriptive-models",
    "href": "slides/lecture03-systems-intro.html#descriptive-vs.-prescriptive-models",
    "title": "Introduction to Systems Analysis",
    "section": "Descriptive vs. Prescriptive Models",
    "text": "Descriptive vs. Prescriptive Models\n\n\nDescriptive Models\n\nUsed primarily for describing or simulating dynamics.\nIntended for simulations and exploratory and/or Monte Carlo analysis.\n\n\n\n\nPrescriptive Models\n\nSpecify (prescribe) an action, decision, or policy.\nIntended for optimization or decision analysis."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#analytic-vs.-numerical-solutions",
    "href": "slides/lecture03-systems-intro.html#analytic-vs.-numerical-solutions",
    "title": "Introduction to Systems Analysis",
    "section": "Analytic vs. Numerical Solutions",
    "text": "Analytic vs. Numerical Solutions\nMathematical models can be solved:\n\nAnalytically: can find the exact solution in closed form;\nNumerically: can only find solutions (exact or approximate) using computational tools."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#all-models-are-wrong-but-some-are-useful",
    "href": "slides/lecture03-systems-intro.html#all-models-are-wrong-but-some-are-useful",
    "title": "Introduction to Systems Analysis",
    "section": "“All Models Are Wrong, But Some Are Useful”",
    "text": "“All Models Are Wrong, But Some Are Useful”\n\n\n…all models are approximations. Essentially, all models are wrong, but some are useful. However, the approximate nature of the model must always be borne in mind….\n\n\n— Box & Draper, Empirical Model Building and Response Surfaces, 1987"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#what-are-models-good-for",
    "href": "slides/lecture03-systems-intro.html#what-are-models-good-for",
    "title": "Introduction to Systems Analysis",
    "section": "What Are Models Good For?",
    "text": "What Are Models Good For?\n\n\nModels can corroborate a hypothesis by offering evidence to strengthen what may be already partly established through other means…\nThus, the primary value of models is heuristic: Models are representations, useful for guiding further study but not susceptible to proof.\n\n\n— Oreskes et al, “Verification, Validation, and Confirmation of Numerical Models in the Earth Sciences”, 1994"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#models-and-assumptions",
    "href": "slides/lecture03-systems-intro.html#models-and-assumptions",
    "title": "Introduction to Systems Analysis",
    "section": "Models And Assumptions",
    "text": "Models And Assumptions\n\nXKCD Comic 2355\nSource: XKCD 2355"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#key-takeaways-systems",
    "href": "slides/lecture03-systems-intro.html#key-takeaways-systems",
    "title": "Introduction to Systems Analysis",
    "section": "Key Takeaways (Systems)",
    "text": "Key Takeaways (Systems)\n\nA system is an interconnected set of components.\nSystems are interesting because interconnections can result in unexpected outcomes.\nKey terms:\n\nstate\nstocks\nflows"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#key-takeaways-systems-definition",
    "href": "slides/lecture03-systems-intro.html#key-takeaways-systems-definition",
    "title": "Introduction to Systems Analysis",
    "section": "Key Takeaways (Systems Definition)",
    "text": "Key Takeaways (Systems Definition)\n\nTo define a system, need to specify:\n\ncomponents\ninterconnections\ncontrol volume\nexternal inputs\noutputs of interest"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#key-takeaways-models",
    "href": "slides/lecture03-systems-intro.html#key-takeaways-models",
    "title": "Introduction to Systems Analysis",
    "section": "Key Takeaways (Models)",
    "text": "Key Takeaways (Models)\n\nMathematical models allow us to understand how external inputs combine with internal system dynamics to produce outputs.\nModels can be prescriptive or descriptive depending on goal of analysis.\nFor most interesting problems, cannot solve analytically and need to use numerical methods."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#key-takeaways-models-1",
    "href": "slides/lecture03-systems-intro.html#key-takeaways-models-1",
    "title": "Introduction to Systems Analysis",
    "section": "Key Takeaways (Models)",
    "text": "Key Takeaways (Models)\n\nSimulation models: Generate data by evaluating model to represent system dynamics.\nOptimization model: Find parameters which maximize/minimize some criterion."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#key-takeaways-warning",
    "href": "slides/lecture03-systems-intro.html#key-takeaways-warning",
    "title": "Introduction to Systems Analysis",
    "section": "Key Takeaways (Warning!)",
    "text": "Key Takeaways (Warning!)\n\nAll models are at best approximations: be conscious of what assumptions you’ve made and how they might change the modeled outcomes (you will be asked to do this on homeworks)."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#next-classes",
    "href": "slides/lecture03-systems-intro.html#next-classes",
    "title": "Introduction to Systems Analysis",
    "section": "Next Classes",
    "text": "Next Classes\nMonday: Examples of Formulating/Analyzing Models.\nWednesday: Overview of System Dynamics"
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#assessments",
    "href": "slides/lecture03-systems-intro.html#assessments",
    "title": "Introduction to Systems Analysis",
    "section": "Assessments",
    "text": "Assessments\nHomework 2: Due Friday at 9pm."
  },
  {
    "objectID": "slides/lecture03-systems-intro.html#references-1",
    "href": "slides/lecture03-systems-intro.html#references-1",
    "title": "Introduction to Systems Analysis",
    "section": "References",
    "text": "References\n\n\n\n\n\n\n\n\nErrickson, F. C., Keller, K., Collins, W. D., Srikrishnan, V., & Anthoff, D. (2021). Equity is more important for the social cost of methane than climate uncertainty. Nature, 592, 564–570. https://doi.org/10.1038/s41586-021-03386-6"
  },
  {
    "objectID": "slides/notebooks/shallow-lake.html",
    "href": "slides/notebooks/shallow-lake.html",
    "title": "Shallow Lake Problem",
    "section": "",
    "text": "using Pkg\nPkg.activate(dirname(@__DIR__))\nPkg.instantiate()\nusing Plots\nusing LaTeXStrings\nusing Distributions\nusing Random"
  },
  {
    "objectID": "slides/notebooks/shallow-lake.html#introduction",
    "href": "slides/notebooks/shallow-lake.html#introduction",
    "title": "Shallow Lake Problem",
    "section": "Introduction",
    "text": "Introduction\nSystems can exhibit complex, nonlinear dynamics, including (but not limited to):\n\nbifurcations;\nreinforcing and dampening feedbacks; and\ntipping points.\n\nIn this notebook, we’ll look at a simple model which has very complex dynamics: the shallow lake problem introduced by Carpenter et al. (1999).\n\nCarpenter, S. R., Ludwig, D., & Brock, W. A. (1999). Management of eutrophication for lakes subject to potentially irreversible change. Ecol. Appl., 9(3), 751–771. https://doi.org/10.2307/2641327"
  },
  {
    "objectID": "slides/notebooks/shallow-lake.html#the-shallow-lake-problem",
    "href": "slides/notebooks/shallow-lake.html#the-shallow-lake-problem",
    "title": "Shallow Lake Problem",
    "section": "The Shallow Lake Problem",
    "text": "The Shallow Lake Problem\n\nOverview\nEutrophication is a common environmental problem in which plants and algae feed on excess nutrients and become overabundant. The large mass of plants and algae have several noxious effects on the ecosystem, including:\n\nhypoxia (reduction in oxygen from the decomposition of organic matter), leading to “dead zones”;\nacidification (from the CO2 produced by decomposition);\nreduced sunlight (from an accumulation of surface algae);\nclogged water intakes; and\nreduction in recreational value and drinking water quality.\n\nIn lakes, eutrophication is often caused by excess input of nutrients (particularly phosphorous, P), which can come from point sources (such as industrial processes) and/or non-point sources (such as agricultural runoff). As the P releases are related to economic activity, we can view this (simplified) lake management problem from the perspective of a tradeoff between economic benefits and the health of the lake: while there are benefits to the activities which lead to P releases, there are recreational, aesthetic, and ecological benefits to maintaining the lake in a non-eutrophic (or oligotrophic) state.\n\n\nModel Formulation\nSuppose we have a town which emits phosphorous into a lake as a by-product of economic activity. The level of P in the lake at a given time \\(t\\) is given by \\(X_t\\) (for the purposes of this problem, we will just treat all values as dimensionless).\nThe level of controllable P release in year \\(t\\) is \\(a_t\\). The lake also receives random levels of phosphorous from non-point source runoff, which we denote by \\(y_t\\). We model these random runoffs using a lognormal distribution \\(LogNormal(\\mu, \\sigma^2)\\), which ensures that the runoffs cannot be negative.\nThere is also some nutrient cycling in the lake which naturally reduces phosphorous concentrations. This cycling is the result of accumulation in the sediment and turnover (water motion disturbing the sediment and carrying the nutrients upwards) and consumers, such as mussels. This cycling is dependent on the state \\(X_t\\), \\(\\frac{X_t^q}{1 + X_t^q}\\). The lake also loses some of its P each time period of its due to outflows and consumption, which we assume is linearly proportional to the state, \\(bX_t\\).\n\n\n\nShallow Lake Problem Diagram\n\n\nAs a result, the lake dynamics are given by:\n\\[X_{t+1} = X_t + a_t + y_t + \\frac{X_t^q}{1 + X_t^q} - bX_t, \\quad y_t \\sim LogNormal(\\mu, \\sigma^2),\\]\nwhere parameter interpretation is given in the table below.\n\nLake problem parameters\n\n\nParameter\nDefinition\nUnits\n\n\n\n\n\\(X_t\\)\nP concentration in lake\ndimensionless\n\n\n\\(a_t\\)\npoint source P input\ndimensionless\n\n\n\\(y_t\\)\nnon-point source P input\ndimensionless\n\n\n\\(q\\)\nP recycling rate\ndimensionless\n\n\n\\(b\\)\nrate at which P is lost\ndimensionless"
  },
  {
    "objectID": "slides/notebooks/shallow-lake.html#lake-problem-dynamics",
    "href": "slides/notebooks/shallow-lake.html#lake-problem-dynamics",
    "title": "Shallow Lake Problem",
    "section": "Lake Problem Dynamics",
    "text": "Lake Problem Dynamics\nThis analysis is adapted from Quinn et al. (2017).\n\nQuinn, J. D., Reed, P. M., & Keller, K. (2017). Direct policy search for robust multi-objective management of deeply uncertain socio-ecological tipping points. Environmental Modelling & Software, 92, 125–141. https://doi.org/10.1016/j.envsoft.2017.02.017\nFirst, let’s look at how the balance of P recycling and outflows affects the accumulation of P in the lake absent additional inputs (\\(a=y=0\\)).\n\n# define functions for lake recycling and outflows\nlake_P_cycling(x, q) = x.^q ./ (1 .+ x.^q);\nlake_P_out(x, b) = b .* x;\n\n# define range of lake states X\nx = 0:0.05:2.5;\n\n\n# plot recycling and outflows for selected values of b and q\np1 = plot(x, lake_P_cycling(x, 2.5), color=:black, linewidth=5,legend=:topleft, label=:false, ylabel=\"P Flux\", xlabel=L\"$X_t$\", tickfontsize=14, guidefontsize=16, legendfontsize=14, palette=:tol_muted, framestyle=:zerolines, grid=:false)\nplot!(x, lake_P_out(x, 0.6), linewidth=3, linestyle=:dash, label=L\"$b=0.6$\")\nplot!(x, lake_P_out(x, 0.4), linewidth=3, linestyle=:dash, label=L\"$b=0.4$\")\nplot!(x, lake_P_out(x, 0.2), linewidth=3, linestyle=:dash, label=L\"$b=0.2$\")\nquiver!([1], [0.35], quiver=([1], [0.4]), color=:red, linewidth=2)\nquiver!([0.4], [0.19], quiver=([-0.125], [-0.05]), color=:red, linewidth=2)\nquiver!([2.5], [0.97], quiver=([-0.125], [-0.05]), color=:red, linewidth=2)\nplot!(ylims=(-0.02, 1))\nplot!(size=(600, 600))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Lake eutrophication dynamics based on the shallow lake modelwithout additional inputs. The black line is the P recycling level (for $q=2.5), which adds P back into the lake, and the dashed lines correspond to differerent rates of P outflow (based on the linear parameter \\(b\\)). The lake P level is in equilibrium when the recycling rate equals the outflows. When the outflow is greater than the recycling flux, the lake’s P level decreases, and when the recycling flux is greater than the outflow, the P level naturally increases. The red lines show the direction of this net flux.\n\n\n\n\nBased on Figure 1, we can see that there are typically three equilibria: a stable equilibrium at \\(X=0\\), an unstable, oligotrophic equilibrium \\(X_o\\), and a stable, eutrophic equilibrium \\(X_e\\). When \\(X_t &lt; X_o\\), the lake tends towards a zero P level without external inputs, while when \\(X_t &gt; X_o\\), the lake will inevitably undergo eutrophication, as the P level will tend towards \\(X_e\\). This means that \\(X_t=X_o\\) corresponds to a tipping point: beyond that level, the lake will abruptly switch to a eutrophic state from which it cannot recover.\nThis lake is subject to a bifurcation depending on the values of \\(b\\) and \\(q\\). To see this, let’s fix \\(q=2.5\\), as in Figure 1. For \\(b=0.4\\), there are the two equilibria mentioned previously. However, when \\(b=0.2\\), there is only the unstable equilibrium \\(X=X_o\\) in addition to \\(X=0\\). For \\(b=0.6\\), the only equilibrium is \\(X=0\\), so any positive P input would result in eutrophication. This highlights the delicacy of systems which exhibit bifurcations: whether an equilibrium is stable or unstable, or even exists, can depend on a characteristic of the system which is often highly uncertain.\n\neq = [0, 0.67, 2.2]\nscatter!(p1, eq, (y -&gt; lake_P_cycling(y, 2.5)).(eq), label=\"Equilibria\", markersize=10, markercolor=:red)\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Lake eutrophication dynamics based on the shallow lake modelwithout additional inputs. The black line is the P recycling level (for $q=2.5), which adds P back into the lake, and the dashed lines correspond to differerent rates of P outflow (based on the linear parameter \\(b\\)). The lake P level is in equilibrium when the recycling rate equals the outflows. When the outflow is greater than the recycling flux, the lake’s P level decreases, and when the recycling flux is greater than the outflow, the P level naturally increases. The red lines show the direction of this net flux.\n\n\n\n\n\np2 = plot(x, 0.05 .+ lake_P_cycling(x, 2.5), color=:black, linewidth=5,legend=:topleft, label=:false, ylabel=\"P Flux\", xlabel=L\"$X_t$\", tickfontsize=14, guidefontsize=16, legendfontsize=14, palette=:tol_muted, framestyle=:zerolines, grid=:false)\nplot!(x, lake_P_out(x, 0.6), linewidth=3, linestyle=:dash, label=L\"$b=0.6$\")\nplot!(x, lake_P_out(x, 0.4), linewidth=3, linestyle=:dash, label=L\"$b=0.4$\")\nplot!(x, lake_P_out(x, 0.2), linewidth=3, linestyle=:dash, label=L\"$b=0.2$\")\nplot!(size=(600, 600))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 3: Lake eutrophication dynamics based on the shallow lake model with. The black line is the P recycling level (for $q=2.5), which adds P back into the lake, and the dashed lines correspond to differerent rates of P outflow (based on the linear parameter \\(b\\)). The lake P level is in equilibrium when the recycling rate equals the outflows. When the outflow is greater than the recycling flux, the lake’s P level decreases, and when the recycling flux is greater than the outflow, the P level naturally increases. The red lines show the direction of this net flux."
  },
  {
    "objectID": "slides/notebooks/shallow-lake.html#simulating-the-model-under-constant-inflows",
    "href": "slides/notebooks/shallow-lake.html#simulating-the-model-under-constant-inflows",
    "title": "Shallow Lake Problem",
    "section": "Simulating The Model Under Constant Inflows",
    "text": "Simulating The Model Under Constant Inflows\nLet’s simulate the model when we fix \\(a\\) as a constant. Other parameters:\n\n\n\nVariable\nValue\nUnits\n\n\n\n\n\\(X_0\\)\n\\(0\\)\ndimensionless\n\n\n\\(\\mu\\)\n\\(\\log(0.03)\\)\ndimensionless\n\n\n\\(\\sigma^2\\)\n\\(0.1\\)\ndimensionless\n\n\n\\(q\\)\n\\(2.5\\)\ndimensionless\n\n\n\\(b\\)\n\\(0.4\\)\ndimensionless\n\n\n\n\nRandom.seed!(1)\n\n# set parameters\n\nX₀ = 0\nμ = log(0.03)\nσ² = 0.1\nq = 2.5\nb = 0.4\nT = 50\n\n50\n\n\n\ny = rand(LogNormal(μ, σ²), T)\nplot(y; label=\"Non-Point Source Inflows\", color=:black, marker=(:x, 5), guidefontsize=18, tickfontsize=16, legendfontsize=14, linewidth=3, legend=:topright)\nxlabel!(L\"t\")\nylabel!(L\"y_t\")\nplot!(size=(600, 600))\nylims!((0.025, 0.042))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 4: Inflows \\(y_t\\) for this lake problem simulation.\n\n\n\n\n\nX₁ = zeros(T+1)\nX₂ = zeros(T+1)\n\nfor t = 1:T\n    X₁[t+1] = X₁[t] + y[t] + 0.025 + lake_P_cycling(X₁[t], q) - lake_P_out(X₁[t], b)\n    X₂[t+1] = X₂[t] + y[t] + 0.05 + lake_P_cycling(X₂[t], q) - lake_P_out(X₂[t], b)\nend\n\nplot((1:T+1) .- 1, X₁, color=:blue, label=L\"$a_t = 0.025$\", guidefontsize=18, tickfontsize=16, legendfontsize=16, linewidth=3)\nplot!((1:T+1) .- 1, X₂, color=:purple, label=L\"$a_t = 0.05$\", linewidth=3)\nxlabel!(L\"t\")\nylabel!(L\"X_t\")\nplot!(size=(600, 600))\n\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 5: State of the lake under two different constant release scenarios."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About This Website",
    "section": "",
    "text": "This website contains course materials for the Fall 2024 edition of Environmental Systems Analysis, taught by Vivek Srikrishnan at Cornell University."
  },
  {
    "objectID": "about.html#acknowledgements",
    "href": "about.html#acknowledgements",
    "title": "About This Website",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nMuch of the material for this course has evolved from its prior iterations, taught by Doug Haith and C. Lindsay Anderson.\nThe layout for this site was also inspired by and draws from STA 210 at Duke University and Andrew Heiss’s course materials at Georgia State."
  },
  {
    "objectID": "about.html#tools-and-generation-workflow",
    "href": "about.html#tools-and-generation-workflow",
    "title": "About This Website",
    "section": "Tools and Generation Workflow",
    "text": "Tools and Generation Workflow\nThis website was built with Quarto, which allows me to integrate Julia code and output with the web content, pdfs, and slides in an amazingly clean fashion, while simplifying the process of generation. All materials can be generated through a simple workflow from the [GitHub Repository]."
  },
  {
    "objectID": "project/presentation.html",
    "href": "project/presentation.html",
    "title": "Project Presentation Instructions",
    "section": "",
    "text": "Your project presentation will provide a narrative overview of your project. This presentation should be aimed at your classmates, who will be conducting peer evaluations of your presentation.\nCornell’s Help for Engineering Communications provides these tips for effective presentations."
  },
  {
    "objectID": "project/presentation.html#overview",
    "href": "project/presentation.html#overview",
    "title": "Project Presentation Instructions",
    "section": "",
    "text": "Your project presentation will provide a narrative overview of your project. This presentation should be aimed at your classmates, who will be conducting peer evaluations of your presentation.\nCornell’s Help for Engineering Communications provides these tips for effective presentations."
  },
  {
    "objectID": "project/presentation.html#instructions",
    "href": "project/presentation.html#instructions",
    "title": "Project Presentation Instructions",
    "section": "Instructions",
    "text": "Instructions\nYour recorded video should be no longer than 10 minutes. Every member of the group must participate equally in the recording. The following should be included:\nYou should feel free to structure in the way which makes the most narrative sense to you, but you should include the following (you can choose the order and how much you want to dedicate to each piece):\n\nProblem background and key question;\nShort (not too technical!) overview of the modeling and analytic method;\nCentral result(s);\nConclusions and discussion.\n\nSubmit the video to Canvas by 9:00 PM on the due date."
  },
  {
    "objectID": "rubrics/standard.html",
    "href": "rubrics/standard.html",
    "title": "Standard Rubrics",
    "section": "",
    "text": "These rubrics are intended as a description for students and a guide to the TA for how to assign partial credit."
  },
  {
    "objectID": "rubrics/standard.html#meta-rubric",
    "href": "rubrics/standard.html#meta-rubric",
    "title": "Standard Rubrics",
    "section": "Meta-Rubric",
    "text": "Meta-Rubric\n\nIndividual problems may vary from these standard rubrics based on the assessed learning outcomes for the problem, but they should provide an overview of what features students ought to be included in a given solution.\nEach bullet point should appear as a separate rubric item in Gradescope. We will use positive grading (points awarded for each component).\nEach standard rubric describes partial credit for a problem with 10 points. Partial credit for (sub)problems worth less than 10 points should be scaled appropriately. Full problems usually combine one of the modeling methods with some interpretation questions, so the rubric will be a combination of the individual components.\nGenerally, rubrics for 10 point “entire problems” can be summarized with the following:\n\n+4 points for an answer with a correct implementation (including model setup).\n+2 points for the correct solution (including details such as labels, units, etc.).\n+4 points for the interpretation. These points may be broken up across subproblems, but the general assignment of points should follow this summary.\n\nNote that the points may not scale with the distribution of work for a given problem. That’s life! It may take more work to derive and implement your model than it does to intrepret your results, but in this class we care a lot about your ability to critically evaluate and interpret modeling results.\nSometimes problems will be broken up into\nThe graders cannot read your mind and will not try to. Submissions that are unclear for any reason, including but not limited to unclear syntax (English or code), uncommented code, lack of reasoning or derivation, too much detail or writing, will not be given credit. The TA has complete discretion here. If something in your solution is ambiguous, the TA has been instructed to interpret it the “wrong” way. Clear responses are a sign of understanding, which is part of what we’re assessing.\nYou will not be doubly penalized for getting the “right” solution to the “wrong” setup (you would have been penalized above), but this requires the TA to be able to easily identify that your implementation is correct given the wrong model. If your implementation is unclear, you are likely to lose points here because we have no way of knowing that your answer is “right” without re-coding your problem.\nYou will not be given credit for your code (this isn’t a programming class); the code is a means to solving the problem, and we’re more interested in how you set up the problem and interpret the solution. This does mean that code that is sloppy but works is perfectly acceptable. However, your code may get you partial credit if the TA can easily find where you made a mistake, so make sure your submitted code is well commented. It’s important to write down the mathematics of what your code is trying to implement, because the TA will only take a cursory look at your code.\nSome rubrics include “deadly sins” which will cause an immediate zero to be given for the problem. Do not do these!\nRegardless of the problem type, the following penalties will be applied per incident:\n\n-1 for missing units."
  },
  {
    "objectID": "rubrics/standard.html#standard-rubrics",
    "href": "rubrics/standard.html#standard-rubrics",
    "title": "Standard Rubrics",
    "section": "Standard Rubrics",
    "text": "Standard Rubrics\n\nOptimization Rubric\n10 points =\n\n+3 for clear specification of decision variables;\n\nThis includes units and meaning for each variable used.\n\n+2 for the correct objective;\n\nYou must write down the derivation for the objective, starting with the quantity being optimized and breaking it into decision-relevant components. Don’t treat any part of this as though it’s obvious; part of technical communication is communicating to people who aren’t as clever as you.\n\n+3 for the correct constraints;\n\nMake sure you include derivations for all constraints, starting with the meaning and explanation in intuitive terms for the constraint. Don’t treat any constraints as though they’re obvious.\n-2/-3 for an incomplete set of constraints, even if the constraints that are presented are correct.\n\n+2 for the correct solution.\n\n\n\nSimulation Rubric\n10 points =\n\n+4 for the model derivation.\n\nThis includes any relevant reasoning from mass-balance or other principles.\n\n+4 for discretizing the model correctly.\n\n-1 if no justification is provided for the chosen step-size(s).\n\n+2 points for obtaining the correct solution.\n\n-1 if the error is from a minor bug. I recommend providing an explicit sketch of your code’s procedure, so if that is correct any differences are likely to be the result of a minor bug, such as a misentered number (not ideal, but you understand what you’re doing!). Otherwise you are relying on the TA to interpret your code.\n\n\n\n\nMonte Carlo Rubric\n10 points =\n\n+4 for a clear English explanation of the sampling plan\n\nYou must justify each distribution used, including your choice of mean and standard deviation.\n\n+2 for justification of Monte Carlo sample size.\n\nDeadly Sin: No points will be given for a Monte Carlo solution with an arbitrary sample size.\n\n+2 for an estimate of the Monte Carlo standard error.\n+1 for setting a seed for reproducibility.\n+2 for correct estimate.\n\nDeviations from the posted solution are ok if they’re within the Monte Carlo standard error.\n\n\n\n\nFigure Rubrics\n10 points =\n\n+2 for appropriate choice of axes.\n\nDeadly Sin!: No points will be given for the figure if the axes are not labelled.\n\n+4 for the correct data series.\n+2 for a descriptive legend.\n+2 for a succinct description or caption.\n\n-1 for a description which is too wordy but contains the relevant information.\n\n\n\n\nInterpretation Rubrics\n10 points =\n\n+4 for specific reference to the modeling results;\n\n-2 if the results are not specifically referenced and the reader has to refer to the previous problems to understand the interpretation.\n\n+6 for thoughtfulness of the interpretation;\n\n-4 for not specifically referencing relevant model assumptions;\nDeadly Sin: Do not neglect fundamental engineering principles in any of your interpretations. You will be given a zero if you make a recommendation which e.g. violates an engineering code or standard.\nDeadly Sin: Completely generic interpretations will result in zero points."
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "FAQ",
    "section": "",
    "text": "Julia is open source. It has a great balance between intuitive syntax and speed. It was originally designed to share MATLAB’s mathematically-oriented syntax and Python’s readability. It can be used interactively, as more of a “scripting” language, but can be optimized to run code almost as quickly as C/C++. And it has a committed development base which is actively extending its capabilities: JuMP.jl lets us program optimization problems in a syntax that’s very close to the mathematical expressions, and the Turing.jl ecosystem has added some fantastic statistical and machine-learning libraries, among others. It’s becoming a common language among power systems modelers and environmental economists, among other applied communities.\nWhy not some common alternatives?\n\nR is fantastic for statistics, but it has a very unique syntax, and can be slow and struggles to scale to large-scale problems; while we won’t approach those limits in this class, there’s no need to go there for our purposes.\nPython is extremely readable, but also can be very slow unless you’re using libraries which are written in C++, and the syntax for these can be jarringly different than native Python.\nC/C++ are overkill for this class, and focusing on them would distract from our core engineering learning objectives.\nMATLAB is not free or open source. It also has some features which do not align with good broader coding and code maintainance practices (for example, having a single long function per file).\n\nUltimately, there are trade-offs with any language, and in this case, some specifics of Julia syntax and coding style may take an adjustment, but the pros outweigh the cons given the variety of programming tasks that we will be doing in this course.\n\n\n\nThere are a few on the Julia Resources page; please suggest additional resources!\n\n\n\nFirst, look at the Julia tutorials on the website to see if the relevant syntax is covered. If not, check the Julia Resources page to see if one of the provided cheatsheets lets you translate from another programming language to Julia. If those still don’t help, try Google; in particular, look for answers from https://stackoverflow.com or https://discourse.julialang.org.\nIf all of that fails, please post on Ed Discussion, and include what you’ve searched for and why they aren’t quite what you need. A stylized example of what you’d like to achieve is also helpful. As a last resort, come to office hours, but be aware you’ll have a low priority if you haven’t done the above steps, and the odds are that we’ll have to do those as well.",
    "crumbs": [
      "Course Information",
      "FAQ"
    ]
  },
  {
    "objectID": "faq.html#julia",
    "href": "faq.html#julia",
    "title": "FAQ",
    "section": "",
    "text": "Julia is open source. It has a great balance between intuitive syntax and speed. It was originally designed to share MATLAB’s mathematically-oriented syntax and Python’s readability. It can be used interactively, as more of a “scripting” language, but can be optimized to run code almost as quickly as C/C++. And it has a committed development base which is actively extending its capabilities: JuMP.jl lets us program optimization problems in a syntax that’s very close to the mathematical expressions, and the Turing.jl ecosystem has added some fantastic statistical and machine-learning libraries, among others. It’s becoming a common language among power systems modelers and environmental economists, among other applied communities.\nWhy not some common alternatives?\n\nR is fantastic for statistics, but it has a very unique syntax, and can be slow and struggles to scale to large-scale problems; while we won’t approach those limits in this class, there’s no need to go there for our purposes.\nPython is extremely readable, but also can be very slow unless you’re using libraries which are written in C++, and the syntax for these can be jarringly different than native Python.\nC/C++ are overkill for this class, and focusing on them would distract from our core engineering learning objectives.\nMATLAB is not free or open source. It also has some features which do not align with good broader coding and code maintainance practices (for example, having a single long function per file).\n\nUltimately, there are trade-offs with any language, and in this case, some specifics of Julia syntax and coding style may take an adjustment, but the pros outweigh the cons given the variety of programming tasks that we will be doing in this course.\n\n\n\nThere are a few on the Julia Resources page; please suggest additional resources!\n\n\n\nFirst, look at the Julia tutorials on the website to see if the relevant syntax is covered. If not, check the Julia Resources page to see if one of the provided cheatsheets lets you translate from another programming language to Julia. If those still don’t help, try Google; in particular, look for answers from https://stackoverflow.com or https://discourse.julialang.org.\nIf all of that fails, please post on Ed Discussion, and include what you’ve searched for and why they aren’t quite what you need. A stylized example of what you’d like to achieve is also helpful. As a last resort, come to office hours, but be aware you’ll have a low priority if you haven’t done the above steps, and the odds are that we’ll have to do those as well.",
    "crumbs": [
      "Course Information",
      "FAQ"
    ]
  },
  {
    "objectID": "faq.html#github",
    "href": "faq.html#github",
    "title": "FAQ",
    "section": "GitHub",
    "text": "GitHub\n\nWhy are we using GitHub?\nGitHub is an industry-standard version control platform. Anecdotally, adding GitHub to your skillset is a great resume booster for engineers who work in computing-heavy environments. For the purposes of our class, GitHub facilitates:\n\nAssignment management through GitHub Classroom;\nSharing of code/notebooks for debugging and asking for help (otherwise, I end up with many files with the same name, and might not open the right one…);\nUsing your repository as your submission in case something goes wrong and you can’t submit your completed assignment on time.\n\n\n\nWhat level of GitHub familiarity will I need?\nNone from the start! And the following commands are all you will need for this course (you can also use GitHub Desktop or use the GitHub functionality in VS Code, which we will discuss in class):\n\ngit clone &lt;github-repository-url&gt;: This is needed to “clone” your assignment repository (initialize your local repository).\ngit commit -m &lt;message&gt;: This is used to “lock in” changes that you’ve made to your files. You should make commits frequently as you make changes so you can revert to prior versions if something goes wrong (and make your messages meaningful so you know what changes you’ve made!)\ngit push: This syncs any committed changes to the remote GitHub repository. You must do this prior to using your repository to ask for help.",
    "crumbs": [
      "Course Information",
      "FAQ"
    ]
  },
  {
    "objectID": "faq.html#assignments-homework-labs-and-aes",
    "href": "faq.html#assignments-homework-labs-and-aes",
    "title": "FAQ",
    "section": "Assignments (Homework, Labs, and AEs)",
    "text": "Assignments (Homework, Labs, and AEs)\n\nHow do I access assignments?\nWe will use GitHub Classroom to manage assessments. Links to accept the assignments and create your repository will be posted on Ed Discussion as they are released, and posts with the links for active assignments will be pinned. The class schedule will link to a page which has a preview of the assignment, but links are not provided from this page to accept the assignment.\nFor the first assignment you accept, you will need to link your GitHub account to your entry in the class roster. You will not need to do this again for the rest of the semester.\n\n\nWhat if there’s an error in the assignment repository?\nThat’s certainly possible! If you believe I’ve made a mistake in writing the assignment, please document it in the Ed Discussion forum. I’ll describe steps for how to fix your files (unfortunately, I can’t do this remotely and push it to everyone’s repositories).\n\n\nHelp! My code isn’t working.\nHere are some steps I would follow:\n\nSearch for the error message you’re seeing. Often, you can find posts in the r/Julia subreddit, the official Julia forum, or Stack Overflow for the same or similar issues. You should do this first: if you can find the answer this way, it will be faster than other options, and if you can rule out some approaches that you’ve already tried, it will make the following steps go more smoothly.\nPost on Ed Discussion. For the most effective help, follow the following guidelines (adapted from Stack Overflow’s “How Do I Ask A Good Question?”):\n\nMake your post subject specific and descriptive. “Problem with HW 1 Problem 3” makes it hard for other members of the class community to know if they’re having a similar issue or if they can help. Since the TA and I may not be checking Ed religiously, you’ll get faster responses if other students feel prepared to help.\nIntroduce the problem. What have you tried? What error message are you getting? Have you been able to identify a specific line of code or section of code that’s causing the problem?\nProvide code. It’s very difficult to get a sense of what might be going wrong if you just say that you have a problem, even if you share the error message. If you have a small question (you can demonstrate the error with a brief snippet of code), you can directly put this into your Ed post, but otherwise, please provide a link to your GitHub repository and where to find the relevant codes.\n\n\n\n\n\n\nUpdate Your Repository!\n\n\n\nYou must commit and push your current files to GitHub prior to asking for help, or we won’t be able to see the code that you’re having trouble with.\n\n\n\nCome to office hours. If you can identify the problem, but we’re having trouble solving it via Ed or more urgency is required, please come to office hours and we can try to work through the issue. This is most helpful if you’ve already done some problem-solving on your own.\n\n\n\n\n\n\nGive Yourself Time To Problem-Solve\n\n\n\nWaiting until the last day or two to start an assignment can cause problems if you don’t have time to work through the following steps. If office hours are busy and you haven’t gone through the prior steps, you may be prioritized below than students who are have, and we may not have time to solve your problem. Running into coding challenges is not a valid reason to get an extension on an assignment!\n\n\n\n\n\nCan you help me debug my code?\nYour first task should be to identify what part of your code works as desired, to help narrow down where the bug could be. If your code is broken into functions or smaller blocks, set up simple tests to make find which block(s) are causing the problem. If your code is just one big script, try to divide it into logical sections, then conduct these tests. Once you identify the part of the code that is not working, go line by line to see what particular command is doing something unexpected. Once you’ve identified what line is doing something strange, try to search for how to solve the problem and/or post on Ed with your code snippet (actually copy the code into the post or provide a link to your GitHub repository, with the line number; do not paste a screenshot) and a description of what you’re trying to accomplish and what the specific problem is.\nIf you are not sure how to articulate what your code is trying to do (or are similarly unsure how to divide your code into logical units), that suggests that your problem is not debugging, but rather conceptual: step back and try to write out the logic of your code and how it aligns with the strategy you’ve developed to solve the problem. It might be that there is a conceptual problem rather than a bug, which we can definitely discuss!\nIf, however, you’ve tried the above steps and cannot figure out the bug, come to office hours, but if you have not done the above steps (and so cannot point to where exactly you’re running into a problem and cannot describe what that part of code is trying to accomplish), we will ask you to figure that out on your own first. Otherwise, we cannot fruitfully help — nobody is more familiar with your code and problem-solving strategy than you are.\n\n\nHow do I get a PDF of my notebook for submission?\nThere are two main options, depending on what you’ve already got set up on your computer.\n\n\n\n\n\n\nRun Notebook Cells Before Submission\n\n\n\nRemember to “Run All” cells prior to conversion and submission, or else we won’t see your results!\n\n\n\nIf you have a Python installation, you can use a tool called nbconvert to convert to a PDF (if you also have LaTeX installed) or HTML (and then you can use your browser to print to a PDF).\nIf you don’t have a Python installation, within VS Code, you can use IJulia.jl (which will be included in the environments provided with assignments in this class) as follows (enter these commands into the REPL) to open your notebook in your browser:\nusing IJulia\nnotebook()\nThis should open a Jupyter notebook interface in your browser. Navigate to and open the notebook, and once it has completed running, go to File -&gt; Print Preview in the browser menu and Print to PDF.\n\n\n\nHow do I submit my PDF to Gradescope?\nThe instructions for submitting your assignment to Gradescope can be found here.\n\n\n\n\n\n\nTag Pages\n\n\n\nMake sure that you mark/tag the pages corresponding to each question! Otherwise, we will deduct 10%. If a problem spans multiple pages, tag them all; if a page includes multiple problems, tag it several times. You may lose points if part of your answer is untagged (these will not be returned through a regrade request).",
    "crumbs": [
      "Course Information",
      "FAQ"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html",
    "href": "tutorials/latex-notebook.html",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "",
    "text": "This tutorial was inspired and draws from Justin Bois’ tutorial.",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html#overview",
    "href": "tutorials/latex-notebook.html#overview",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "Overview",
    "text": "Overview\nIn this tutorial, you will learn how to typeset mathematics and equations in Jupyter notebooks using LaTeX.",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html#inline-mathematics",
    "href": "tutorials/latex-notebook.html#inline-mathematics",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "Inline Mathematics",
    "text": "Inline Mathematics\nTo include mathematical notation within text, enclose the LaTeX within dollar signs $. For example, to obtain the output\n\nthe objective function is \\(4x + 7x\\),\n\nyou would enter\n\nthe objective function is $4x + 7x$.\n\nYou can enter subscripts and superscripts with _ and ^, respectively; to get\n\nthe function is \\(f(x_i) = x_i^2\\),\n\ntype\n\nthe function is $f(x_i) = x_i^2$.\n\nIf you want multiple characters to be enclosed in a subscript or superscript, enclose them in braces {}:\n\n\\(e^{i \\pi} - 1 = 0\\) is produced by\n\n\n$e^{i \\pi} - 1 = 0$.\n\nTo get special characters like \\(\\pi\\) (or other Greek letters), precede their name (or sometimes a code) with a backslash: $\\pi$. There are a number of special characters like this, which you can find in cheatsheets like this one.\nBold characters, which you might use to denote vectors, can be rendered using \\mathbf:\n\n\\(\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\\)\n\n\n$\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i$\n\nFractions can be displayed using \\frac{}{}, where the first bracket encloses the numerator and the second the denominator, as in\n\n\\(\\frac{1}{2}\\)\n\n\n$\\frac{1}{2}$",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html#displaying-equations",
    "href": "tutorials/latex-notebook.html#displaying-equations",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "Displaying Equations",
    "text": "Displaying Equations\nTo place equations or other mathematics on their own line(s), enclose the entire block in two dollar signs $$. For example, the prior dot-product definition could be displayed as \\[\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\n\\] using\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=1}^n a_i \\times b_i\n$$\nDisplaying equations on their own line(s) can improve the spacing of symbols like sums (as above) or fractions: compare the inline\n\n\\(x &lt; \\frac{1}{2}\\)\n\nto \\[\nx &lt; \\frac{1}{2}.\n\\]\nTo display multiple related lines in a single block, there are two environments of note. The first will center all of the equations, and is obtained by enclosing the equations in \\begin{gather} and \\end{gather}. Each line should be separated with \\\\:\n\\[\n\\begin{gather}\nx_1 + x_2 \\leq 5 \\\\\ny \\leq \\frac{1}{2}.\n\\end{gather}\n\\]\n$$\n\\begin{gather}\nx_1 + x_2 \\leq 5 \\\\\ny \\leq \\frac{1}{2}.\n\\end{gather}\n$$\nThe second environment will let you align the equations as you wish instead of automatically centering them, and is used by enclosing the equations with \\begin{align} and \\end{align}, with an ampersand & in front of the characters which will be used on each line to align the equations:\n\\[\n\\begin{align}\nx_1 + x_2 &\\leq 5 \\\\\ny &\\leq \\frac{1}{2}.\n\\end{align}\n\\]\n$$\n\\begin{align}\nx_1 + x_2 &\\leq 5 \\\\\ny &\\leq \\frac{1}{2}.\n\\end{align}\n$$",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html#sizing-parentheses-or-brackets",
    "href": "tutorials/latex-notebook.html#sizing-parentheses-or-brackets",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "Sizing Parentheses or Brackets",
    "text": "Sizing Parentheses or Brackets\nBy default, parentheses and brackets are sized for simple characters, but will look bad when used to surround fractions or sums, particularly when they are not used in-line: \\[\nx_n = (\\frac{1}{2})^n.\n\\] To make this look better, use \\left and \\right around the left and right parentheses or brackets: \\[\nx_n = \\left(\\frac{1}{2}\\right)^n\n\\]\n$$\nx_n = \\left(\\frac{1}{2}\\right)^n.\n$$\nThis is totally optional, but helps!",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/latex-notebook.html#using-latex-in-figures",
    "href": "tutorials/latex-notebook.html#using-latex-in-figures",
    "title": "Tutorial: Using LaTeX in Jupyter Notebooks",
    "section": "Using LaTeX in Figures",
    "text": "Using LaTeX in Figures\nYou may want to use LaTeX in figures, for example if your \\(x\\)-axis should have a title like \\(x\\). To do this, load the LaTeXStrings package and precede the relevant LaTeX-formatted string (within in-line dollar signs $) with L, as in:\n\nusing Plots\nusing LaTeXStrings\n\nx = -2π:0.01:2π  \nplot(x, exp.(sin.(x)), xlabel=L\"$x$\", ylabel=L\"$e^{\\sin(x)}$\", legend=false)",
    "crumbs": [
      "Tutorials",
      "Math in Notebooks"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html",
    "href": "tutorials/julia-plots.html",
    "title": "Tutorial: Making Plots with Julia",
    "section": "",
    "text": "This tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is Plots.jl, but there are some others that provide useful features.",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html#overview",
    "href": "tutorials/julia-plots.html#overview",
    "title": "Tutorial: Making Plots with Julia",
    "section": "",
    "text": "This tutorial will give some examples of plotting and plotting features in Julia, as well as providing references to some relevant resources. The main plotting library is Plots.jl, but there are some others that provide useful features.",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html#some-resources",
    "href": "tutorials/julia-plots.html#some-resources",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Some Resources",
    "text": "Some Resources\n\nPlots.jl useful tips\nPlots.jl examples\nPlot attributes\nAxis attributes\nColor names",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html#making-a-basic-plot",
    "href": "tutorials/julia-plots.html#making-a-basic-plot",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Making a Basic Plot",
    "text": "Making a Basic Plot\nLet’s walk through making a basic line or scatter plot in Julia, using Plots.jl1.\n1 There are some other plotting libraries in Julia, but Plots.jl is a standard starting point. Feel free to experiment, though!Since we’ll be generating random numbers, let’s import Random.jl to let us set a seed to reproduce the same plot in addition to Plots.jl.\n\nusing Plots\nusing LaTeXStrings\nusing Measures\nusing Random\nRandom.seed!(1);\n\nFirst, to generate a basic line plot, use plot():\n\ny = rand(5)\nplot(y, label=\"original data\", legend=:topleft)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe could also explicitly pass \\(x\\)-axis coordinates by passing an array with these coordinates first, as in plot(x, y, ...). If only one array is passed, Plots.jl will interpret the values as \\(y\\) coordinates and use their indices for the \\(x\\) positions.\nNotice the use of the label and legend keywords to label the plot element and position the legend. To not label a particular plotting element, use label=false, and to turn off any legend (including a colorbar) from the plot, use legend=false.\nNow we can add some other lines and point markers. We will use plot! and scatter! to add another line and some points.\n\n\n\n\n\n\nMutating Function\n\n\n\nThe exclamation mark says that plot!() is a mutating function, which changes an existing variable instead of creating a new one. In this case, these functions change or add to an existing plot, instead of creating a new one.\n\n\nNotice the arguments in plot!() and scatter!(), which let us set properties for the line and scatterplot markers.\n\ny2 = rand(5)\ny3 = rand(5)\nplot!(y2, color=:red, linewidth=2, linestyle=:dot, label=\"new data\")\nscatter!(y3, markercolor=:black, markershape=:square, markersize=5, label=\"even more data\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s now add axis labels. We can use LaTeX syntax to add mathematical markup elements to labels (such as superscripts, subscripts, Greek letters, and mathematical symbols) using the LaTeXStrings.jl package. If we indicate that a string should be interpreted as a LaTeXString using the L\"...\" syntax, it will render content inside $..$ using LaTeX, as seen below.\n\nxlabel!(\"Regular String (days)\")\nylabel!(L\"LaTeX String $x_2$ (m$^3$)\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemoving Plot Elements\nSometimes we want to remove legends, axes, grid lines, and/or ticks.\n\nplot!(legend=false, axis=false, grid=false, ticks=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nNotice that this unintentionally modified the image dimensions to move the axis labels off the page. If we wanted to keep them, we could modify the dimensions with plot!(size=...).\n\nplot!(size=(400, 400))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nThe lesson is that sometimes the Plots.jl defaults don’t look ideal, and we need to adjust sizes and margins.\n\n\nAspect Ratio\nIf we want to have a square aspect ratio, use ratio = 1.\n\nv = rand(5)\nplot(v, ratio=1, legend=false)\nscatter!(v)",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html#plot-demos",
    "href": "tutorials/julia-plots.html#plot-demos",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Plot Demos",
    "text": "Plot Demos\nThis section includes some examples of how to make other types of plots.\n\nHeatmaps\nA heatmap is effectively a plotted matrix with colors chosen according to the values. Use clim to specify a fixed range for the color limits.\n\nA = rand(10, 10)\nheatmap(A, clim=(0, 1), ratio=1, legend=false, axis=false, ticks=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\nM = [ 0 1 0; 0 0 0; 1 0 0]\nwhiteblack = [RGBA(1,1,1,0), RGB(0,0,0)]\nheatmap(c=whiteblack, M, aspect_ratio = 1, ticks=.5:3.5, lims=(.5,3.5), gridalpha=1, legend=false, axis=false, ylabel=\"i\", xlabel=\"j\")\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustom Colors\n\nusing Colors\n\nmycolors = [colorant\"lightslateblue\",colorant\"limegreen\",colorant\"red\"]\nA = [i for i=50:300, j=1:100]\nheatmap(A, c=mycolors, clim=(1,300))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\nPlotting Areas Under Curves\nWe can plot the area between a curve and the \\(x\\)-axis using areaplot().\n\nx = -3:.01:3\nareaplot(x, exp.(-x.^2/2)/√(2π),alpha=.25,legend=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also use this functionality for stacked area plots.\n\nM = [1 2 3; 7 8 9; 4 5 6; 0 .5 1.5]\nareaplot(1:3, M, seriescolor = [:red :green :blue ], fillalpha = [0.2 0.3 0.4])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe fillrange option lets us color the area between two arbitrary lines/curves if we only want to treat one of those curves as a boundary. fillcolor and fillalpha let you change the color and transparency of the filled area.\n\ny = rand(10)\nplot(y, fillrange= y.*0 .+ .5, label= \"above/below 1/2\", fillcolor=:red, legend =:top)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx = LinRange(0,2,100)\ny1 = exp.(x)\ny2 = exp.(1.3 .* x)\nplot(x, y1, fillrange = y2, fillalpha = 0.35, c = 1, label = \"Confidence band\", legend = :topleft)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also get more creative and color different parts of a curve differently. Here, we divide a normal distribution into 100 quantiles and alternate red and blue stripes. We’ll do this using the erfinv() function from SpecialFunctions.jl to calculate the quantiles using the inverse cumulative distribution function, but there are other approaches using Distributions.jl.\n\nusing SpecialFunctions\n\n# write a function for the normal distribution density\nf = x -&gt; exp(-x^2/2)/√(2π)\n# get the edges of the quantiles\nδ = .01\nx = √2 .* erfinv.(2 .* (δ/2 : δ : 1) .- 1)\n# make the plot and draw the density line in black\nareaplot(x, f.(x), seriescolor=[ :red,:blue], legend=false)\nplot!(x, f.(x),c=:black)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Shapes\nWe can also draw shapes more directly, such as rectangles and circles.\n\nrectangle(w, h, x, y) = Shape(x .+ [0,w,w,0], y .+ [0,0,h,h])\ncircle(r,x,y) = (θ = LinRange(0,2π,500); (x.+r.*cos.(θ), y.+r.*sin.(θ)))\nplot(circle(5,0,0), ratio=1, c=:red, fill=true)\nplot!(rectangle(5*√2,5*√2,-2.5*√2,-2.5*√2),c=:white,fill=true,legend=false)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlotting Distributions\nThe StatsPlots.jl package is very useful for making various plots of probability distributions.\n\nusing Distributions, StatsPlots\nplot(Normal(2, 5))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscatter(LogNormal(0.8, 1.5))\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe can also use this functionality to plot distributions of data in tabular data structures like DataFrames.\n\nusing DataFrames\ndat = DataFrame(a = 1:10, b = 10 .+ rand(10), c = 10 .* rand(10))\n@df dat density([:b :c], color=[:black :red])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLog-Scaled Axes\n\nxx = .1:.1:10\nplot(xx.^2, xaxis=:log, yaxis=:log)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplot(exp.(x), yaxis=:log)",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "tutorials/julia-plots.html#editing-plots-manually",
    "href": "tutorials/julia-plots.html#editing-plots-manually",
    "title": "Tutorial: Making Plots with Julia",
    "section": "Editing Plots Manually",
    "text": "Editing Plots Manually\n\npl = plot(1:4,[1, 4, 9, 16])\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npl.attr\n\nRecipesPipeline.DefaultsDict with 30 entries:\n  :dpi                      =&gt; 96\n  :background_color_outside =&gt; :match\n  :plot_titlefontvalign     =&gt; :vcenter\n  :warn_on_unsupported      =&gt; true\n  :background_color         =&gt; RGBA{Float64}(1.0,1.0,1.0,1.0)\n  :inset_subplots           =&gt; nothing\n  :size                     =&gt; (672, 480)\n  :display_type             =&gt; :auto\n  :overwrite_figure         =&gt; true\n  :html_output_format       =&gt; :svg\n  :plot_titlefontfamily     =&gt; :match\n  :plot_titleindex          =&gt; 0\n  :foreground_color         =&gt; RGB{N0f8}(0.0,0.0,0.0)\n  :window_title             =&gt; \"Plots.jl\"\n  :plot_titlefontrotation   =&gt; 0.0\n  :extra_plot_kwargs        =&gt; Dict{Any, Any}()\n  :pos                      =&gt; (0, 0)\n  :plot_titlefonthalign     =&gt; :hcenter\n  :tex_output_standalone    =&gt; false\n  :extra_kwargs             =&gt; :series\n  :thickness_scaling        =&gt; 1\n  :layout                   =&gt; 1\n  :plot_titlelocation       =&gt; :center\n  :plot_titlefontsize       =&gt; 16\n  :plot_title               =&gt; \"\"\n  ⋮                         =&gt; ⋮\n\n\n\npl.series_list[1]\n\nPlots.Series(RecipesPipeline.DefaultsDict(:plot_object =&gt; Plot{Plots.GRBackend() n=1}, :subplot =&gt; Subplot{1}, :label =&gt; \"y1\", :fillalpha =&gt; nothing, :linealpha =&gt; nothing, :linecolor =&gt; RGBA{Float64}(0.0,0.6056031611752245,0.9786801175696073,1.0), :x_extrema =&gt; (NaN, NaN), :series_index =&gt; 1, :markerstrokealpha =&gt; nothing, :markeralpha =&gt; nothing…))\n\n\n\npl[:size]=(300,200)\n\n(300, 200)\n\n\n\npl",
    "crumbs": [
      "Tutorials",
      "Making Plots"
    ]
  },
  {
    "objectID": "hw.html",
    "href": "hw.html",
    "title": "Homework",
    "section": "",
    "text": "This page contains information about and a schedule of the homework assignments for the semester.",
    "crumbs": [
      "Homework"
    ]
  },
  {
    "objectID": "hw.html#general-information",
    "href": "hw.html#general-information",
    "title": "Homework",
    "section": "General Information",
    "text": "General Information\n\nWhile the instructions for each assignment are available through the linked pages for quick and public access, if you are in the class you must use the link provided in Ed Discussion to accept the assignment. This will ensure that:\n\nYou have compatible versions of all relevant packages provided in the environment;\nYou have a GitHub repository that you can use to share your code.\n\nSubmit assignments by 9:00pm Eastern Time on the due date on Gradescope.\nSubmissions must be PDFs. Make sure that you tag the pages corresponding to each question; points will be deducted otherwise.\nTo convert the assignment notebook to PDF, you can use VS Code to render the notebook to HTML, and then use your browser to print to PDF. If you have set up LaTeX with VS Code, you can convert directly to a PDF.",
    "crumbs": [
      "Homework"
    ]
  },
  {
    "objectID": "hw.html#grading",
    "href": "hw.html#grading",
    "title": "Homework",
    "section": "Grading",
    "text": "Grading\nMake sure to look over the standard homework rubric and familiarize yourself with the homework and grading policies.",
    "crumbs": [
      "Homework"
    ]
  },
  {
    "objectID": "hw.html#schedule",
    "href": "hw.html#schedule",
    "title": "Homework",
    "section": "Schedule",
    "text": "Schedule\n\n\n\n\n\n\n\n\n\nAssignment\nInstructions\nSolutions\nDue Date\n\n\n\n\nHW1\n\n\nSep 05, 2024\n\n\nHW2\n\n\nSep 20, 2024\n\n\nHW3\n\n\nOct 04, 2024\n\n\nHW4\n\n\nNov 08, 2024\n\n\nHW5\n\n\nDec 06, 2024",
    "crumbs": [
      "Homework"
    ]
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "First Time: Tools Setup",
    "section": "",
    "text": "Getting set up for this course requires the following steps, if you haven’t done them for a previous course, club, or project:",
    "crumbs": [
      "Course Information",
      "Setup"
    ]
  },
  {
    "objectID": "setup.html#instructions",
    "href": "setup.html#instructions",
    "title": "First Time: Tools Setup",
    "section": "Instructions",
    "text": "Instructions\n\nInstall Git\nIf you have already installed git, you don’t need to worry about this section. If you haven’t, download the appropriate version for your operating system.\n\n\n\n\n\n\nMac Versions\n\n\n\nIf you have a Mac, be aware if you have an Apple Silicon (M1 or M2) Mac or an Intel Mac. Many of the installations you will go through in this exercise have different versions for each processor type, and the program may not work properly if you still the wrong version. There’s nothing that can’t be undone, but it’s easier to be install the correct version first!\n\n\n\n\nInstall Julia\nI recommend installing Julia using the juliaup tool, which will let you easily manage versions in the future and works seamlessly with VS Code. The instructions can be found at the JuliaUp GitHub repository, but we will summarize them here.\n\nInstalling Juliaup on Windows\nIf your computer uses Windows, you can install Juliaup from the Windows Store.\n\n\nInstalling Juliaup on MacOS\nIf you have a Mac, open a terminal (such as the Terminal app) and enter:\ncurl -fsSL https://install.julialang.org | sh\n\n\nInstalling Julia 1.10.2\nOnce you install Juliaup, install Julia version 1.10.2 by opening a terminal (in MacOS or Linux) or the command line (in Windows) and entering:\njuliaup add 1.10.2\njuliaup default 1.10.2\nThis will install Julia 1.10.2 and make it the default version, which should maximize package compatibility throughout this course. Going forward, if you want to add new versions or change the default, you can follow the Juliaup instructions.\n\n\n\nInstall and Set Up VS Code\nYou can skip this section if you already have a coding environment you like; just set it up to work with Julia. Otherwise, VS Code is as close to an officially supported editor for Julia as you can get. We will follow this guide for setting up VS Code with Julia.\n\nInstalling VS Code\nYou can download it here; open the downloaded file to install.\n\n\nInstall the Julia Extension\n\nOpen VS Code.\nSelect View and click Extensions to open the Extension View. This view can also be found on the sidebar with the following logo:\n\n\n\nVS Code Extensions View Logo\n\n\nSearch for julia in the search box. Click the green install button.\nRestart VS Code once the installation is complete. It should automatically find your Julia installation; talk to Vivek if not.\n\nThe Julia VS Code extension offers you some nice features. You can start a REPL (an interactive Julia coding environment) by opening the “Command Palette” (View -&gt; Command Palette, or CTRL/CMD+SHIFT+P) and typing “REPL” to bring up “Julia: Start REPL”. You can also create *.jl files to write Julia code and execute line by line. However, we will primarily use Jupyter notebooks in this class, but this might be useful for testing code or for your project.\n\n\nInstall the Jupyter Notebook Extension\nThe Jupyter Notebook extension allows you to export a Jupyter notebook to PDF or to HTML and then to PDF.\n\n\n\n\n\n\nPDF Export for Gradescope\n\n\n\nYou will need to export every notebook to a PDF for submission to Gradescope. Direct export to PDF requires a LaTeX installation. If you would like to go this route, please look at the LaTeX installation instructions for your operating system.\nOtherwise, exporting to HTML and then using your browser to save the resulting page to a PDF is a perfect solution.\n\n\nFollow the same instructions as above, but search for jupyter and install the Jupyter extension. Restart VS Code.\n\n\n\nSet Up GitHub\n\nCreate GitHub Account\nIf you already have a GitHub account, you can use that for this course and do not need to create a new account.\nOtherwise, create an account. It doesn’t have to be linked to your Cornell email or use your Cornell NetID.\nFor labs and homework assignments (we will work on Lab 1 in class and Homework 1 is available), you should use the GitHub Classroom link to “accept” the assignment provided on Ed Discussion, which will give you your own GitHub repository for that assignment. The first time you click one of these links, you will need to link your place on the course roster with your GitHub account.\nWhen application exercises require notebook use (which is the case here, but will not always be), you can follow the workflow in these next steps, and will be prompted to do so in the instructions for that exercise.\nYou can do almost everything that you will need to do for this course with GitHub directly through VS Code, or you can use the GitHub UI or the Terminal. We will assume in these instructions that you will just work through VS Code.",
    "crumbs": [
      "Course Information",
      "Setup"
    ]
  }
]