---
title: "Uncertainty and Simple Climate Models"
subtitle: "Lecture 12"
author: "Vivek Srikrishnan"
course: "BEE 4750"
institution: "Cornell University"
date: "September 22, 2023"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        footer: "[BEE 4750, Environmental Systems Analysis](https://viveks.me/environmental-systems-analysis)"
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: mathjax      
        include-in-header: mathjax-config.html
        date-format: long
execute:
    freeze: auto
---

```{julia}
#| echo: false
#| output: false

import Pkg
Pkg.activate(".")
Pkg.instantiate()
```

```{julia}
#| echo: false
#| output: false

using Measures
using Random
using Plots
using CSV
using DataFrames
using Distributions
using StatsPlots

Random.seed!(1)
```


# Review and Questions

## Monte Carlo

Monte Carlo is **stochastic simulation**.

```{dot}
//| fig-width: 100%
digraph G {
    graph [
        rankdir=LR
        layout=dot
    ]
    node [
        fontname = "IBM Plex Sans, sans-serif"
        fontsize=25
    ]
    edge [
        arrowsize=0.75
        labeldistance=3
        penwidth=3
        fontname = "IBM Plex Sans, sans-serif"
        fontsize=25
        style=dashed
        color="#b31b1b"
        fontcolor="#b31b1b"
    ]
    a [label="Probability\n Distribution"]
    b [label = "Random\n Samples"]
    c [label="Model"]
    d [label="Outputs"]

    a -> b [
        label="Sample"
    ]
    b -> c [
        label="Input"
    ]
    c -> d [
        label="Simulate"
    ]
}

```

## Monte Carlo

Let $Y=f(X)$, where $X$ is a random variable. Let $\mathbb{E}[Y] = \mu$.

If $X_1, \ldots, X_n$ are independent samples, then the Monte Carlo estimate of $\mu$ is $$\tilde{\mu}_n = \frac{1}{n} \sum_{i=1}^n f(X_i) = \frac{1}{n}\sum_{i=1}^n Y_i.$$

The key point: $\tilde{\mu}_n \to \mu$ as $n \to \infty$.

## Monte Carlo Properties

Monte Carlo is an **unbiased estimator**: $$\mathbb{E}[\tilde{\mu}_n] = \mu.$$

Monte Carlo variance: $$\text{Var}[\tilde{\mu}_n] = \tilde{\sigma}_n^2 = \frac{\sigma_Y^2}{n}.$$

## Monte Carlo Confidence Intervals

This means we can obtain $\alpha$-confidence intervals:

$$\tilde{\mu}_n \pm \Phi^{-1}\left(1 - \frac{\alpha}{2}\right) \frac{\sigma_Y}{\sqrt{n}}.$$

## Questions?

{{< include _poll-prompt.qmd >}}

# Energy Balance and Climate Change

## Planetary Energy Balance

![Representation of Planetary Energy Balance](https://www.e-education.psu.edu/meteo469/sites/www.e-education.psu.edu.meteo469/files/lesson04/ebm_0_dim.gif)

::: {.caption}
Source: Reprinted from A Climate Modeling Primer, A. Henderson-Sellers and K. McGuffie, Wiley, pg. 58, (1987) via <https://www.e-education.psu.edu/meteo469/node/137>.
:::

## Radiative Forcing

Climate changes result from changes to the energy balance of the planet (or **radiative forcings**), due to *e.g.*:

- greenhouse gas emissions (which trap radiation, warming the planet);
- aerosol emissions from air pollution or volcanic eruptions (which block incoming radiation, cooling the planet);
- changes to the solar cycle (which can increase or decrease the incoming solar radiation).

## Historical and Projected Radiative Forcing

:::: {.columns}
::: {.column width=70%}
```{julia}
#| label: fig-rf
#| fig-align: center
#| fig-cap: Historical and projected radiative forcings.

# Dataset from https://zenodo.org/record/3973015
# The CSV is read into a DataFrame object, and we specify that it is comma delimited
forcings_all = CSV.read("data/climate/ERF_ssp585_1750-2500.csv", DataFrame, delim=",")

# Separate out the individual components
forcing_co2 = forcings_all[!,"co2"]
# Get total aerosol forcings
forcing_aerosol_rad = forcings_all[!,"aerosol-radiation_interactions"]
forcing_aerosol_cloud = forcings_all[!,"aerosol-cloud_interactions"]
forcing_aerosol = forcing_aerosol_rad + forcing_aerosol_cloud
forcing_total = forcings_all[!,"total"]
forcing_non_aerosol = forcing_total - forcing_aerosol
forcing_other = forcing_total - (forcing_co2 + forcing_aerosol)

t = time_forcing = Int64.(forcings_all[!,"year"]) # Ensure that years are interpreted as integers

plot(xlabel="Year", ylabel="Radiative Forcing (W/m²)", tickfontsize=14, guidefontsize=16, legendfontsize=14, leftmargin=10mm, bottommargin=5mm)
plot!(time_forcing, forcing_total, label="Total", color=:black, linewidth=3)
plot!(time_forcing, forcing_co2, label="CO₂", color=:orange, linewidth=2)
plot!(time_forcing, forcing_aerosol, label="Aerosol", color=:blue, linewidth=2)
plot!(time_forcing, forcing_other, label="Other", color=:purple, linewidth=2)
vline!([2014], label="", color=:red, linestyle=:dash)
plot!(size=(800, 450))
```
:::
::: {.column width=30%}
These projections are under RCP 8.5, which is the "worst-case" official future climate scenario.
:::
::::

## Historical and Projected Radiative Forcing

:::: {.columns}
::: {.column width=70%}
```{julia}
#| label: fig-rf-26
#| fig-align: center
#| fig-cap: Historical and projected radiative forcings.

# Dataset from https://zenodo.org/record/3973015
# The CSV is read into a DataFrame object, and we specify that it is comma delimited
forcings_all = CSV.read("data/climate/ERF_ssp126_1750-2500.csv", DataFrame, delim=",")

# Separate out the individual components
forcing_co2 = forcings_all[!,"co2"]
# Get total aerosol forcings
forcing_aerosol_rad = forcings_all[!,"aerosol-radiation_interactions"]
forcing_aerosol_cloud = forcings_all[!,"aerosol-cloud_interactions"]
forcing_aerosol = forcing_aerosol_rad + forcing_aerosol_cloud
forcing_total = forcings_all[!,"total"]
forcing_non_aerosol = forcing_total - forcing_aerosol
forcing_other = forcing_total - (forcing_co2 + forcing_aerosol)

t = time_forcing = Int64.(forcings_all[!,"year"]) # Ensure that years are interpreted as integers

plot(xlabel="Year", ylabel="Radiative Forcing (W/m²)", tickfontsize=14, guidefontsize=16, legendfontsize=14, leftmargin=10mm, bottommargin=5mm)
plot!(time_forcing, forcing_total, label="Total", color=:black, linewidth=3)
plot!(time_forcing, forcing_co2, label="CO₂", color=:orange, linewidth=2)
plot!(time_forcing, forcing_aerosol, label="Aerosol", color=:blue, linewidth=2)
plot!(time_forcing, forcing_other, label="Other", color=:purple, linewidth=2)
vline!([2014], label="", color=:red, linestyle=:dash)
plot!(size=(800, 450))
```
:::
::: {.column width=30%}
These are RCP 2.6, one of the "better" scenarios (often a lower bound on future warming).
:::
::::


# The Energy Balance Model (EBM)

## Sketch of the EBM

- Simplest possible climate model.
- Treats the Earth as a 0-dimensional sphere covered with water.
- Earth warms due to imbalance in average (over surface area) heat flux.

## EBM Equations

\begin{align*}
\overbrace{\frac{dH}{dt}}^{\text{change in heat}} &= \overbrace{F}^{\text{RF}} - \overbrace{\lambda T}^{\substack{\text{change in} \\ \text{temperature}}} \\
\underbrace{C}_{\substack{\text{ocean heat} \\ \text{capacity}}} \frac{dT}{dt} &= F - \lambda T
\end{align*}

The proportionality coefficient $\lambda$ is important: it is the **climate feedback factor** and controls how much the Earth warms in response to radiative forcing.

## What the EBM Neglects

The EBM is a one-box model of the Earth's climate: models energy balance between incoming and outgoing heat. As such, it neglects:

- "Deep" ocean heat uptake and cycling.
- Multiple atmospheric layers.
- Spatial patterns of atmospheric and ocean circulation.

## Equilibrium Climate Sensitivity (ECS)

Under steady-state conditions (constant $F$ and $dT/dt = 0$), $$T = \frac{F}{\lambda}.$$

When we double atmospheric CO~2~, we refer to the equilibrium temperature $S$ as the **equilibrium climate sensitivity**:

$$S = \underbrace{F_{2\times \text{CO}_2}}_{\approx 4 \text{W/m}^2}/\lambda$$

## Equilibrium Climate Sensitivity Uncertainty

The ECS is very uncertain (though uncertainty has been reduced recently). 

# Monte Carlo Simulation and ECS Uncertainty

## Uncertainty Propagation in the Climate System

How does uncertainty in the ECS propagate to uncertainty in temperatures in 2100?

:::: {.columns}
::: {.column width=60%}
A reasonable distribution is $S \sim \text{LogNormal}(\log(3.2), \log(2)/{2})$
:::
::: {.column width=40%}
```{julia}
ecs_dist = LogNormal(log(3.2), log(2)/2)
ecs_samples = rand(ecs_dist, 100000)
plot(density(ecs_samples), linewidth=3, legend=:false, tickfontsize=14)
plot!(size=(500, 300))
xlims!((0,7.2))
vline!([mean(ecs_samples)], linewidth=3, linestyle=:dash)
q_lo, q_hi = quantile(ecs_dist, [0.025, 0.975])
areaplot!(q_lo:0.01:q_hi, pdf.(ecs_dist, q_lo:0.01:q_hi))
```
:::
::::

# Upcoming Schedule

## Next Classes

**Wednesday/Friday**: Simulating Dissolved Oxygen

**Next Week**: Prescriptive Modeling and Optimization

## Assessments

**Friday**: Homework 2 and Lab 2 both due.