---
title: "Plume Models: Dispersion and Examples"
subtitle: "Lecture 08"
author: "Vivek Srikrishnan"
course: "BEE 4750"
institution: "Cornell University"
date: "September 11, 2023"
format:
    revealjs:
        slide-number: c/t
        show-slide-number: all
        center-title-slide: true
        width: 1280
        height: 720
        transition: none
        toc: true
        toc-depth: 1
        toc-title: "Overview"
        history: false
        link-external-newwindow: true
        theme: ../sass/slides.scss
        footer: "[BEE 4750, Environmental Systems Analysis](https://viveks.me/environmental-systems-analysis)"
        template-partials:
            - title-slide.html
        menu:
            numbers: true
        html-math-method: mathjax
        include-in-header: mathjax-config.html
        date-format: long

execute:
    freeze: auto
---

```{julia}
import Pkg
Pkg.activate(".")
Pkg.instantiate()
```

```{julia}
using DataFrames
using Plots
using LaTeXStrings
using Measures
```

# Review and Questions

## Gaussian Plume for Air Pollution Dispersion

- Used for point sources.
- Typically for continuous emissions from an elevated source.

## Gaussian Plume Model

| Variable | Meaning | 
|:--------:|:--------|
| $C$ | Concentration (g/m$^3$) | 
| $Q$ | Emissions Rate (g/s) | 
| $H$ | Effective Source Height (m) | 
| $u$ | Wind Speed (m/s) |
| $y, z$ | Crosswind, Vertical Distance (m)


## Gaussian Plume Model

![Gaussian Plume Distribution](figures/air-pollution-plume-dist.png)


## Gaussian Plume Model With Ground Reflection

$$\begin{aligned}
C(x,y,z) = &\frac{Q}{2\pi u \sigma_y \sigma_z} \exp\left(\frac{-y^2}{2\sigma_y^2} \right) \times \\\\
& \quad \left[\exp\left(\frac{-(z-H)^2}{2\sigma_z^2}\right) + \exp\left(\frac{-(z+H)^2}{2\sigma_z^2}\right) \right]
\end{aligned}$$


## Questions

{{< include _poll-prompt.qmd >}}

# Dispersion

## Estimating Dispersion "Spread"

Values of $\sigma_y$ and $\sigma_z$ matter substantially for modeling plume spread downwind. What influences them?

## Estimating Dispersion "Spread"

**Main contribution**: atmospheric stability

- Greater stability &Rightarrow; less vertical/cross-wind dispersion.

- Pasquill (1961): Six stability classes.

## Estimating Dispersion "Spread"

Contributors to atmospheric stability:

- Temperature gradient
- Wind speed
- Solar radiation
- Cloud cover
- Richardson number (buoyancy / flow shear)

## Atmospheric Stability Classes

Class | Stability | Description |
:----:|:----------|:-----------|
A | Extremely unstable | Sunny summer day 
B | Moderately unstable | Sunny & warm |
C | Slightly unstable | Partly cloudy day |
D | Neutral | Cloudy day or night |
E | Slightly stable | Partly cloudy night |
F | Moderately stable | Clear night |

::: {.caption}
Source: <https://courses.ecampus.oregonstate.edu/ne581/eleven/>
:::

## Estimating Dispersion "Spread"

$$\begin{aligned}
\sigma_y &= ax^{0.894} \\
\sigma_z &= cx^d + f
\end{aligned}$$

![Dispersion Coefficients](figures/plume-dispersion.png)

::: {.caption}
Source: <https://courses.washington.edu/cee490/DISPCOEF4WP.htm>
:::

**Note**: here $x$ is in km, while in the plume equation $y$, $z$ are in m!


## Estimating Dispersion "Spread"

Then take estimates for $\sigma_y$ and $\sigma_z$ and plug into plume dispersion equation

$$\begin{aligned}
C(x,y,z) = &\frac{Q}{2\pi u {\color{red}\sigma_y \sigma_z}} \exp\left(\frac{-y^2}{2{\color{red}\sigma_y^2}} \right) \times \\\\
& \quad \left[\exp\left(\frac{-(z-H)^2}{2{\color{red}\sigma_z^2}}\right) + \exp\left(\frac{-(z+H)^2}{2{\color{red}\sigma_z^2}}\right) \right]
\end{aligned}$$

# Plume Model Example

## Example

A 100m tall chimney emits HCl at a rate of 1.75 kg/s. The plume rises 10m before being convected horizontally by the wind. A housing development is planned near the chimney, and environmental authorities want to map the HCl concentration within a 5km x 1km region downwind under

- neutral, moderately stable, and moderately unstable atmospheric conditions, 
- and under 5 m/s and 20 m/s winds?

## Plume Equation

\begin{aligned}
C(x,y,z) = &\frac{Q}{2\pi u \sigma_y \sigma_z} \exp\left(\frac{-y^2}{2\sigma_y^2} \right) \times \\\\
& \quad \left[\exp\left(\frac{-(z-H)^2}{2\sigma_z^2}\right) + \exp\left(\frac{-(z+H)^2}{2\sigma_z^2}\right) \right]
\end{aligned}

## Plume Equation (Ground Level)

\begin{aligned}
C(x,y) = &\frac{Q}{\pi u \sigma_y \sigma_z} \exp\left(\frac{-y^2}{2\sigma_y^2} \right) \exp\left(\frac{-H^2}{2\sigma_z^2}\right)
\end{aligned}

## Key Variables

- $Q$: 1750 g/s
- $H$: 110 m
- $u$: 5 or 20 m/s
- $x$: 0 to 3000 m (need to pick a step size)
- $y$: 0 to 1000 m (need to pick a step size)

## Calculate Dispersion Spread

Neutral, moderately stable, moderately unstable atmospheric conditions &Rightarrow; Classes D, B, F

Get the coefficients off the table and put them into the regression equations for $\sigma_y$ and $\sigma_z$.

**Key thing**: $\sigma_z$ dispersion changes once we pass 1000m downwind ($x$-direction).

Now we can write a simulation model.

## Simulation Model "Pseudocode"

You'll do this for real for homework, but here's a brief sketch:

- Pick a resolution/grid size (we'll use 10m) and set up $x$ and $y$ grids;
- For each wind speed and stability class:
    - Loop over each grid point and compute $\sigma_y$, $\sigma_z$;
    - Use plume equation to compute concentration.

## Simulation Model "Pseudocode"

There are more or less efficient or "stylish" ways to write this code, but don't worry about that for this class, just make sure your code is readable and documented to help with debugging!

## Julia vs. Matlab/Python

**The good news**: Unlike in Python, loops in Julia are really well-optimized.

## Julia vs. Matlab/Python

**The bad news**: There can be some weird issue with scope when doing something this (which you might in Python or Matlab):

```julia
C = zeros(10)

for i in eachindex(C)
    C[i] = f(i)
end
```

## Julia vs. Matlab/Python

Instead, try broadcasting over inputs:

```julia
I = 1:10
C = f.(I)
```

or use a *comprehension*:
```julia
C = [f(i) for i in I]
```

## Neutral Conditions

```{julia}
#| output: false

# set up coefficients in matrix form
turb_coef = [
    213.0  440.8 1.041 9.27  459.7 2.094 -9.6
    156.0  106.6 1.149 3.3   108.2 1.098 2.0
    104.0  61.0  0.911 0.0   61.0  0.911 0.0
    68.0   33.2  0.725 -1.7  44.5  0.516 -13.0
    50.5   22.8  0.675 -1.3  55.4  0.305 -34.0
    34.0   14.35 0.740 -0.35 62.6  0.180 -48.6 
]
# now convert to DataFrame with names
# column names ending with 1 refer to coefficients for x < 1km, column names ending with 2 refer to coefficients for x > 1km 
turb_coef = DataFrame(turb_coef, ["a", "c1", "d1", "f1", "c2", "d2", "f2"])
```

```{julia}
#| output: false

function gaussian_plume(x, y, sy, sz, Q, H, u)
    C = (Q / (Ï€ * u * sy * sz)) * exp(-y^2 / (2 * sy^2)) * exp(-H^2 / (2 * sz^2))
    return C
end

function simulate_plume(X, Y, turb_class, Q, H, u; turb_coef = turb_coef)
    sy = turb_coef[turb_class, "a"] .* (X./1000).^0.894
    sz = ifelse.(X .< 1000, turb_coef[turb_class, "c1"] .* (X./1000).^turb_coef[turb_class, "d1"] .+ turb_coef[turb_class, "f1"], turb_coef[turb_class, "c2"] .* (X./1000).^turb_coef[turb_class, "d2"] .+ turb_coef[turb_class, "f2"])
    C = [gaussian_plume(X[j], Y[i], sy[j], sz[j], Q, H, u) for i in eachindex(Y), j in eachindex(X)]
    return C
end

X = 0:10:5000
Y = -500:10:500
```

Color values are HCl concentrations in $\mu$g.

:::: {.columns}
::: {.column width=50%}
```{julia}
#| label: fig-heatmap-5-D
#| fig-cap: "Neutral Conditions"

turb_class = 4

C = simulate_plume(X, Y, turb_class, 1750, 110, 5)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 2.3), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))
```
::: {.caption}
5 m/s wind
:::
:::

::: {.column width=50%}
```{julia}
#| label: fig-heatmap-10-D
#| fig-cap: "Neutral Conditions"

turb_class = 4

C = simulate_plume(X, Y, turb_class, 1750, 110, 10)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 2.3), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))

```
::: {.caption}
10 m/s wind
:::
:::
::::

## Moderately Stable Conditions

Color values are HCl concentrations in $\mu$g.

:::: {.columns}
::: {.column width=50%}
```{julia}
#| label: fig-heatmap-5-F
#| fig-cap: "Neutral Conditions"

turb_class = 6

C = simulate_plume(X, Y, turb_class, 1750, 110, 5)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 0.15), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))
```
::: {.caption}
5 m/s wind
:::
:::

::: {.column width=50%}
```{julia}
#| label: fig-heatmap-10-F
#| fig-cap: "Neutral Conditions"

turb_class = 6

C = simulate_plume(X, Y, turb_class, 1750, 110, 10)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 0.15), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))

```
::: {.caption}
10 m/s wind
:::
:::
::::

## Moderately Unstable Conditions

Color values are HCl concentrations in $\mu$g.

:::: {.columns}
::: {.column width=50%}
```{julia}
#| label: fig-heatmap-5-B
#| fig-cap: "Neutral Conditions"

turb_class = 2

C = simulate_plume(X, Y, turb_class, 1750, 110, 5)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 4.25), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))
```
::: {.caption}
5 m/s wind
:::
:::

::: {.column width=50%}
```{julia}
#| label: fig-heatmap-10-B
#| fig-cap: "Neutral Conditions"

turb_class = 2

C = simulate_plume(X, Y, turb_class, 1750, 110, 10)
heatmap(X, Y, C .* 1000, c=:thermal, clim=(0, 4.25), xlabel=L"$x$ (m)", ylabel=L"$y$ (m)", tickfontsize=12, guidefontsize=14, leftmargin=10mm, rightmargin=5mm, bottommargin=2mm)
plot!(size=(650, 350))

```
::: {.caption}
10 m/s wind
:::
:::
::::

# Key Takeaways

## Key Takeaways

- Atmospheric stability plays a major role in pollution dispersion.
- Can use simulation modeling to evaluate concentrations of a contaminant over a spatial domain.
- Key choice: resolution
- Then "loop" (or in Julia, broadcast/use a comprehension) over the spatial grid.
- **Important**: this all assumed a fixed wind speed and stability.

# Upcoming Schedule

## Next Classes

**Wednesday**: Probability and Monte Carlo

**Friday**: Lab on Monte Carlo.

## Assessments

- HW2 on simulating Gaussian plume dispersion released today.
- Due 9/22.